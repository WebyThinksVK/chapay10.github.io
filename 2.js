self.AMP_CONFIG||(self.AMP_CONFIG={"localDev":true,"allow-doc-opt-in":["amp-date-picker","amp-next-page","ampdoc-shell","disable-amp-story-desktop","disable-faster-amp-list","inabox-rov","inline-styles","url-replacement-v2"],"allow-url-opt-in":["pump-early-frame"],"canary":0,"expAdsenseA4A":0.01,"a4aProfilingRate":0.01,"ad-type-custom":1,"amp-access-iframe":1,"amp-apester-media":1,"amp-ima-video":1,"amp-playbuzz":1,"amp-story-navigation-performance":1,"chunked-amp":1,"amp-auto-ads":1,"amp-auto-ads-adsense-holdout":0.1,"version-locking":1,"as-use-attr-for-format":0.01,"a4aFastFetchDoubleclickLaunched":0,"a4aFastFetchAdSenseLaunched":0,"pump-early-frame":1,"amp-live-list-sorting":1,"amp-sidebar toolbar":1,"svg-in-mustache":0,"disable-faster-amp-list":1,"amp-consent":1,"amp-img-native-srcset":1,"amp-story-v1":1,"expAdsenseUnconditionedCanonical":0,"expAdsenseCanonical":0,"font-display-swap":1,"amp-date-picker":1,"url-replacement-v2":1,"user-error-reporting":1,"inline-styles":1,"doubleclickSraExp":0.01,"doubleclickSraReportExcludedBlock":0.1});/*AMP_CONFIG*/var global=self;self.AMP=self.AMP||[];try{(function(_){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var cssText = exports.cssText = "html{overflow-x:hidden!important}body,html{height:auto!important}html.i-amphtml-fie{height:100%!important;width:100%!important}body{margin:0!important;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}[hidden]{display:none!important}html.i-amphtml-singledoc.i-amphtml-embedded{-ms-touch-action:pan-y;touch-action:pan-y}html.i-amphtml-fie>body,html.i-amphtml-singledoc>body{overflow:visible!important;position:relative!important}html.i-amphtml-webview>body{overflow-x:hidden!important;overflow-y:visible!important;min-height:100vh!important}html.i-amphtml-ios-embed-legacy>body{overflow-x:hidden!important;overflow-y:auto!important;position:absolute!important}html.i-amphtml-ios-embed{overflow-y:auto!important;position:static}#i-amphtml-wrapper{overflow-x:hidden!important;overflow-y:auto!important;position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;margin:0!important;display:block!important}html.i-amphtml-ios-embed.i-amphtml-ios-overscroll,html.i-amphtml-ios-embed.i-amphtml-ios-overscroll>#i-amphtml-wrapper{-webkit-overflow-scrolling:touch!important}#i-amphtml-wrapper>body{position:relative!important;border-top:1px solid transparent!important}html.i-amphtml-ios-embed-sd{overflow:hidden!important;position:static!important}html.i-amphtml-ios-embed-sd>body,html.i-amphtml-singledoc.i-amphtml-ios-embed-sd>body{position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;overflow:hidden!important}.i-amphtml-element{display:inline-block}.i-amphtml-blur{-webkit-filter:blur(20px)!important;filter:blur(20px)!important;-webkit-transform:scale(1.1)!important;transform:scale(1.1)!important;-webkit-transition:opacity 0.3s cubic-bezier(0.0,0.0,0.2,1)!important;transition:opacity 0.3s cubic-bezier(0.0,0.0,0.2,1)!important}.i-amphtml-layout-fixed,[layout=fixed][width][height]:not(.i-amphtml-layout-fixed){display:inline-block;position:relative}.i-amphtml-layout-responsive,[layout=responsive][width][height]:not(.i-amphtml-layout-responsive),[width][height][sizes]:not(.i-amphtml-layout-responsive){display:block;position:relative}.i-amphtml-layout-intrinsic{display:inline-block;position:relative;max-width:100%}.i-amphtml-intrinsic-sizer{max-width:100%;display:block!important}.i-amphtml-layout-fixed-height,[layout=fixed-height][height]{display:block;position:relative}.i-amphtml-layout-container,[layout=container]{display:block;position:relative}.i-amphtml-layout-fill,[layout=fill]:not(.i-amphtml-layout-fill){display:block;overflow:hidden!important;position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-layout-flex-item,[layout=flex-item]:not(.i-amphtml-layout-flex-item){display:block;position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.i-amphtml-layout-fluid{position:relative}.i-amphtml-layout-size-defined{overflow:hidden!important}.i-amphtml-layout-awaiting-size{position:absolute!important;top:auto!important;bottom:auto!important}i-amphtml-sizer{display:block!important}.i-amphtml-blur,.i-amphtml-fill-content{display:block;height:0;max-height:100%;max-width:100%;min-height:100%;min-width:100%;width:0;margin:auto}.i-amphtml-layout-size-defined .i-amphtml-fill-content{position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-layout-intrinsic .i-amphtml-sizer{max-width:100%}.i-amphtml-replaced-content,.i-amphtml-screen-reader{padding:0!important;border:none!important}.i-amphtml-screen-reader{position:fixed!important;top:0px!important;left:0px!important;width:4px!important;height:4px!important;opacity:0!important;overflow:hidden!important;margin:0!important;display:block!important;visibility:visible!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:8px!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:12px!important}.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader~.i-amphtml-screen-reader{left:16px!important}.i-amphtml-unresolved{position:relative;overflow:hidden!important}#i-amphtml-wrapper.i-amphtml-scroll-disabled,.i-amphtml-scroll-disabled{overflow-x:hidden!important;overflow-y:hidden!important}.i-amphtml-select-disabled{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}.i-amphtml-notbuilt,[layout]:not(.i-amphtml-element){position:relative;overflow:hidden!important;color:transparent!important}.i-amphtml-notbuilt:not(.i-amphtml-layout-container)>*,[layout]:not([layout=container]):not(.i-amphtml-element)>*{display:none}.i-amphtml-ghost{visibility:hidden!important}[layout=nodisplay]:not(.i-amphtml-display){display:none!important}.i-amphtml-element>[placeholder],[layout]:not(.i-amphtml-element)>[placeholder]{display:block}.i-amphtml-element>[placeholder].amp-hidden,.i-amphtml-element>[placeholder].hidden{visibility:hidden}.i-amphtml-element:not(.amp-notsupported)>[fallback]{display:none}.i-amphtml-layout-size-defined>[fallback],.i-amphtml-layout-size-defined>[placeholder]{position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;z-index:1}.i-amphtml-notbuilt>[placeholder]{display:block!important}.i-amphtml-hidden-by-media-query{display:none!important}.i-amphtml-element-error{background:red!important;color:#fff!important;position:relative!important}.i-amphtml-element-error:before{content:attr(error-message)}i-amp-scroll-container,i-amphtml-scroll-container{position:absolute;top:0;left:0;right:0;bottom:0;display:block}i-amp-scroll-container.amp-active,i-amphtml-scroll-container.amp-active{overflow:auto;-webkit-overflow-scrolling:touch}.i-amphtml-loading-container{display:block!important;z-index:1}.i-amphtml-notbuilt>.i-amphtml-loading-container{display:block!important}.i-amphtml-loading-container.amp-hidden{visibility:hidden}.i-amphtml-loader-line{position:absolute;top:0;left:0;right:0;height:1px;overflow:hidden!important;background-color:hsla(0,0%,59.2%,0.2);display:block}.i-amphtml-loader-moving-line{display:block;position:absolute;width:100%;height:100%!important;background-color:hsla(0,0%,59.2%,0.65);z-index:2}@-webkit-keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}@keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}.i-amphtml-loader-line.amp-active .i-amphtml-loader-moving-line{-webkit-animation:i-amphtml-loader-line-moving 4s ease infinite;animation:i-amphtml-loader-line-moving 4s ease infinite}.i-amphtml-loader{position:absolute;display:block;height:10px;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;white-space:nowrap}.i-amphtml-loader.amp-active .i-amphtml-loader-dot{-webkit-animation:i-amphtml-loader-dots 2s infinite;animation:i-amphtml-loader-dots 2s infinite}.i-amphtml-loader-dot{position:relative;display:inline-block;height:10px;width:10px;margin:2px;border-radius:100%;background-color:rgba(0,0,0,0.3);box-shadow:2px 2px 2px 1px rgba(0,0,0,0.2);will-change:transform}.i-amphtml-loader .i-amphtml-loader-dot:first-child{-webkit-animation-delay:0s;animation-delay:0s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(2){-webkit-animation-delay:.1s;animation-delay:.1s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(3){-webkit-animation-delay:.2s;animation-delay:.2s}@-webkit-keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,0.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,0.5)}}@keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,0.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,0.5)}}.i-amphtml-element>[overflow]{cursor:pointer;position:relative;z-index:2;visibility:hidden}.i-amphtml-element>[overflow].amp-visible{visibility:visible}template{display:none!important}.amp-border-box,.amp-border-box *,.amp-border-box :after,.amp-border-box :before{box-sizing:border-box}amp-pixel{display:none!important}amp-instagram{padding:64px 0px 0px!important;background-color:#fff}amp-analytics,amp-story-auto-ads{position:fixed!important;top:0!important;width:1px!important;height:1px!important;overflow:hidden!important;visibility:hidden}amp-iframe iframe{box-sizing:border-box!important}[amp-access][amp-access-hide]{display:none}[subscriptions-dialog],body:not(.i-amphtml-subs-ready) [subscriptions-action],body:not(.i-amphtml-subs-ready) [subscriptions-section]{display:none!important}form [submit-error],form [submit-success],form [submitting]{display:none}[visible-when-invalid]{display:none}amp-live-list>[update]{display:none}amp-experiment,amp-share-tracking{display:none}.i-amphtml-jank-meter{position:fixed;background-color:rgba(232,72,95,0.5);bottom:0;right:0;color:#fff;font-size:16px;z-index:1000;padding:5px}amp-accordion{display:block!important}amp-accordion>section{float:none!important}amp-accordion>section>*{float:none!important;display:block!important;overflow:hidden!important;position:relative!important}.i-amphtml-accordion-content,.i-amphtml-accordion-header,amp-accordion,amp-accordion>section{margin:0}.i-amphtml-accordion-header{cursor:pointer;background-color:#efefef;padding-right:20px;border:1px solid #dfdfdf}amp-accordion>section>:last-child{display:none!important}amp-accordion>section[expanded]>:last-child{display:block!important}amp-story-page,amp-story[standalone]{display:block!important;height:100%!important;margin:0!important;padding:0!important;overflow:hidden!important;width:100%!important}amp-story[standalone]{background-color:#fff!important;position:relative!important}amp-story-page{background-color:#757575}amp-story .i-amphtml-loader{display:none!important}[amp-fx^=fly-in]{visibility:hidden}\n/*# sourceURL=/css/amp.css*/";

},{}],2:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmpImg = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.installImg = installImg;

var _baseElement = require('../src/base-element');

var _log = require('../src/log');

var _img = require('../src/utils/img');

var _experiments = require('../src/experiments');

var _layout = require('../src/layout');

var _eventHelper = require('../src/event-helper');

var _customElementRegistry = require('../src/service/custom-element-registry');

var _style = require('../src/style');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * Attributes to propagate to internal image when changed externally.
 * @type {!Array<string>}
 */
var ATTRIBUTES_TO_PROPAGATE = ['alt', 'title', 'referrerpolicy', 'aria-label', 'aria-describedby', 'aria-labelledby', 'srcset', 'src', 'sizes'];

var AmpImg = exports.AmpImg = function (_BaseElement) {
  _inherits(AmpImg, _BaseElement);

  /** @param {!AmpElement} element */
  function AmpImg(element) {
    _classCallCheck(this, AmpImg);

    /** @private {boolean} */
    var _this = _possibleConstructorReturn(this, (AmpImg.__proto__ || Object.getPrototypeOf(AmpImg)).call(this, element));

    _this.allowImgLoadFallback_ = true;

    /** @private {boolean} */
    _this.isPrerenderAllowed_ = true;

    /** @private {?Element} */
    _this.img_ = null;

    /** @private {?UnlistenDef} */
    _this.unlistenLoad_ = null;

    /** @private {?UnlistenDef} */
    _this.unlistenError_ = null;
    return _this;
  }

  /** @override */


  _createClass(AmpImg, [{
    key: 'mutatedAttributesCallback',
    value: function mutatedAttributesCallback(mutations) {
      if (this.img_) {
        var attrs = ATTRIBUTES_TO_PROPAGATE.filter(function (value) {
          return mutations[value] !== undefined;
        });
        this.propagateAttributes(attrs, this.img_, /* opt_removeMissingAttrs */true);
        (0, _img.guaranteeSrcForSrcsetUnsupportedBrowsers)(this.img_);
      }
    }

    /** @override */

  }, {
    key: 'preconnectCallback',
    value: function preconnectCallback(onLayout) {
      // NOTE(@wassgha): since parseSrcset is computationally expensive and can
      // not be inside the `buildCallback`, we went with preconnecting to the
      // `src` url if it exists or the first srcset url.
      var src = this.element.getAttribute('src');
      if (src) {
        this.preconnect.url(src, onLayout);
      } else {
        var srcset = this.element.getAttribute('srcset');
        if (!srcset) {
          return;
        }
        // We try to find the first url in the srcset
        var srcseturl = /\S+/.exec(srcset);
        // Connect to the first url if it exists
        if (srcseturl) {
          this.preconnect.url(srcseturl[0], onLayout);
        }
      }
    }

    /** @override */

  }, {
    key: 'buildCallback',
    value: function buildCallback() {
      this.isPrerenderAllowed_ = !this.element.hasAttribute('noprerender');
    }

    /** @override */

  }, {
    key: 'isLayoutSupported',
    value: function isLayoutSupported(layout) {
      return (0, _layout.isLayoutSizeDefined)(layout);
    }

    /**
     * Create the actual image element and set up instance variables.
     * Called lazily in the first `#layoutCallback`.
     */

  }, {
    key: 'initialize_',
    value: function initialize_() {
      if (this.img_) {
        return;
      }
      // If this amp-img IS the fallback then don't allow it to have its own
      // fallback to stop from nested fallback abuse.
      this.allowImgLoadFallback_ = !this.element.hasAttribute('fallback');

      // For inabox SSR, image will have been written directly to DOM so no need
      // to recreate.  Calling appendChild again will have no effect.
      if (this.element.hasAttribute('i-amphtml-ssr')) {
        this.img_ = this.element.querySelector('img');
      }
      this.img_ = this.img_ || new Image();
      this.img_.setAttribute('decoding', 'async');
      if (this.element.id) {
        this.img_.setAttribute('amp-img-id', this.element.id);
      }

      // Remove role=img otherwise this breaks screen-readers focus and
      // only read "Graphic" when using only 'alt'.
      if (this.element.getAttribute('role') == 'img') {
        this.element.removeAttribute('role');
        this.user().error('AMP-IMG', 'Setting role=img on amp-img elements breaks ' + 'screen readers please just set alt or ARIA attributes, they will ' + 'be correctly propagated for the underlying <img> element.');
      }

      this.propagateAttributes(ATTRIBUTES_TO_PROPAGATE, this.img_);
      (0, _img.guaranteeSrcForSrcsetUnsupportedBrowsers)(this.img_);
      this.applyFillContent(this.img_, true);
      this.element.appendChild(this.img_);
    }

    /** @override */

  }, {
    key: 'prerenderAllowed',
    value: function prerenderAllowed() {
      return this.isPrerenderAllowed_;
    }

    /** @override */

  }, {
    key: 'reconstructWhenReparented',
    value: function reconstructWhenReparented() {
      return false;
    }

    /** @override */

  }, {
    key: 'layoutCallback',
    value: function layoutCallback() {
      var _this2 = this;

      this.initialize_();
      var img = (0, _log.dev)().assertElement(this.img_);
      this.unlistenLoad_ = (0, _eventHelper.listen)(img, 'load', function () {
        return _this2.hideFallbackImg_();
      });
      this.unlistenError_ = (0, _eventHelper.listen)(img, 'error', function () {
        return _this2.onImgLoadingError_();
      });
      if (this.getLayoutWidth() <= 0) {
        return Promise.resolve();
      }
      return this.loadPromise(img);
    }

    /** @override */

  }, {
    key: 'unlayoutCallback',
    value: function unlayoutCallback() {
      if (this.unlistenError_) {
        this.unlistenError_();
        this.unlistenError_ = null;
      }
      if (this.unlistenLoad_) {
        this.unlistenLoad_();
        this.unlistenLoad_ = null;
      }
      return true;
    }

    /** @override **/

  }, {
    key: 'firstLayoutCompleted',
    value: function firstLayoutCompleted() {
      var placeholder = this.getPlaceholder();
      if (placeholder && placeholder.classList.contains('i-amphtml-blur') && (0, _experiments.isExperimentOn)(this.win, 'blurry-placeholder')) {
        (0, _style.setImportantStyles)(placeholder, { 'opacity': 0 });
      } else {
        this.togglePlaceholder(false);
      }
    }

    /**
     * @private
     */

  }, {
    key: 'hideFallbackImg_',
    value: function hideFallbackImg_() {
      var _this3 = this;

      if (!this.allowImgLoadFallback_ && this.img_.classList.contains('i-amphtml-ghost')) {
        this.getVsync().mutate(function () {
          _this3.img_.classList.remove('i-amphtml-ghost');
          _this3.toggleFallback(false);
        });
      }
    }

    /**
     * If the image fails to load, show a fallback or placeholder instead.
     * @private
     */

  }, {
    key: 'onImgLoadingError_',
    value: function onImgLoadingError_() {
      var _this4 = this;

      if (this.allowImgLoadFallback_) {
        this.getVsync().mutate(function () {
          _this4.img_.classList.add('i-amphtml-ghost');
          _this4.toggleFallback(true);
          // Hide placeholders, as browsers that don't support webp
          // Would show the placeholder underneath a transparent fallback
          _this4.togglePlaceholder(false);
        });
        this.allowImgLoadFallback_ = false;
      }
    }
  }]);

  return AmpImg;
}(_baseElement.BaseElement);

/**
 * @param {!Window} win Destination window for the new element.
 * @this {undefined}  // Make linter happy
 */


function installImg(win) {
  (0, _customElementRegistry.registerElement)(win, 'amp-img', AmpImg);
}

},{"../src/base-element":13,"../src/event-helper":27,"../src/experiments":28,"../src/layout":43,"../src/log":45,"../src/service/custom-element-registry":71,"../src/style":110,"../src/utils/img":120}],3:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.installLayout = installLayout;

var _baseElement = require('../src/base-element');

var _layout = require('../src/layout');

var _customElementRegistry = require('../src/service/custom-element-registry');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var AmpLayout = function (_BaseElement) {
  _inherits(AmpLayout, _BaseElement);

  function AmpLayout() {
    _classCallCheck(this, AmpLayout);

    return _possibleConstructorReturn(this, (AmpLayout.__proto__ || Object.getPrototypeOf(AmpLayout)).apply(this, arguments));
  }

  _createClass(AmpLayout, [{
    key: 'isLayoutSupported',


    /** @override */
    value: function isLayoutSupported(layout) {
      return layout == _layout.Layout.CONTAINER || (0, _layout.isLayoutSizeDefined)(layout);
    }

    /** @override */

  }, {
    key: 'buildCallback',
    value: function buildCallback() {
      if (this.getLayout() == _layout.Layout.CONTAINER) {
        return;
      }
      var container = this.win.document.createElement('div');
      this.applyFillContent(container);
      this.getRealChildNodes().forEach(function (child) {
        container.appendChild(child);
      });
      this.element.appendChild(container);
    }
  }]);

  return AmpLayout;
}(_baseElement.BaseElement);

/**
 * @param {!Window} win Destination window for the new element.
 */


function installLayout(win) {
  (0, _customElementRegistry.registerElement)(win, 'amp-layout', AmpLayout);
}

},{"../src/base-element":13,"../src/layout":43,"../src/service/custom-element-registry":71}],4:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmpPixel = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.installPixel = installPixel;

var _baseElement = require('../src/base-element');

var _services = require('../src/services');

var _pixel = require('../src/pixel');

var _log = require('../src/log');

var _customElementRegistry = require('../src/service/custom-element-registry');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var TAG = 'amp-pixel';

/**
 * A simple analytics instrument. Fires as an impression signal.
 */

var AmpPixel = exports.AmpPixel = function (_BaseElement) {
  _inherits(AmpPixel, _BaseElement);

  /** @override */
  function AmpPixel(element) {
    _classCallCheck(this, AmpPixel);

    /** @private {?Promise<!Image>} */
    var _this = _possibleConstructorReturn(this, (AmpPixel.__proto__ || Object.getPrototypeOf(AmpPixel)).call(this, element));

    _this.triggerPromise_ = null;
    return _this;
  }

  /** @override */


  _createClass(AmpPixel, [{
    key: 'isLayoutSupported',
    value: function isLayoutSupported(unusedLayout) {
      // No matter what layout is: the pixel is always non-displayed.
      return true;
    }

    /** @override */

  }, {
    key: 'buildCallback',
    value: function buildCallback() {
      // Element is invisible.
      this.element.setAttribute('aria-hidden', 'true');

      /** @private {?string} */
      this.referrerPolicy_ = this.element.getAttribute('referrerpolicy');
      if (this.referrerPolicy_) {
        // Safari doesn't support referrerPolicy yet. We're using an
        // iframe based trick to remove referrer, which apparently can
        // only do "no-referrer".
        (0, _log.user)().assert(this.referrerPolicy_ == 'no-referrer', TAG + ': invalid "referrerpolicy" value "' + this.referrerPolicy_ + '".' + ' Only "no-referrer" is supported');
      }
      if (this.element.hasAttribute('i-amphtml-ssr') && this.element.querySelector('img')) {
        (0, _log.dev)().info(TAG, 'inabox img already present');
        return;
      }
      // Trigger, but only when visible.
      var viewer = _services.Services.viewerForDoc(this.getAmpDoc());
      viewer.whenFirstVisible().then(this.trigger_.bind(this));
    }

    /**
     * Triggers the signal.
     * @private
     */

  }, {
    key: 'trigger_',
    value: function trigger_() {
      var _this2 = this;

      if (this.triggerPromise_) {
        // TODO(dvoytenko, #8780): monitor, confirm if there's a bug and remove.
        (0, _log.dev)().error(TAG, 'duplicate pixel');
        return this.triggerPromise_;
      }
      // Delay(1) provides a rudimentary "idle" signal.
      // TODO(dvoytenko): use an improved idle signal when available.
      this.triggerPromise_ = _services.Services.timerFor(this.win).promise(1).then(function () {
        var src = _this2.element.getAttribute('src');
        if (!src) {
          return;
        }
        return _services.Services.urlReplacementsForDoc(_this2.element).expandUrlAsync(_this2.assertSource_(src)).then(function (src) {
          var pixel = (0, _pixel.createPixel)(_this2.win, src, _this2.referrerPolicy_);
          (0, _log.dev)().info(TAG, 'pixel triggered: ', src);
          return pixel;
        });
      });
    }

    /**
     * @param {?string} src
     * @return {string}
     * @private
     */

  }, {
    key: 'assertSource_',
    value: function assertSource_(src) {
      (0, _log.user)().assert(/^(https\:\/\/|\/\/)/i.test(src), 'The <amp-pixel> src attribute must start with ' + '"https://" or "//". Invalid value: ' + src);
      return (/** @type {string} */src
      );
    }
  }]);

  return AmpPixel;
}(_baseElement.BaseElement);

/**
 * @param {!Window} win Destination window for the new element.
 */


function installPixel(win) {
  (0, _customElementRegistry.registerElement)(win, TAG, AmpPixel);
}

},{"../src/base-element":13,"../src/log":45,"../src/pixel":50,"../src/service/custom-element-registry":71,"../src/services":104}],5:[function(require,module,exports){
/*!

Copyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
// global window Object
// optional polyfill info
//    'auto' used by default, everything is feature detected
//    'force' use the polyfill even if not fully needed
function installCustomElements(window, polyfill) {'use strict';

  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK
  // THIS IS A PROJECT BASED ON A BUILD SYSTEM
  // THIS FILE IS JUST WRAPPED UP RESULTING IN
  // build/document-register-element.node.js

  var
    document = window.document,
    Object = window.Object
  ;

  var htmlClass = (function (info) {
    // (C) Andrea Giammarchi - @WebReflection - MIT Style
    var
      catchClass = /^[A-Z]+[a-z]/,
      filterBy = function (re) {
        var arr = [], tag;
        for (tag in register) {
          if (re.test(tag)) arr.push(tag);
        }
        return arr;
      },
      add = function (Class, tag) {
        tag = tag.toLowerCase();
        if (!(tag in register)) {
          register[Class] = (register[Class] || []).concat(tag);
          register[tag] = (register[tag.toUpperCase()] = Class);
        }
      },
      register = (Object.create || Object)(null),
      htmlClass = {},
      i, section, tags, Class
    ;
    for (section in info) {
      for (Class in info[section]) {
        tags = info[section][Class];
        register[Class] = tags;
        for (i = 0; i < tags.length; i++) {
          register[tags[i].toLowerCase()] =
          register[tags[i].toUpperCase()] = Class;
        }
      }
    }
    htmlClass.get = function get(tagOrClass) {
      return typeof tagOrClass === 'string' ?
        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :
        filterBy(tagOrClass);
    };
    htmlClass.set = function set(tag, Class) {
      return (catchClass.test(tag) ?
        add(tag, Class) :
        add(Class, tag)
      ), htmlClass;
    };
    return htmlClass;
  }({
    "collections": {
      "HTMLAllCollection": [
        "all"
      ],
      "HTMLCollection": [
        "forms"
      ],
      "HTMLFormControlsCollection": [
        "elements"
      ],
      "HTMLOptionsCollection": [
        "options"
      ]
    },
    "elements": {
      "Element": [
        "element"
      ],
      "HTMLAnchorElement": [
        "a"
      ],
      "HTMLAppletElement": [
        "applet"
      ],
      "HTMLAreaElement": [
        "area"
      ],
      "HTMLAttachmentElement": [
        "attachment"
      ],
      "HTMLAudioElement": [
        "audio"
      ],
      "HTMLBRElement": [
        "br"
      ],
      "HTMLBaseElement": [
        "base"
      ],
      "HTMLBodyElement": [
        "body"
      ],
      "HTMLButtonElement": [
        "button"
      ],
      "HTMLCanvasElement": [
        "canvas"
      ],
      "HTMLContentElement": [
        "content"
      ],
      "HTMLDListElement": [
        "dl"
      ],
      "HTMLDataElement": [
        "data"
      ],
      "HTMLDataListElement": [
        "datalist"
      ],
      "HTMLDetailsElement": [
        "details"
      ],
      "HTMLDialogElement": [
        "dialog"
      ],
      "HTMLDirectoryElement": [
        "dir"
      ],
      "HTMLDivElement": [
        "div"
      ],
      "HTMLDocument": [
        "document"
      ],
      "HTMLElement": [
        "element",
        "abbr",
        "address",
        "article",
        "aside",
        "b",
        "bdi",
        "bdo",
        "cite",
        "code",
        "command",
        "dd",
        "dfn",
        "dt",
        "em",
        "figcaption",
        "figure",
        "footer",
        "header",
        "i",
        "kbd",
        "mark",
        "nav",
        "noscript",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "section",
        "small",
        "strong",
        "sub",
        "summary",
        "sup",
        "u",
        "var",
        "wbr"
      ],
      "HTMLEmbedElement": [
        "embed"
      ],
      "HTMLFieldSetElement": [
        "fieldset"
      ],
      "HTMLFontElement": [
        "font"
      ],
      "HTMLFormElement": [
        "form"
      ],
      "HTMLFrameElement": [
        "frame"
      ],
      "HTMLFrameSetElement": [
        "frameset"
      ],
      "HTMLHRElement": [
        "hr"
      ],
      "HTMLHeadElement": [
        "head"
      ],
      "HTMLHeadingElement": [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6"
      ],
      "HTMLHtmlElement": [
        "html"
      ],
      "HTMLIFrameElement": [
        "iframe"
      ],
      "HTMLImageElement": [
        "img"
      ],
      "HTMLInputElement": [
        "input"
      ],
      "HTMLKeygenElement": [
        "keygen"
      ],
      "HTMLLIElement": [
        "li"
      ],
      "HTMLLabelElement": [
        "label"
      ],
      "HTMLLegendElement": [
        "legend"
      ],
      "HTMLLinkElement": [
        "link"
      ],
      "HTMLMapElement": [
        "map"
      ],
      "HTMLMarqueeElement": [
        "marquee"
      ],
      "HTMLMediaElement": [
        "media"
      ],
      "HTMLMenuElement": [
        "menu"
      ],
      "HTMLMenuItemElement": [
        "menuitem"
      ],
      "HTMLMetaElement": [
        "meta"
      ],
      "HTMLMeterElement": [
        "meter"
      ],
      "HTMLModElement": [
        "del",
        "ins"
      ],
      "HTMLOListElement": [
        "ol"
      ],
      "HTMLObjectElement": [
        "object"
      ],
      "HTMLOptGroupElement": [
        "optgroup"
      ],
      "HTMLOptionElement": [
        "option"
      ],
      "HTMLOutputElement": [
        "output"
      ],
      "HTMLParagraphElement": [
        "p"
      ],
      "HTMLParamElement": [
        "param"
      ],
      "HTMLPictureElement": [
        "picture"
      ],
      "HTMLPreElement": [
        "pre"
      ],
      "HTMLProgressElement": [
        "progress"
      ],
      "HTMLQuoteElement": [
        "blockquote",
        "q",
        "quote"
      ],
      "HTMLScriptElement": [
        "script"
      ],
      "HTMLSelectElement": [
        "select"
      ],
      "HTMLShadowElement": [
        "shadow"
      ],
      "HTMLSlotElement": [
        "slot"
      ],
      "HTMLSourceElement": [
        "source"
      ],
      "HTMLSpanElement": [
        "span"
      ],
      "HTMLStyleElement": [
        "style"
      ],
      "HTMLTableCaptionElement": [
        "caption"
      ],
      "HTMLTableCellElement": [
        "td",
        "th"
      ],
      "HTMLTableColElement": [
        "col",
        "colgroup"
      ],
      "HTMLTableElement": [
        "table"
      ],
      "HTMLTableRowElement": [
        "tr"
      ],
      "HTMLTableSectionElement": [
        "thead",
        "tbody",
        "tfoot"
      ],
      "HTMLTemplateElement": [
        "template"
      ],
      "HTMLTextAreaElement": [
        "textarea"
      ],
      "HTMLTimeElement": [
        "time"
      ],
      "HTMLTitleElement": [
        "title"
      ],
      "HTMLTrackElement": [
        "track"
      ],
      "HTMLUListElement": [
        "ul"
      ],
      "HTMLUnknownElement": [
        "unknown",
        "vhgroupv",
        "vkeygen"
      ],
      "HTMLVideoElement": [
        "video"
      ]
    },
    "nodes": {
      "Attr": [
        "node"
      ],
      "Audio": [
        "audio"
      ],
      "CDATASection": [
        "node"
      ],
      "CharacterData": [
        "node"
      ],
      "Comment": [
        "#comment"
      ],
      "Document": [
        "#document"
      ],
      "DocumentFragment": [
        "#document-fragment"
      ],
      "DocumentType": [
        "node"
      ],
      "HTMLDocument": [
        "#document"
      ],
      "Image": [
        "img"
      ],
      "Option": [
        "option"
      ],
      "ProcessingInstruction": [
        "node"
      ],
      "ShadowRoot": [
        "#shadow-root"
      ],
      "Text": [
        "#text"
      ],
      "XMLDocument": [
        "xml"
      ]
    }
  }));
  
  
    
  // passed at runtime, configurable
  // via nodejs module
  if (!polyfill) polyfill = 'auto';
  
  var
    // V0 polyfill entry
    REGISTER_ELEMENT = 'registerElement',
  
    // IE < 11 only + old WebKit for attributes + feature detection
    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),
  
    // shortcuts and costants
    ADD_EVENT_LISTENER = 'addEventListener',
    ATTACHED = 'attached',
    CALLBACK = 'Callback',
    DETACHED = 'detached',
    EXTENDS = 'extends',
  
    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,
    ATTACHED_CALLBACK = ATTACHED + CALLBACK,
    CONNECTED_CALLBACK = 'connected' + CALLBACK,
    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,
    CREATED_CALLBACK = 'created' + CALLBACK,
    DETACHED_CALLBACK = DETACHED + CALLBACK,
  
    ADDITION = 'ADDITION',
    MODIFICATION = 'MODIFICATION',
    REMOVAL = 'REMOVAL',
  
    DOM_ATTR_MODIFIED = 'DOMAttrModified',
    DOM_CONTENT_LOADED = 'DOMContentLoaded',
    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',
  
    PREFIX_TAG = '<',
    PREFIX_IS = '=',
  
    // valid and invalid node names
    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,
    invalidNames = [
      'ANNOTATION-XML',
      'COLOR-PROFILE',
      'FONT-FACE',
      'FONT-FACE-SRC',
      'FONT-FACE-URI',
      'FONT-FACE-FORMAT',
      'FONT-FACE-NAME',
      'MISSING-GLYPH'
    ],
  
    // registered types and their prototypes
    types = [],
    protos = [],
  
    // to query subnodes
    query = '',
  
    // html shortcut used to feature detect
    documentElement = document.documentElement,
  
    // ES5 inline helpers || basic patches
    indexOf = types.indexOf || function (v) {
      for(var i = this.length; i-- && this[i] !== v;){}
      return i;
    },
  
    // other helpers / shortcuts
    OP = Object.prototype,
    hOP = OP.hasOwnProperty,
    iPO = OP.isPrototypeOf,
  
    defineProperty = Object.defineProperty,
    empty = [],
    gOPD = Object.getOwnPropertyDescriptor,
    gOPN = Object.getOwnPropertyNames,
    gPO = Object.getPrototypeOf,
    sPO = Object.setPrototypeOf,
  
    // jshint proto: true
    hasProto = !!Object.__proto__,
  
    // V1 helpers
    fixGetClass = false,
    DRECEV1 = '__dreCEv1',
    customElements = window.customElements,
    usableCustomElements = polyfill !== 'force' && !!(
      customElements &&
      customElements.define &&
      customElements.get &&
      customElements.whenDefined
    ),
    Dict = Object.create || Object,
    Map = window.Map || function Map() {
      var K = [], V = [], i;
      return {
        get: function (k) {
          return V[indexOf.call(K, k)];
        },
        set: function (k, v) {
          i = indexOf.call(K, k);
          if (i < 0) V[K.push(k) - 1] = v;
          else V[i] = v;
        }
      };
    },
    Promise = window.Promise || function (fn) {
      var
        notify = [],
        done = false,
        p = {
          'catch': function () {
            return p;
          },
          'then': function (cb) {
            notify.push(cb);
            if (done) setTimeout(resolve, 1);
            return p;
          }
        }
      ;
      function resolve(value) {
        done = true;
        while (notify.length) notify.shift()(value);
      }
      fn(resolve);
      return p;
    },
    justCreated = false,
    constructors = Dict(null),
    waitingList = Dict(null),
    nodeNames = new Map(),
    secondArgument = function (is) {
      return is.toLowerCase();
    },
  
    // used to create unique instances
    create = Object.create || function Bridge(proto) {
      // silly broken polyfill probably ever used but short enough to work
      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;
    },
  
    // will set the prototype if possible
    // or copy over all properties
    setPrototype = sPO || (
      hasProto ?
        function (o, p) {
          o.__proto__ = p;
          return o;
        } : (
      (gOPN && gOPD) ?
        (function(){
          function setProperties(o, p) {
            for (var
              key,
              names = gOPN(p),
              i = 0, length = names.length;
              i < length; i++
            ) {
              key = names[i];
              if (!hOP.call(o, key)) {
                defineProperty(o, key, gOPD(p, key));
              }
            }
          }
          return function (o, p) {
            do {
              setProperties(o, p);
            } while ((p = gPO(p)) && !iPO.call(p, o));
            return o;
          };
        }()) :
        function (o, p) {
          for (var key in p) {
            o[key] = p[key];
          }
          return o;
        }
    )),
  
    // DOM shortcuts and helpers, if any
  
    MutationObserver = window.MutationObserver ||
                       window.WebKitMutationObserver,
  
    HTMLElementPrototype = (
      window.HTMLElement ||
      window.Element ||
      window.Node
    ).prototype,
  
    IE8 = !iPO.call(HTMLElementPrototype, documentElement),
  
    safeProperty = IE8 ? function (o, k, d) {
      o[k] = d.value;
      return o;
    } : defineProperty,
  
    isValidNode = IE8 ?
      function (node) {
        return node.nodeType === 1;
      } :
      function (node) {
        return iPO.call(HTMLElementPrototype, node);
      },
  
    targets = IE8 && [],
  
    attachShadow = HTMLElementPrototype.attachShadow,
    cloneNode = HTMLElementPrototype.cloneNode,
    dispatchEvent = HTMLElementPrototype.dispatchEvent,
    getAttribute = HTMLElementPrototype.getAttribute,
    hasAttribute = HTMLElementPrototype.hasAttribute,
    removeAttribute = HTMLElementPrototype.removeAttribute,
    setAttribute = HTMLElementPrototype.setAttribute,
  
    // replaced later on
    createElement = document.createElement,
    patchedCreateElement = createElement,
  
    // shared observer for all attributes
    attributesObserver = MutationObserver && {
      attributes: true,
      characterData: true,
      attributeOldValue: true
    },
  
    // useful to detect only if there's no MutationObserver
    DOMAttrModified = MutationObserver || function(e) {
      doesNotSupportDOMAttrModified = false;
      documentElement.removeEventListener(
        DOM_ATTR_MODIFIED,
        DOMAttrModified
      );
    },
  
    // will both be used to make DOMNodeInserted asynchronous
    asapQueue,
    asapTimer = 0,
  
    // internal flags
    V0 = REGISTER_ELEMENT in document,
    setListener = true,
    justSetup = false,
    doesNotSupportDOMAttrModified = true,
    dropDomContentLoaded = true,
  
    // needed for the innerHTML helper
    notFromInnerHTMLHelper = true,
  
    // optionally defined later on
    onSubtreeModified,
    callDOMAttrModified,
    getAttributesMirror,
    observer,
    observe,
  
    // based on setting prototype capability
    // will check proto or the expando attribute
    // in order to setup the node once
    patchIfNotAlready,
    patch
  ;
  
  // only if needed
  if (!V0) {
  
    if (sPO || hasProto) {
        patchIfNotAlready = function (node, proto) {
          if (!iPO.call(proto, node)) {
            setupNode(node, proto);
          }
        };
        patch = setupNode;
    } else {
        patchIfNotAlready = function (node, proto) {
          if (!node[EXPANDO_UID]) {
            node[EXPANDO_UID] = Object(true);
            setupNode(node, proto);
          }
        };
        patch = patchIfNotAlready;
    }
  
    if (IE8) {
      doesNotSupportDOMAttrModified = false;
      (function (){
        var
          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),
          addEventListener = descriptor.value,
          patchedRemoveAttribute = function (name) {
            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});
            e.attrName = name;
            e.prevValue = getAttribute.call(this, name);
            e.newValue = null;
            e[REMOVAL] = e.attrChange = 2;
            removeAttribute.call(this, name);
            dispatchEvent.call(this, e);
          },
          patchedSetAttribute = function (name, value) {
            var
              had = hasAttribute.call(this, name),
              old = had && getAttribute.call(this, name),
              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})
            ;
            setAttribute.call(this, name, value);
            e.attrName = name;
            e.prevValue = had ? old : null;
            e.newValue = value;
            if (had) {
              e[MODIFICATION] = e.attrChange = 1;
            } else {
              e[ADDITION] = e.attrChange = 0;
            }
            dispatchEvent.call(this, e);
          },
          onPropertyChange = function (e) {
            // jshint eqnull:true
            var
              node = e.currentTarget,
              superSecret = node[EXPANDO_UID],
              propertyName = e.propertyName,
              event
            ;
            if (superSecret.hasOwnProperty(propertyName)) {
              superSecret = superSecret[propertyName];
              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});
              event.attrName = superSecret.name;
              event.prevValue = superSecret.value || null;
              event.newValue = (superSecret.value = node[propertyName] || null);
              if (event.prevValue == null) {
                event[ADDITION] = event.attrChange = 0;
              } else {
                event[MODIFICATION] = event.attrChange = 1;
              }
              dispatchEvent.call(node, event);
            }
          }
        ;
        descriptor.value = function (type, handler, capture) {
          if (
            type === DOM_ATTR_MODIFIED &&
            this[ATTRIBUTE_CHANGED_CALLBACK] &&
            this.setAttribute !== patchedSetAttribute
          ) {
            this[EXPANDO_UID] = {
              className: {
                name: 'class',
                value: this.className
              }
            };
            this.setAttribute = patchedSetAttribute;
            this.removeAttribute = patchedRemoveAttribute;
            addEventListener.call(this, 'propertychange', onPropertyChange);
          }
          addEventListener.call(this, type, handler, capture);
        };
        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);
      }());
    } else if (!MutationObserver) {
      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);
      documentElement.setAttribute(EXPANDO_UID, 1);
      documentElement.removeAttribute(EXPANDO_UID);
      if (doesNotSupportDOMAttrModified) {
        onSubtreeModified = function (e) {
          var
            node = this,
            oldAttributes,
            newAttributes,
            key
          ;
          if (node === e.target) {
            oldAttributes = node[EXPANDO_UID];
            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));
            for (key in newAttributes) {
              if (!(key in oldAttributes)) {
                // attribute was added
                return callDOMAttrModified(
                  0,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  ADDITION
                );
              } else if (newAttributes[key] !== oldAttributes[key]) {
                // attribute was changed
                return callDOMAttrModified(
                  1,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  MODIFICATION
                );
              }
            }
            // checking if it has been removed
            for (key in oldAttributes) {
              if (!(key in newAttributes)) {
                // attribute removed
                return callDOMAttrModified(
                  2,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  REMOVAL
                );
              }
            }
          }
        };
        callDOMAttrModified = function (
          attrChange,
          currentTarget,
          attrName,
          prevValue,
          newValue,
          action
        ) {
          var e = {
            attrChange: attrChange,
            currentTarget: currentTarget,
            attrName: attrName,
            prevValue: prevValue,
            newValue: newValue
          };
          e[action] = attrChange;
          onDOMAttrModified(e);
        };
        getAttributesMirror = function (node) {
          for (var
            attr, name,
            result = {},
            attributes = node.attributes,
            i = 0, length = attributes.length;
            i < length; i++
          ) {
            attr = attributes[i];
            name = attr.name;
            if (name !== 'setAttribute') {
              result[name] = attr.value;
            }
          }
          return result;
        };
      }
    }
  
    // set as enumerable, writable and configurable
    document[REGISTER_ELEMENT] = function registerElement(type, options) {
      upperType = type.toUpperCase();
      if (setListener) {
        // only first time document.registerElement is used
        // we need to set this listener
        // setting it by default might slow down for no reason
        setListener = false;
        if (MutationObserver) {
          observer = (function(attached, detached){
            function checkEmAll(list, callback) {
              for (var i = 0, length = list.length; i < length; callback(list[i++])){}
            }
            return new MutationObserver(function (records) {
              for (var
                current, node, newValue,
                i = 0, length = records.length; i < length; i++
              ) {
                current = records[i];
                if (current.type === 'childList') {
                  checkEmAll(current.addedNodes, attached);
                  checkEmAll(current.removedNodes, detached);
                } else {
                  node = current.target;
                  if (notFromInnerHTMLHelper &&
                      node[ATTRIBUTE_CHANGED_CALLBACK] &&
                      current.attributeName !== 'style') {
                    newValue = getAttribute.call(node, current.attributeName);
                    if (newValue !== current.oldValue) {
                      node[ATTRIBUTE_CHANGED_CALLBACK](
                        current.attributeName,
                        current.oldValue,
                        newValue
                      );
                    }
                  }
                }
              }
            });
          }(executeAction(ATTACHED), executeAction(DETACHED)));
          observe = function (node) {
            observer.observe(
              node,
              {
                childList: true,
                subtree: true
              }
            );
            return node;
          };
          observe(document);
          if (attachShadow) {
            HTMLElementPrototype.attachShadow = function () {
              return observe(attachShadow.apply(this, arguments));
            };
          }
        } else {
          asapQueue = [];
          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));
          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));
        }
  
        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);
        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);
  
        HTMLElementPrototype.cloneNode = function (deep) {
          var
            node = cloneNode.call(this, !!deep),
            i = getTypeIndex(node)
          ;
          if (-1 < i) patch(node, protos[i]);
          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));
          return node;
        };
      }
  
      if (justSetup) return (justSetup = false);
  
      if (-2 < (
        indexOf.call(types, PREFIX_IS + upperType) +
        indexOf.call(types, PREFIX_TAG + upperType)
      )) {
        throwTypeError(type);
      }
  
      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {
        throw new Error('The type ' + type + ' is invalid');
      }
  
      var
        constructor = function () {
          return extending ?
            document.createElement(nodeName, upperType) :
            document.createElement(nodeName);
        },
        opt = options || OP,
        extending = hOP.call(opt, EXTENDS),
        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,
        upperType,
        i
      ;
  
      if (extending && -1 < (
        indexOf.call(types, PREFIX_TAG + nodeName)
      )) {
        throwTypeError(nodeName);
      }
  
      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;
  
      query = query.concat(
        query.length ? ',' : '',
        extending ? nodeName + '[is="' + type.toLowerCase() + '"]' : nodeName
      );
  
      constructor.prototype = (
        protos[i] = hOP.call(opt, 'prototype') ?
          opt.prototype :
          create(HTMLElementPrototype)
      );
  
      if (query.length) loopAndVerify(
        document.querySelectorAll(query),
        ATTACHED
      );
  
      return constructor;
    };
  
    document.createElement = (patchedCreateElement = function (localName, typeExtension) {
      var
        is = getIs(typeExtension),
        node = is ?
          createElement.call(document, localName, secondArgument(is)) :
          createElement.call(document, localName),
        name = '' + localName,
        i = indexOf.call(
          types,
          (is ? PREFIX_IS : PREFIX_TAG) +
          (is || name).toUpperCase()
        ),
        setup = -1 < i
      ;
      if (is) {
        node.setAttribute('is', is = is.toLowerCase());
        if (setup) {
          setup = isInQSA(name.toUpperCase(), is);
        }
      }
      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;
      if (setup) patch(node, protos[i]);
      return node;
    });
  
  }
  
  function ASAP() {
    var queue = asapQueue.splice(0, asapQueue.length);
    asapTimer = 0;
    while (queue.length) {
      queue.shift().call(
        null, queue.shift()
      );
    }
  }
  
  function loopAndVerify(list, action) {
    for (var i = 0, length = list.length; i < length; i++) {
      verifyAndSetupAndAction(list[i], action);
    }
  }
  
  function loopAndSetup(list) {
    for (var i = 0, length = list.length, node; i < length; i++) {
      node = list[i];
      patch(node, protos[getTypeIndex(node)]);
    }
  }
  
  function executeAction(action) {
    return function (node) {
      if (isValidNode(node)) {
        verifyAndSetupAndAction(node, action);
        if (query.length) loopAndVerify(
          node.querySelectorAll(query),
          action
        );
      }
    };
  }
  
  function getTypeIndex(target) {
    var
      is = getAttribute.call(target, 'is'),
      nodeName = target.nodeName.toUpperCase(),
      i = indexOf.call(
        types,
        is ?
            PREFIX_IS + is.toUpperCase() :
            PREFIX_TAG + nodeName
      )
    ;
    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;
  }
  
  function isInQSA(name, type) {
    return -1 < query.indexOf(name + '[is="' + type + '"]');
  }
  
  function onDOMAttrModified(e) {
    var
      node = e.currentTarget,
      attrChange = e.attrChange,
      attrName = e.attrName,
      target = e.target,
      addition = e[ADDITION] || 2,
      removal = e[REMOVAL] || 3
    ;
    if (notFromInnerHTMLHelper &&
        (!target || target === node) &&
        node[ATTRIBUTE_CHANGED_CALLBACK] &&
        attrName !== 'style' && (
          e.prevValue !== e.newValue ||
          // IE9, IE10, and Opera 12 gotcha
          e.newValue === '' && (
            attrChange === addition ||
            attrChange === removal
          )
    )) {
      node[ATTRIBUTE_CHANGED_CALLBACK](
        attrName,
        attrChange === addition ? null : e.prevValue,
        attrChange === removal ? null : e.newValue
      );
    }
  }
  
  function onDOMNode(action) {
    var executor = executeAction(action);
    return function (e) {
      asapQueue.push(executor, e.target);
      if (asapTimer) clearTimeout(asapTimer);
      asapTimer = setTimeout(ASAP, 1);
    };
  }
  
  function onReadyStateChange(e) {
    if (dropDomContentLoaded) {
      dropDomContentLoaded = false;
      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);
    }
    if (query.length) loopAndVerify(
      (e.target || document).querySelectorAll(query),
      e.detail === DETACHED ? DETACHED : ATTACHED
    );
    if (IE8) purge();
  }
  
  function patchedSetAttribute(name, value) {
    // jshint validthis:true
    var self = this;
    setAttribute.call(self, name, value);
    onSubtreeModified.call(self, {target: self});
  }
  
  function setupNode(node, proto) {
    setPrototype(node, proto);
    if (observer) {
      observer.observe(node, attributesObserver);
    } else {
      if (doesNotSupportDOMAttrModified) {
        node.setAttribute = patchedSetAttribute;
        node[EXPANDO_UID] = getAttributesMirror(node);
        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);
      }
      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);
    }
    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {
      node.created = true;
      node[CREATED_CALLBACK]();
      node.created = false;
    }
  }
  
  function purge() {
    for (var
      node,
      i = 0,
      length = targets.length;
      i < length; i++
    ) {
      node = targets[i];
      if (!documentElement.contains(node)) {
        length--;
        targets.splice(i--, 1);
        verifyAndSetupAndAction(node, DETACHED);
      }
    }
  }
  
  function throwTypeError(type) {
    throw new Error('A ' + type + ' type is already registered');
  }
  
  function verifyAndSetupAndAction(node, action) {
    var
      fn,
      i = getTypeIndex(node)
    ;
    if (-1 < i) {
      patchIfNotAlready(node, protos[i]);
      i = 0;
      if (action === ATTACHED && !node[ATTACHED]) {
        node[DETACHED] = false;
        node[ATTACHED] = true;
        i = 1;
        if (IE8 && indexOf.call(targets, node) < 0) {
          targets.push(node);
        }
      } else if (action === DETACHED && !node[DETACHED]) {
        node[ATTACHED] = false;
        node[DETACHED] = true;
        i = 1;
      }
      if (i && (fn = node[action + CALLBACK])) fn.call(node);
    }
  }
  
  
  
  // V1 in da House!
  function CustomElementRegistry() {}
  
  CustomElementRegistry.prototype = {
    constructor: CustomElementRegistry,
    // a workaround for the stubborn WebKit
    define: usableCustomElements ?
      function (name, Class, options) {
        if (options) {
          CERDefine(name, Class, options);
        } else {
          var NAME = name.toUpperCase();
          constructors[NAME] = {
            constructor: Class,
            create: [NAME]
          };
          nodeNames.set(Class, NAME);
          customElements.define(name, Class);
        }
      } :
      CERDefine,
    get: usableCustomElements ?
      function (name) {
        return customElements.get(name) || get(name);
      } :
      get,
    whenDefined: usableCustomElements ?
      function (name) {
        return Promise.race([
          customElements.whenDefined(name),
          whenDefined(name)
        ]);
      } :
      whenDefined
  };
  
  function CERDefine(name, Class, options) {
    var
      is = options && options[EXTENDS] || '',
      CProto = Class.prototype,
      proto = create(CProto),
      attributes = Class.observedAttributes || empty,
      definition = {prototype: proto}
    ;
    // TODO: is this needed at all since it's inherited?
    // defineProperty(proto, 'constructor', {value: Class});
    safeProperty(proto, CREATED_CALLBACK, {
        value: function () {
          if (justCreated) justCreated = false;
          else if (!this[DRECEV1]) {
            this[DRECEV1] = true;
            new Class(this);
            if (CProto[CREATED_CALLBACK])
              CProto[CREATED_CALLBACK].call(this);
            var info = constructors[nodeNames.get(Class)];
            if (!usableCustomElements || info.create.length > 1) {
              notifyAttributes(this);
            }
          }
      }
    });
    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {
      value: function (name) {
        if (-1 < indexOf.call(attributes, name))
          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);
      }
    });
    if (CProto[CONNECTED_CALLBACK]) {
      safeProperty(proto, ATTACHED_CALLBACK, {
        value: CProto[CONNECTED_CALLBACK]
      });
    }
    if (CProto[DISCONNECTED_CALLBACK]) {
      safeProperty(proto, DETACHED_CALLBACK, {
        value: CProto[DISCONNECTED_CALLBACK]
      });
    }
    if (is) definition[EXTENDS] = is;
    name = name.toUpperCase();
    constructors[name] = {
      constructor: Class,
      create: is ? [is, secondArgument(name)] : [name]
    };
    nodeNames.set(Class, name);
    document[REGISTER_ELEMENT](name.toLowerCase(), definition);
    whenDefined(name);
    waitingList[name].r();
  }
  
  function get(name) {
    var info = constructors[name.toUpperCase()];
    return info && info.constructor;
  }
  
  function getIs(options) {
    return typeof options === 'string' ?
        options : (options && options.is || '');
  }
  
  function notifyAttributes(self) {
    var
      callback = self[ATTRIBUTE_CHANGED_CALLBACK],
      attributes = callback ? self.attributes : empty,
      i = attributes.length,
      attribute
    ;
    while (i--) {
      attribute =  attributes[i]; // || attributes.item(i);
      callback.call(
        self,
        attribute.name || attribute.nodeName,
        null,
        attribute.value || attribute.nodeValue
      );
    }
  }
  
  function whenDefined(name) {
    name = name.toUpperCase();
    if (!(name in waitingList)) {
      waitingList[name] = {};
      waitingList[name].p = new Promise(function (resolve) {
        waitingList[name].r = resolve;
      });
    }
    return waitingList[name].p;
  }
  
  function polyfillV1() {
    if (customElements) delete window.customElements;
    defineProperty(window, 'customElements', {
      configurable: true,
      value: new CustomElementRegistry()
    });
    defineProperty(window, 'CustomElementRegistry', {
      configurable: true,
      value: CustomElementRegistry
    });
    for (var
      patchClass = function (name) {
        var Class = window[name];
        if (Class) {
          window[name] = function CustomElementsV1(self) {
            var info, isNative;
            if (!self) self = this;
            if (!self[DRECEV1]) {
              justCreated = true;
              info = constructors[nodeNames.get(self.constructor)];
              isNative = usableCustomElements && info.create.length === 1;
              self = isNative ?
                Reflect.construct(Class, empty, info.constructor) :
                document.createElement.apply(document, info.create);
              self[DRECEV1] = true;
              justCreated = false;
              if (!isNative) notifyAttributes(self);
            }
            return self;
          };
          window[name].prototype = Class.prototype;
          try {
            Class.prototype.constructor = window[name];
          } catch(WebKit) {
            fixGetClass = true;
            defineProperty(Class, DRECEV1, {value: window[name]});
          }
        }
      },
      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),
      i = Classes.length;
      i--;
      patchClass(Classes[i])
    ) {}
    (document.createElement = function (name, options) {
      var is = getIs(options);
      return is ?
        patchedCreateElement.call(this, name, secondArgument(is)) :
        patchedCreateElement.call(this, name);
    });
    if (!V0) {
      justSetup = true;
      document[REGISTER_ELEMENT]('');
    }
  }
  
  // if customElements is not there at all
  if (!customElements || polyfill === 'force') polyfillV1();
  else {
    // if available test extends work as expected
    try {
      (function (DRE, options, name) {
        options[EXTENDS] = 'a';
        DRE.prototype = create(HTMLAnchorElement.prototype);
        DRE.prototype.constructor = DRE;
        window.customElements.define(name, DRE, options);
        if (
          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||
          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)
        ) {
          throw options;
        }
      }(
        function DRE() {
          return Reflect.construct(HTMLAnchorElement, [], DRE);
        },
        {},
        'document-register-element-a'
      ));
    } catch(o_O) {
      // or force the polyfill if not
      // and keep internal original reference
      polyfillV1();
    }
  }
  
  try {
    createElement.call(document, 'a', 'a');
  } catch(FireFox) {
    secondArgument = function (is) {
      return {is: is.toLowerCase()};
    };
  }
  
}

exports.installCustomElements = installCustomElements;


},{}],6:[function(require,module,exports){
'use strict';

/**
 * Constructs a ES6/Promises A+ Promise instance.
 *
 * @constructor
 * @param {function(function(*=), function (*=))} resolver
 */
function Promise(resolver) {
  if (!(this instanceof Promise)) {
    throw new TypeError('Constructor Promise requires `new`');
  }
  if (!isFunction(resolver)) {
    throw new TypeError('Must pass resolver function');
  }

  /**
   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}
   * @private
   */
  this._state = PendingPromise;

  /**
   * @type {*}
   * @private
   */
  this._value = [];

  /**
   * @type {boolean}
   * @private
   */
  this._isChainEnd = true;

  doResolve(
    this,
    adopter(this, FulfilledPromise),
    adopter(this, RejectedPromise),
    { then: resolver }
  );
}

/****************************
  Public Instance Methods
 ****************************/

/**
 * Creates a new promise instance that will receive the result of this promise
 * as inputs to the onFulfilled or onRejected callbacks.
 *
 * @param {function(*)} onFulfilled
 * @param {function(*)} onRejected
 */
Promise.prototype.then = function(onFulfilled, onRejected) {
  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;
  onRejected = isFunction(onRejected) ? onRejected : void 0;

  if (onFulfilled || onRejected) {
    this._isChainEnd = false;
  }

  return this._state(
    this._value,
    onFulfilled,
    onRejected
  );
};

/**
 * Creates a new promise that will handle the rejected state of this promise.
 *
 * @param {function(*)} onRejected
 * @returns {!Promise}
 */
Promise.prototype.catch = function(onRejected) {
  return this.then(void 0, onRejected);
};

/****************************
  Public Static Methods
 ****************************/

/**
 * Creates a fulfilled Promise of value. If value is itself a then-able,
 * resolves with the then-able's value.
 *
 * @this {!Promise}
 * @param {*=} value
 * @returns {!Promise}
 */
Promise.resolve = function(value) {
  var Constructor = this;
  var promise;

  if (isObject(value) && value instanceof this) {
    promise = value;
  } else {
    promise = new Constructor(function(resolve) {
      resolve(value);
    });
  }

  return /** @type {!Promise} */(promise);
};

/**
 * Creates a rejected Promise of reason.
 *
 * @this {!Promise}
 * @param {*=} reason
 * @returns {!Promise}
 */
Promise.reject = function(reason) {
  var Constructor = this;
  var promise = new Constructor(function(_, reject) {
    reject(reason);
  });

  return /** @type {!Promise} */(promise);
};

/**
 * Creates a Promise that will resolve with an array of the values of the
 * passed in promises. If any promise rejects, the returned promise will
 * reject.
 *
 * @this {!Promise}
 * @param {!Array<Promise|*>} promises
 * @returns {!Promise}
 */
Promise.all = function(promises) {
  var Constructor = this;
  var promise = new Constructor(function(resolve, reject) {
    var length = promises.length;
    var values = new Array(length);

    if (length === 0) {
      return resolve(values);
    }

    each(promises, function(promise, index) {
      Constructor.resolve(promise).then(function(value) {
        values[index] = value;
        if (--length === 0) {
          resolve(values);
        }
      }, reject);
    });
  });

  return /** @type {!Promise} */(promise);
};

/**
 * Creates a Promise that will resolve or reject based on the first
 * resolved or rejected promise.
 *
 * @this {!Promise}
 * @param {!Array<Promise|*>} promises
 * @returns {!Promise}
 */
Promise.race = function(promises) {
  var Constructor = this;
  var promise = new Constructor(function(resolve, reject) {
    for (var i = 0; i < promises.length; i++) {
      Constructor.resolve(promises[i]).then(resolve, reject);
    }
  });

  return /** @type {!Promise} */(promise);
};

var onPossiblyUnhandledRejection = function(reason, promise) {
  throw reason;
};

/**
 * An internal use static function.
 */
Promise._overrideUnhandledExceptionHandler = function(handler) {
  onPossiblyUnhandledRejection = handler;
};

/****************************
  Private functions
 ****************************/

/**
 * The Fulfilled Promise state. Calls onFulfilled with the resolved value of
 * this promise, creating a new promise.
 *
 * If there is no onFulfilled, returns the current promise to avoid an promise
 * instance.
 *
 * @this {!Promise} The current promise
 * @param {*=} value The current promise's resolved value.
 * @param {function(*=)=} onFulfilled
 * @param {function(*=)=} unused
 * @param {Deferred} deferred A deferred object that holds a promise and its
 *     resolve and reject functions. It IS NOT passed when called from
 *     Promise#then to save an object instance (since we may return the current
 *     promise). It IS passed in when adopting the Fulfilled state from the
 *     Pending state.
 * @returns {!Promise}
 */
function FulfilledPromise(value, onFulfilled, unused, deferred) {
  if (!onFulfilled) {
    deferredAdopt(deferred, FulfilledPromise, value);
    return this;
  }
  if (!deferred) {
    deferred = new Deferred(this.constructor);
  }
  defer(tryCatchDeferred(deferred, onFulfilled, value));
  return deferred.promise;
}

/**
 * The Rejected Promise state. Calls onRejected with the resolved value of
 * this promise, creating a new promise.
 *
 * If there is no onRejected, returns the current promise to avoid an promise
 * instance.
 *
 * @this {!Promise} The current promise
 * @param {*=} reason The current promise's rejection reason.
 * @param {function(*=)=} unused
 * @param {function(*=)=} onRejected
 * @param {Deferred} deferred A deferred object that holds a promise and its
 *     resolve and reject functions. It IS NOT passed when called from
 *     Promise#then to save an object instance (since we may return the current
 *     promise). It IS passed in when adopting the Rejected state from the
 *     Pending state.
 * @returns {!Promise}
 */
function RejectedPromise(reason, unused, onRejected, deferred) {
  if (!onRejected) {
    deferredAdopt(deferred, RejectedPromise, reason);
    return this;
  }
  if (!deferred) {
    deferred = new Deferred(this.constructor);
  }
  defer(tryCatchDeferred(deferred, onRejected, reason));
  return deferred.promise;
}

/**
 * The Pending Promise state. Eventually calls onFulfilled once the promise has
 * resolved, or onRejected once the promise rejects.
 *
 * If there is no onFulfilled and no onRejected, returns the current promise to
 * avoid an promise instance.
 *
 * @this {!Promise} The current promise
 * @param {*=} queue The current promise's pending promises queue.
 * @param {function(*=)=} onFulfilled
 * @param {function(*=)=} onRejected
 * @param {Deferred} deferred A deferred object that holds a promise and its
 *     resolve and reject functions. It IS NOT passed when called from
 *     Promise#then to save an object instance (since we may return the current
 *     promise). It IS passed in when adopting the Pending state from the
 *     Pending state of another promise.
 * @returns {!Promise}
 */
function PendingPromise(queue, onFulfilled, onRejected, deferred) {
  if (!deferred) {
    if (!onFulfilled && !onRejected) { return this; }
    deferred = new Deferred(this.constructor);
  }
  queue.push({
    deferred: deferred,
    onFulfilled: onFulfilled || deferred.resolve,
    onRejected: onRejected || deferred.reject
  });
  return deferred.promise;
}

/**
 * Constructs a deferred instance that holds a promise and its resolve and
 * reject functions.
 *
 * @constructor
 */
function Deferred(Promise) {
  var deferred = this;
  /** @type {!Promise} */
  this.promise = new Promise(function(resolve, reject) {
    /** @type {function(*=)} */
    deferred.resolve = resolve;

    /** @type {function(*=)} */
    deferred.reject = reject;
  });
  return deferred;
}

/**
 * Transitions the state of promise to another state. This is only ever called
 * on with a promise that is currently in the Pending state.
 *
 * @param {!Promise} promise
 * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
 * @param {*=} value
 */
function adopt(promise, state, value, adoptee) {
  var queue = promise._value;
  promise._state = state;
  promise._value = value;

  if (adoptee && state === PendingPromise) {
    adoptee._state(value, void 0, void 0, {
      promise: promise,
      resolve: void 0,
      reject: void 0
    });
  }

  for (var i = 0; i < queue.length; i++) {
    var next = queue[i];
    promise._state(
      value,
      next.onFulfilled,
      next.onRejected,
      next.deferred
    );
  }
  queue.length = 0;

  // Determine if this rejected promise will be "handled".
  if (state === RejectedPromise && promise._isChainEnd) {
    setTimeout(function() {
      if (promise._isChainEnd) {
        onPossiblyUnhandledRejection(value, promise);
      }
    }, 0);
  }
}

/**
 * A partial application of adopt.
 *
 * @param {!Promise} promise
 * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
 * @returns {function(*=)}
 */
function adopter(promise, state) {
  return function(value) {
    adopt(promise, state, value);
  };
}

/**
 * Updates a deferred promises state. Necessary for updating an adopting
 * promise's state when the adoptee resolves.
 *
 * @param {?Deferred} deferred
 * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state
 * @param {*=} value
 */
function deferredAdopt(deferred, state, value) {
  if (deferred) {
    var promise = deferred.promise;
    promise._state = state;
    promise._value = value;
  }
}

/**
 * A no-op function to prevent double resolving.
 */
function noop() {}

/**
 * Tests if fn is a Function
 *
 * @param {*} fn
 * @returns {boolean}
 */
function isFunction(fn) {
  return typeof fn === 'function';
}

/**
 * Tests if fn is an Object
 *
 * @param {*} obj
 * @returns {boolean}
 */
function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Iterates over each element of an array, calling the iterator with the
 * element and its index.
 *
 * @param {!Array} collection
 * @param {function(*=,number)} iterator
 */
function each(collection, iterator) {
  for (var i = 0; i < collection.length; i++) {
    iterator(collection[i], i);
  }
}

/**
 * Creates a function that will attempt to resolve the deferred with the return
 * of fn. If any error is raised, rejects instead.
 *
 * @param {!Deferred} deferred
 * @param {function(*=)} fn
 * @param {*} arg
 * @returns {function()}
 */
function tryCatchDeferred(deferred, fn, arg) {
  var promise = deferred.promise;
  var resolve = deferred.resolve;
  var reject = deferred.reject;
  return function() {
    try {
      var result = fn(arg);
      doResolve(promise, resolve, reject, result, result);
    } catch (e) {
      reject(e);
    }
  };
}

/**
 * Queues and executes multiple deferred functions on another run loop.
 */
var defer = (function() {
  /**
   * Defers fn to another run loop.
   */
  var scheduleFlush;
  if (typeof window !== 'undefined' && window.postMessage) {
    window.addEventListener('message', flush);
    scheduleFlush = function() {
      window.postMessage('macro-task', '*');
    };
  } else {
    scheduleFlush = function() {
      setTimeout(flush, 0);
    };
  }

  var queue = new Array(16);
  var length = 0;

  function flush() {
    for (var i = 0; i < length; i++) {
      var fn = queue[i];
      queue[i] = null;
      fn();
    }
    length = 0;
  }

  /**
   * @param {function()} fn
   */
  function defer(fn) {
    if (length === 0) { scheduleFlush(); }
    queue[length++] = fn;
  }

  return defer;
})();

/**
 * The Promise resolution procedure.
 * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
 *
 * @param {!Promise} promise
 * @param {function(*=)} resolve
 * @param {function(*=)} reject
 * @param {*} value
 * @param {*=} context
 */
function doResolve(promise, resolve, reject, value, context) {
  var _reject = reject;
  var then;
  var _resolve;
  try {
    if (value === promise) {
      throw new TypeError('Cannot fulfill promise with itself');
    }
    var isObj = isObject(value);
    if (isObj && value instanceof promise.constructor) {
      adopt(promise, value._state, value._value, value);
    } else if (isObj && (then = value.then) && isFunction(then)) {
      _resolve = function(value) {
        _resolve = _reject = noop;
        doResolve(promise, resolve, reject, value, value);
      };
      _reject = function(reason) {
        _resolve = _reject = noop;
        reject(reason);
      };
      then.call(
        context,
        function(value) { _resolve(value); },
        function(reason) { _reject(reason); }
      );
    } else {
      resolve(value);
    }
  } catch (e) {
    _reject(e);
  }
}

module.exports = Promise;

},{}],7:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IframeTransportEvent = exports.MessageType = exports.CONSTANTS = undefined;
exports.listen = listen;
exports.serializeMessage = serializeMessage;
exports.deserializeMessage = deserializeMessage;
exports.isAmpMessage = isAmpMessage;

var _log = require('./log');

var _object = require('./utils/object');

var _eventHelperListen = require('./event-helper-listen');

var _json = require('./json');

/** @const */
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var AMP_MESSAGE_PREFIX = 'amp-';
var CONSTANTS = exports.CONSTANTS = {
  responseTypeSuffix: '-result',
  messageIdFieldName: 'messageId',
  payloadFieldName: 'payload',
  contentFieldName: 'content'
};

/** @enum {string} */
var MessageType = exports.MessageType = {
  // For amp-ad
  SEND_EMBED_STATE: 'send-embed-state',
  EMBED_STATE: 'embed-state',
  SEND_EMBED_CONTEXT: 'send-embed-context',
  EMBED_CONTEXT: 'embed-context',
  SEND_INTERSECTIONS: 'send-intersections',
  INTERSECTION: 'intersection',
  EMBED_SIZE: 'embed-size',
  EMBED_SIZE_CHANGED: 'embed-size-changed',
  EMBED_SIZE_DENIED: 'embed-size-denied',
  NO_CONTENT: 'no-content',
  GET_HTML: 'get-html',
  GET_CONSENT_STATE: 'get-consent-state',

  // For the frame to be placed in full overlay mode for lightboxes
  FULL_OVERLAY_FRAME: 'full-overlay-frame',
  FULL_OVERLAY_FRAME_RESPONSE: 'full-overlay-frame-response',
  CANCEL_FULL_OVERLAY_FRAME: 'cancel-full-overlay-frame',
  CANCEL_FULL_OVERLAY_FRAME_RESPONSE: 'cancel-full-overlay-frame-response',

  // For amp-inabox
  SEND_POSITIONS: 'send-positions',
  POSITION: 'position',

  // For amp-analytics' iframe-transport
  SEND_IFRAME_TRANSPORT_EVENTS: 'send-iframe-transport-events',
  IFRAME_TRANSPORT_EVENTS: 'iframe-transport-events',
  IFRAME_TRANSPORT_RESPONSE: 'iframe-transport-response',

  // For user-error-in-iframe
  USER_ERROR_IN_IFRAME: 'user-error-in-iframe'
};

/**
 * Listens for the specified event on the element.
 * @param {!EventTarget} element
 * @param {string} eventType
 * @param {function(!Event)} listener
 * @param {Object=} opt_evtListenerOpts
 * @return {!UnlistenDef}
 */
function listen(element, eventType, listener, opt_evtListenerOpts) {
  return (0, _eventHelperListen.internalListenImplementation)(element, eventType, listener, opt_evtListenerOpts);
}

/**
 * Serialize an AMP post message. Output looks like:
 * 'amp-011481323099490{"type":"position","sentinel":"12345","foo":"bar"}'
 * @param {string} type
 * @param {string} sentinel
 * @param {JsonObject=} data
 * @param {?string=} rtvVersion
 * @return {string}
 */
function serializeMessage(type, sentinel) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _object.dict)();
  var rtvVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  // TODO: consider wrap the data in a "data" field. { type, sentinal, data }
  var message = data;
  message['type'] = type;
  message['sentinel'] = sentinel;
  return AMP_MESSAGE_PREFIX + (rtvVersion || '') + JSON.stringify(message);
}

/**
 * Deserialize an AMP post message.
 * Returns null if it's not valid AMP message format.
 *
 * @param {*} message
 * @return {?JsonObject|undefined}
 */
function deserializeMessage(message) {
  if (!isAmpMessage(message)) {
    return null;
  }
  var startPos = message.indexOf('{');
  (0, _log.dev)().assert(startPos != -1, 'JSON missing in %s', message);
  try {
    return (0, _json.parseJson)(message.substr(startPos));
  } catch (e) {
    (0, _log.dev)().error('MESSAGING', 'Failed to parse message: ' + message, e);
    return null;
  }
}

/**
 *  Returns true if message looks like it is an AMP postMessage
 *  @param {*} message
 *  @return {boolean}
 */
function isAmpMessage(message) {
  return typeof message == 'string' && message.indexOf(AMP_MESSAGE_PREFIX) == 0 && message.indexOf('{') != -1;
}

/** @typedef {{creativeId: string, message: string}} */
var IframeTransportEvent = exports.IframeTransportEvent = void 0;
// An event, and the transport ID of the amp-analytics tags that
// generated it. For instance if the creative with transport
// ID 2 sends "hi", then an IframeTransportEvent would look like:
// { creativeId: "2", message: "hi" }
// If the creative with transport ID 2 sent that, and also sent "hello",
// and the creative with transport ID 3 sends "goodbye" then an *array* of 3
// AmpAnalyticsIframeTransportEvent would be sent to the 3p frame like so:
// [
//   { creativeId: "2", message: "hi" }, // An AmpAnalyticsIframeTransportEvent
//   { creativeId: "2", message: "hello" }, // Another
//   { creativeId: "3", message: "goodbye" } // And another
// ]

},{"./event-helper-listen":26,"./json":40,"./log":45,"./utils/object":123}],8:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Key string in an action arguments map for an unparsed object literal string.
 *
 * E.g. for the action in <p on="tap:AMP.setState({foo: 'bar'})",
 * then `args[RAW_OBJECT_ARGS_KEY]` is the string "{foo: 'bar'}".
 *
 * The action service delegates parsing of object literals to the corresponding
 * extension (in the example above, amp-bind).
 *
 * @see ./service/action-impl.ActionInfoDef
 * @const {string}
 */
var RAW_OBJECT_ARGS_KEY = exports.RAW_OBJECT_ARGS_KEY = '__AMP_OBJECT_STRING__';

/**
 * Trust level of an action.
 *
 * Corresponds to degree of user intent, i.e. events triggered with strong
 * user intent have high trust.
 *
 * @enum {number}
 */
var ActionTrust = exports.ActionTrust = {
  LOW: 1,
  HIGH: 100
};

},{}],9:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Common AMP events.
 * @enum {string}
 */
var AmpEvents = exports.AmpEvents = {
  BUILT: 'amp:built',
  DOM_UPDATE: 'amp:dom-update',
  VISIBILITY_CHANGE: 'amp:visibilitychange', // https://github.com/ampproject/amphtml/blob/master/ads/README.md#page-visibility
  // The following codes are only used for testing.
  // TODO(choumx): Move these to a separate enum so they can be DCE'd.
  ATTACHED: 'amp:attached',
  STUBBED: 'amp:stubbed',
  LOAD_START: 'amp:load:start',
  LOAD_END: 'amp:load:end',
  ERROR: 'amp:error'
};

},{}],10:[function(require,module,exports){
require('./polyfills');

var _services = require('./services');

var _runtime = require('./runtime');

var _css = require('../build/css');

var _fontStylesheetTimeout = require('./font-stylesheet-timeout');

var _ampdocImpl = require('./service/ampdoc-impl');

var _error = require('./error');

var _performanceImpl = require('./service/performance-impl');

var _platformImpl = require('./service/platform-impl');

var _pullToRefresh = require('./pull-to-refresh');

var _styleInstaller = require('./style-installer');

var _impression = require('./impression');

var _validatorIntegration = require('./validator-integration');

var _chunk = require('./chunk');

var _customElementRegistry = require('./service/custom-element-registry');

// Store the originalHash as early as possible. Trying to debug:
// https://github.com/ampproject/amphtml/issues/6070
// eslint-disable-line sort-imports-es6-autofix/sort-imports-es6

if (self.location) {
  self.location.originalHash = self.location.hash;
}

/** @type {!./service/ampdoc-impl.AmpDocService} */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The entry point for AMP Runtime (v0.js) when AMP Runtime = AMP Doc.
 */

// src/polyfills.js must be the first import.
var ampdocService = void 0;
// We must under all circumstances call makeBodyVisible.
// It is much better to have AMP tags not rendered than having
// a completely blank page.
try {
  // Should happen first.
  (0, _error.installErrorReporting)(self); // Also calls makeBodyVisible on errors.

  // Declare that this runtime will support a single root doc. Should happen
  // as early as possible.
  (0, _ampdocImpl.installDocService)(self, /* isSingleDoc */true);
  ampdocService = _services.Services.ampdocServiceFor(self);
} catch (e) {
  // In case of an error call this.
  (0, _styleInstaller.makeBodyVisible)(self.document);
  throw e;
}
(0, _chunk.startupChunk)(self.document, function initial() {
  /** @const {!./service/ampdoc-impl.AmpDoc} */
  var ampdoc = ampdocService.getAmpDoc(self.document);
  (0, _performanceImpl.installPerformanceService)(self);
  /** @const {!./service/performance-impl.Performance} */
  var perf = _services.Services.performanceFor(self);
  if (self.document.documentElement.hasAttribute('i-amphtml-no-boilerplate')) {
    perf.addEnabledExperiment('no-boilerplate');
  }
  (0, _platformImpl.installPlatformService)(self);
  (0, _fontStylesheetTimeout.fontStylesheetTimeout)(self);
  perf.tick('is');
  (0, _styleInstaller.installStylesForDoc)(ampdoc, _css.cssText, function () {
    (0, _chunk.startupChunk)(self.document, function services() {
      // Core services.
      (0, _runtime.installRuntimeServices)(self);
      (0, _runtime.installAmpdocServices)(ampdoc);
      // We need the core services (viewer/resources) to start instrumenting
      perf.coreServicesAvailable();
      (0, _impression.maybeTrackImpression)(self);
    });
    (0, _chunk.startupChunk)(self.document, function adoptWindow() {
      (0, _runtime.adopt)(self);
    });
    (0, _chunk.startupChunk)(self.document, function builtins() {
      // Builtins.
      (0, _runtime.installBuiltins)(self);
    });
    (0, _chunk.startupChunk)(self.document, function stub() {
      // Pre-stub already known elements.
      (0, _customElementRegistry.stubElementsForDoc)(ampdoc);
    });
    (0, _chunk.startupChunk)(self.document, function final() {
      (0, _pullToRefresh.installPullToRefreshBlocker)(self);

      (0, _validatorIntegration.maybeValidate)(self);
      (0, _styleInstaller.makeBodyVisible)(self.document, /* waitForServices */true);
    });
    (0, _chunk.startupChunk)(self.document, function finalTick() {
      perf.tick('e_is');
      _services.Services.resourcesForDoc(ampdoc).ampInitComplete();
      // TODO(erwinm): move invocation of the `flush` method when we have the
      // new ticks in place to batch the ticks properly.
      perf.flush();
    });
  }, /* opt_isRuntimeCss */true, /* opt_ext */'amp-runtime');
});

// Output a message to the console and add an attribute to the <html>
// tag to give some information that can be used in error reports.
// (At least by sophisticated users).
if (self.console) {
  (console.info || console.log).call(console, 'Powered by AMP âš¡ HTML â€“ Version 1535016172047', self.location.href);
}
self.document.documentElement.setAttribute('amp-version', '1535016172047');

},{"../build/css":1,"./chunk":14,"./error":25,"./font-stylesheet-timeout":32,"./impression":37,"./polyfills":51,"./pull-to-refresh":60,"./runtime":62,"./service/ampdoc-impl":65,"./service/custom-element-registry":71,"./service/performance-impl":82,"./service/platform-impl":83,"./services":104,"./style-installer":109,"./validator-integration":129}],11:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.triggerAnalyticsEvent = triggerAnalyticsEvent;

var _services = require('./services');

/**
 * Helper method to trigger analytics event if amp-analytics is available.
 * TODO: Do not expose this function
 * @param {!Element} target
 * @param {string} eventType
 * @param {!Object<string, string>=} opt_vars A map of vars and their values.
 */
function triggerAnalyticsEvent(target, eventType, opt_vars) {
  _services.Services.analyticsForDocOrNull(target).then(function (analytics) {
    if (!analytics) {
      return;
    }
    analytics.triggerEventForTarget(target, eventType, opt_vars);
  });
} /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

},{"./services":104}],12:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _promise = require('./utils/promise');

var _services = require('./services');

var _log = require('./log');

var _curve = require('./curve');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TAG_ = 'Animation';

var NOOP_CALLBACK = function NOOP_CALLBACK() {};

/**
 * The animation class allows construction of arbitrary animation processes.
 * The main method is "add" that adds a segment of animation at particular
 * time offset (delay) and duration. All animation segments are simply functions
 * of type Transition which are iterated from 0 to 1 in animation frames to
 * achieve the desired effect.
 */

var Animation = exports.Animation = function () {
  _createClass(Animation, null, [{
    key: 'animate',


    /**
     * Creates and starts animation with a single segment. Returns AnimationPlayer
     * object that can be used to monitor or control animation.
     *
     * @param {!Node} contextNode The context node.
     * @param {!TransitionDef<?>} transition Transition to animate.
     * @param {./time.timeDef} duration Duration in milliseconds.
     * @param {(!./curve.CurveDef|string)=} opt_curve Optional curve to use for
     *   animation. Default is the linear animation.
     * @return {!AnimationPlayer}
     */
    value: function animate(contextNode, transition, duration, opt_curve) {
      return new Animation(contextNode).setCurve(opt_curve).add(0, transition, 1).start(duration);
    }

    /**
     * @param {!Node} contextNode
     * @param {!./service/vsync-impl.Vsync=} opt_vsync
     */

  }]);

  function Animation(contextNode, opt_vsync) {
    _classCallCheck(this, Animation);

    /** @private @const {!Node} */
    this.contextNode_ = contextNode;

    /** @private @const {!./service/vsync-impl.Vsync} */
    this.vsync_ = opt_vsync || _services.Services.vsyncFor(self);

    /** @private {?./curve.CurveDef} */
    this.curve_ = null;

    /**
     * @private @const {!Array<!SegmentDef>}
     */
    this.segments_ = [];
  }

  /**
   * Sets the default curve for the animation. Each segment is allowed to have
   * its own curve, but this curve will be used if a segment doesn't specify
   * its own.
   * @param {!./curve.CurveDef|string|undefined} curve
   * @return {!Animation}
   */


  _createClass(Animation, [{
    key: 'setCurve',
    value: function setCurve(curve) {
      if (curve) {
        this.curve_ = (0, _curve.getCurve)(curve);
      }
      return this;
    }

    /**
     * Adds a segment to the animation. Each segment starts at offset (delay) and
     * runs for a portion of the overall animation (duration). Note that both
     * delay and duration and normtimeDef types which accept values from 0 to 1.
     * Optionally, the time is pushed through a curve. If curve is not specified,
     * the default animation curve will be used. The specified transition is
     * animated over the specified duration from 0 to 1.
     *
     * @param {./time.normtimeDef} delay
     * @param {!TransitionDef<?>} transition
     * @param {./time.normtimeDef} duration
     * @param {(!./curve.CurveDef|string)=} opt_curve
     * @return {!Animation}
     */

  }, {
    key: 'add',
    value: function add(delay, transition, duration, opt_curve) {
      this.segments_.push({
        delay: delay,
        func: transition,
        duration: duration,
        curve: (0, _curve.getCurve)(opt_curve)
      });
      return this;
    }

    /**
     * Starts the animation and returns the AnimationPlayer object that can be
     * used to monitor and control the animation.
     *
     * @param {./time.timeDef} duration Absolute time in milliseconds.
     * @return {!AnimationPlayer}
     */

  }, {
    key: 'start',
    value: function start(duration) {
      var player = new AnimationPlayer(this.vsync_, this.contextNode_, this.segments_, this.curve_, duration);
      return player;
    }
  }]);

  return Animation;
}();

/**
 * AnimationPlayer allows tracking and monitoring of the running animation.
 * Most importantly it exposes methods "then" and "thenAlways" that have the
 * semantics of a Promise and signal when the animation completed or failed.
 * Additionally, it exposes the method "halt" which allows to stop/reset the
 * animation.
 * // TODO(@cramforce) Actually fully implement.
 * implements {IThenable}
 */


var AnimationPlayer = function () {

  /**
   * @param {!./service/vsync-impl.Vsync} vsync
   * @param {!Node} contextNode
   * @param {!Array<!SegmentDef>} segments
   * @param {?./curve.CurveDef} defaultCurve
   * @param {./time.timeDef} duration
   */
  function AnimationPlayer(vsync, contextNode, segments, defaultCurve, duration) {
    _classCallCheck(this, AnimationPlayer);

    /** @private @const {!./service/vsync-impl.Vsync} */
    this.vsync_ = vsync;

    /** @private @const {!Node} */
    this.contextNode_ = contextNode;

    /** @private @const {!Array<!SegmentRuntimeDef>} */
    this.segments_ = [];
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      this.segments_.push({
        delay: segment.delay,
        func: segment.func,
        duration: segment.duration,
        curve: segment.curve || defaultCurve,
        started: false,
        completed: false
      });
    }

    /** @private @const */
    this.duration_ = duration;

    /** @private {./time.timeDef} */
    this.startTime_ = Date.now();

    /** @private {./time.normtimeDef} */
    // this.normLinearTime_ = 0;

    /** @private {./time.normtimeDef} */
    // this.normTime_ = 0;

    /** @private {boolean} */
    this.running_ = true;

    /** @private {!Object<string, *>} */
    this.state_ = {};

    var deferred = new _promise.Deferred();

    /** @const @private */
    this.promise_ = deferred.promise;

    /** @const @private */
    this.resolve_ = deferred.resolve;

    /** @const @private */
    this.reject_ = deferred.reject;

    /** @const */
    this.task_ = this.vsync_.createAnimTask(this.contextNode_, {
      mutate: this.stepMutate_.bind(this)
    });

    if (this.vsync_.canAnimate(this.contextNode_)) {
      this.task_(this.state_);
    } else {
      (0, _log.dev)().warn(TAG_, 'cannot animate');
      this.complete_( /* success */false, /* dir */0);
    }
  }

  /**
   * Chains to the animation's promise that will resolve when the animation has
   * completed or will reject if animation has failed or was interrupted.
   * @param {!Function=} opt_resolve
   * @param {!Function=} opt_reject
   * @return {!Promise}
   */


  _createClass(AnimationPlayer, [{
    key: 'then',
    value: function then(opt_resolve, opt_reject) {
      if (!opt_resolve && !opt_reject) {
        return this.promise_;
      }
      return this.promise_.then(opt_resolve, opt_reject);
    }

    /**
     * Callback for regardless whether the animation succeeds or fails.
     * @param {!Function=} opt_callback
     * @return {!Promise}
     */

  }, {
    key: 'thenAlways',
    value: function thenAlways(opt_callback) {
      var callback = opt_callback || NOOP_CALLBACK;
      return this.then(callback, callback);
    }

    /**
     * Halts the animation. Depending on the opt_dir value, the following actions
     * can be performed:
     * 0: No action. The state will be as at the moment of halting (default)
     * 1: Final state. Transitionable will be set to state = 1.
     * -1: Reset state. Transitionable will be reset to state = 0.
     * The animation's promise will be rejected since the transition has been
     * interrupted.
     * @param {number=} opt_dir
     */

  }, {
    key: 'halt',
    value: function halt(opt_dir) {
      this.complete_( /* success */false, /* dir */opt_dir || 0);
    }

    /**
     * @param {boolean} success
     * @param {number} dir
     * @private
     */

  }, {
    key: 'complete_',
    value: function complete_(success, dir) {
      if (!this.running_) {
        return;
      }
      this.running_ = false;
      if (dir != 0) {
        // Sort in the completion order.
        if (this.segments_.length > 1) {
          this.segments_.sort(function (s1, s2) {
            return s1.delay + s1.duration - (s2.delay + s2.duration);
          });
        }
        try {
          if (dir > 0) {
            // Natural order - all set to 1.
            for (var i = 0; i < this.segments_.length; i++) {
              this.segments_[i].func(1, true);
            }
          } else {
            // Reverse order - all set to 0.
            for (var _i = this.segments_.length - 1; _i >= 0; _i--) {
              this.segments_[_i].func(0, false);
            }
          }
        } catch (e) {
          (0, _log.dev)().error(TAG_, 'completion failed: ' + e, e);
          success = false;
        }
      }
      if (success) {
        this.resolve_();
      } else {
        this.reject_();
      }
    }

    /**
     * @param {!Object<string, *>} unusedState
     * @private
     */

  }, {
    key: 'stepMutate_',
    value: function stepMutate_(unusedState) {
      if (!this.running_) {
        return;
      }
      var currentTime = Date.now();
      var normLinearTime = Math.min((currentTime - this.startTime_) / this.duration_, 1);

      // Start segments due to be started
      for (var i = 0; i < this.segments_.length; i++) {
        var segment = this.segments_[i];
        if (!segment.started && normLinearTime >= segment.delay) {
          segment.started = true;
        }
      }

      // Execute all pending segments.
      for (var _i2 = 0; _i2 < this.segments_.length; _i2++) {
        var _segment = this.segments_[_i2];
        if (!_segment.started || _segment.completed) {
          continue;
        }
        this.mutateSegment_(_segment, normLinearTime);
      }

      // Complete or start next cycle.
      if (normLinearTime == 1) {
        this.complete_( /* success */true, /* dir */0);
      } else {
        if (this.vsync_.canAnimate(this.contextNode_)) {
          this.task_(this.state_);
        } else {
          (0, _log.dev)().warn(TAG_, 'cancel animation');
          this.complete_( /* success */false, /* dir */0);
        }
      }
    }

    /**
     * @param {!SegmentRuntimeDef} segment
     * @param {number} totalLinearTime
     */

  }, {
    key: 'mutateSegment_',
    value: function mutateSegment_(segment, totalLinearTime) {
      var normLinearTime = void 0;
      var normTime = void 0;
      if (segment.duration > 0) {
        normLinearTime = Math.min((totalLinearTime - segment.delay) / segment.duration, 1);
        normTime = normLinearTime;
        if (segment.curve && normTime != 1) {
          try {
            normTime = segment.curve(normLinearTime);
          } catch (e) {
            (0, _log.dev)().error(TAG_, 'step curve failed: ' + e, e);
            this.complete_( /* success */false, /* dir */0);
            return;
          }
        }
      } else {
        normLinearTime = 1;
        normTime = 1;
      }
      if (normLinearTime == 1) {
        segment.completed = true;
      }
      try {
        segment.func(normTime, segment.completed);
      } catch (e) {
        (0, _log.dev)().error(TAG_, 'step mutate failed: ' + e, e);
        this.complete_( /* success */false, /* dir */0);
        return;
      }
    }
  }]);

  return AnimationPlayer;
}();

/**
 * @typedef {{
 *   delay: ./time.normtimeDef,
 *   func: !TransitionDef,
 *   duration: ./time.normtimeDef,
 *   curve: ?./curve.CurveDef
 * }}
 */


var SegmentDef = void 0;

/**
 * @typedef {{
 *   delay: ./time.normtimeDef,
 *   func: !TransitionDef,
 *   duration: ./time.normtimeDef,
 *   curve: ?./curve.CurveDef,
 *   started: boolean,
 *   completed: boolean
 * }}
 */
var SegmentRuntimeDef = void 0;

},{"./curve":18,"./log":45,"./services":104,"./utils/promise":125}],13:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseElement = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _actionConstants = require('./action-constants');

var _layout = require('./layout');

var _services = require('./services');

var _log = require('./log');

var _eventHelper = require('./event-helper');

var _mode = require('./mode');

var _types = require('./types');

var _experiments = require('./experiments');

var _preconnect = require('./preconnect');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class for all custom element implementations. Instead of inheriting
 * from Element this class has an Element. Among other things this allows
 * switching the element implementation when going from a stub to the full
 * implementation.
 *
 * The base class implements a set of lifecycle methods that are called by
 * the runtime as appropriate. These are mostly based on the custom element
 * lifecycle (See
 * https://developers.google.com/web/fundamentals/getting-started/primers/customelements)
 * and adding AMP style late loading to the mix.
 *
 * The complete lifecycle of a custom DOM element is:
 *
 *           ||
 *           || createdCallback
 *           ||
 *           \/
 *    State: <NOT BUILT> <NOT UPGRADED> <NOT ATTACHED>
 *           ||
 *           || upgrade
 *           ||
 *           \/
 *    State: <NOT BUILT> <NOT ATTACHED>
 *           ||
 *           || firstAttachedCallback
 *           ||
 *           \/
 *    State: <NOT BUILT>
 *           ||
 *           || buildCallback
 *           || !getPlaceholder() => createPlaceholderCallback
 *           || preconnectCallback may be called N times after this, but only
 *           || after the doc becomes visible.
 *           || pauseCallback may be called N times after this.
 *           || resumeCallback may be called N times after this.
 *           ||
 *           \/
 *    State: <BUILT>
 *           ||
 *           || layoutCallback        <==
 *           || (firstLayoutCompleted)  ||
 *           ||                         ||
 *           \/                         || isRelayoutNeeded?
 *    State: <LAID OUT>                 ||
 *           ||                         ||
 *           ||                 =========
 *           ||
 *           || viewportCallback
 *           || unlayoutCallback may be called N times after this.
 *           ||
 *           \/
 *    State: <IN VIEWPORT>
 *
 * The preconnectCallback is called when the systems thinks it is good
 * to preconnect to hosts needed by an element. It will never be called
 * before buildCallback and it might be called multiple times including
 * after layoutCallback.
 *
 * The pauseCallback is called when when the document becomes inactive, e.g.
 * when the user swipes away from the document, or when the element is no
 * longer being displayed, e.g. when the carousel slide slides out of view.
 * In these situations, any actively playing media should pause.
 *
 * The resumeCallback is called when when the document becomes active again
 * after becoming inactive, e.g. when the user swipes away from the document
 * and swipes back. In these situations, any paused media may begin playing
 * again, if user interaction is not required.
 * TODO(jridgewell) slide slides into view
 *
 * The createPlaceholderCallback is called if AMP didn't detect a provided
 * placeholder for the element, subclasses can override this to build and
 * return a dynamically created placeholder that AMP would append to the
 * element.
 *
 * The unlayoutCallback is called when the document becomes inactive, e.g.
 * when the user swipes away from the document, or another tab is focused.
 * In these situations, expensive memory and CPU resources should be freed.
 *
 * Additionally whenever the dimensions of an element might have changed
 * AMP remeasures its dimensions and calls `onLayoutMeasure` on the
 * element instance. This can be used to do additional style calculations
 * without triggering style recalculations.
 *
 * When the dimensions of an element has changed, the 'onMeasureChanged'
 * callback is called.
 *
 * For more details, see {@link custom-element.js}.
 *
 * Each method is called exactly once and overriding them in subclasses
 * is optional.
 */
var BaseElement = exports.BaseElement = function () {
  /** @param {!AmpElement} element */
  function BaseElement(element) {
    _classCallCheck(this, BaseElement);

    /** @public @const {!Element} */
    this.element = element;
    /*
    \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  /  ____|
     \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
      \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
       \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
        \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
     Any private property for BaseElement should be declared in
    build-system/amp.extern.js, this is so closure compiler doesn't reuse the
    same symbol it would use in the core compilation unit for the private
    property in the extensions compilation unit's private properties.
     */

    /** @package {!Layout} */
    this.layout_ = _layout.Layout.NODISPLAY;

    /** @package {number} */
    this.layoutWidth_ = -1;

    /** @package {boolean} */
    this.inViewport_ = false;

    /** @public @const {!Window} */
    this.win = (0, _types.toWin)(element.ownerDocument.defaultView);

    /**
     * Maps action name to struct containing the action handler and minimum
     * trust required to invoke the handler.
     * @private {?Object<string, {
     *   handler: function(!./service/action-impl.ActionInvocation),
     *   minTrust: ActionTrust,
     * }>} */
    this.actionMap_ = null;

    /** @public {!./preconnect.Preconnect} */
    this.preconnect = (0, _preconnect.preconnectForElement)(this.element);

    /** @public {?Object} For use by sub classes */
    this.config = null;

    /**
     * The time at which this element was scheduled for layout relative to the
     * epoch. This value will be set to 0 until the this element has been
     * scheduled.
     * Note that this value may change over time if the element is enqueued,
     * then dequeued and re-enqueued by the scheduler.
     * @public {number}
     */
    this.layoutScheduleTime = 0;
  }

  /**
   * The element's signal tracker.
   * @return {!./utils/signals.Signals}
   */


  _createClass(BaseElement, [{
    key: 'signals',
    value: function signals() {
      return this.element.signals();
    }

    /**
    * This is the priority of loading elements (layoutCallback). Used only to
    * determine layout timing and preloading priority. Does not affect build time,
    * etc.
    *
    * The lower the number, the higher the priority.
    *
    * The default priority for base elements is LayoutPriority.CONTENT.
    * @return {number}
    */

  }, {
    key: 'getLayoutPriority',
    value: function getLayoutPriority() {
      return _layout.LayoutPriority.CONTENT;
    }

    /**
     * Updates the priority of the resource. If there are tasks currently
     * scheduled, their priority is updated as well.
     *
     * This method can be called any time when the new priority value is
     * available. It's a restricted API and special review is required to
     * allow individual extensions to request priority upgrade.
     *
     * @param {number} newLayoutPriority
     * @restricted
     */

  }, {
    key: 'updateLayoutPriority',
    value: function updateLayoutPriority(newLayoutPriority) {
      this.element.getResources().updateLayoutPriority(this.element, newLayoutPriority);
    }

    /** @return {!Layout} */

  }, {
    key: 'getLayout',
    value: function getLayout() {
      return this.layout_;
    }

    /**
     * Returns a previously measured layout box adjusted to the viewport. This
     * mainly affects fixed-position elements that are adjusted to be always
     * relative to the document position in the viewport.
     * @return {!./layout-rect.LayoutRectDef}
     */

  }, {
    key: 'getLayoutBox',
    value: function getLayoutBox() {
      return this.element.getLayoutBox();
    }

    /**
     * Returns a previously measured layout box relative to the page. The
     * fixed-position elements are relative to the top of the document.
     * @return {!./layout-rect.LayoutRectDef}
     */

  }, {
    key: 'getPageLayoutBox',
    value: function getPageLayoutBox() {
      return this.element.getPageLayoutBox();
    }

    /**
     * DO NOT CALL. Retained for backward compat during rollout.
     * @public @return {!Window}
     */

  }, {
    key: 'getWin',
    value: function getWin() {
      return this.win;
    }

    /**
     * Returns the associated ampdoc. Only available when `buildCallback` and
     * going forward. It throws an exception before `buildCallback`.
     * @return {!./service/ampdoc-impl.AmpDoc}
     */

  }, {
    key: 'getAmpDoc',
    value: function getAmpDoc() {
      return this.element.getAmpDoc();
    }

    /** @public @return {!./service/vsync-impl.Vsync} */

  }, {
    key: 'getVsync',
    value: function getVsync() {
      return _services.Services.vsyncFor(this.win);
    }

    /**
     * Returns the layout width for this element. A `-1` value indicates that the
     * layout is not yet known. A `0` value indicates that the element is not
     * visible.
     * @return {number}
     * @public
     */

  }, {
    key: 'getLayoutWidth',
    value: function getLayoutWidth() {
      return this.layoutWidth_;
    }

    /**
     * Returns the consent policy id that this element should wait for before
     * buildCallback.
     * A `null` value indicates to not be blocked by consent.
     * Subclasses may override.
     * @return {?string}
     */

  }, {
    key: 'getConsentPolicy',
    value: function getConsentPolicy() {
      var policyId = null;
      if (this.element.hasAttribute('data-block-on-consent')) {
        policyId = this.element.getAttribute('data-block-on-consent') || 'default';
      }
      return policyId;
    }

    /**
     * Intended to be implemented by subclasses. Tests whether the element
     * supports the specified layout. By default only Layout.NODISPLAY is
     * supported.
     * @param {!Layout} layout
     * @return {boolean}
     * @public
     */

  }, {
    key: 'isLayoutSupported',
    value: function isLayoutSupported(layout) {
      return layout == _layout.Layout.NODISPLAY;
    }

    /**
     * Intended to be implemented by subclasses. Tests whether the element
     * requires fixed positioning.
     * @return {boolean}
     * @public
     */

  }, {
    key: 'isAlwaysFixed',
    value: function isAlwaysFixed() {
      return false;
    }

    /**
     * @return {boolean}
     */

  }, {
    key: 'isInViewport',
    value: function isInViewport() {
      return this.inViewport_;
    }

    /**
     * This method is called when the element is added to DOM for the first time
     * and before `buildCallback` to give the element a chance to redirect its
     * implementation to another `BaseElement` implementation. The returned
     * value can be either `null` or `undefined` to indicate that no redirection
     * will take place; `BaseElement` instance to upgrade immediately; or a
     * promise to upgrade with the resolved `BaseElement` instance.
     *
     * Notice that calls to `upgradeCallback` are not recursive. I.e. this
     * callback will not be called on the returned instance again.
     *
     * @return {!BaseElement|!Promise<!BaseElement>|null}
     */

  }, {
    key: 'upgradeCallback',
    value: function upgradeCallback() {
      // Subclasses may override.
      return null;
    }

    /**
     * Called when the element is first created. Note that for element created
     * using createElement this may be before any children are added.
     */

  }, {
    key: 'createdCallback',
    value: function createdCallback() {}
    // Subclasses may override.


    /**
     * Override in subclass to adjust the element when it is being added to the
     * DOM. Could e.g. be used to insert a fallback. Should not typically start
     * loading a resource.
     */

  }, {
    key: 'firstAttachedCallback',
    value: function firstAttachedCallback() {}
    // Subclasses may override.


    /**
     * Override in subclass if the element needs to rebuilt its DOM content.
     * Until the element has been rebuilt its content are not shown with an only
     * exception of [placeholder] elements. From the moment the element is created
     * and until the building phase is complete it will have "amp-notbuilt" CSS
     * class set on it.
     *
     * This callback is executed early after the element has been attached to DOM.
     *
     * This callback can either immediately return or return a promise if the
     * build steps are asynchronous.
     *
     * @return {!Promise|undefined}
     */

  }, {
    key: 'buildCallback',
    value: function buildCallback() {}
    // Subclasses may override.


    /**
     * Called by the framework to give the element a chance to preconnect to
     * hosts and prefetch resources it is likely to need. May be called
     * multiple times because connections can time out.
     * @param {boolean=} opt_onLayout
     */

  }, {
    key: 'preconnectCallback',
    value: function preconnectCallback(opt_onLayout) {}
    // Subclasses may override.


    /**
     * Override in subclass to adjust the element when it is being removed from
     * the DOM. Could e.g. be used to remove a listener.
     */

  }, {
    key: 'detachedCallback',
    value: function detachedCallback() {}
    // Subclasses may override.


    /**
     * Sets this element as the owner of the specified element. By setting itself
     * as an owner, the element declares that it will manage the lifecycle of
     * the owned element itself. This element, as an owner, will have to call
     * {@link scheduleLayout}, {@link schedulePreload}, {@link updateInViewport}
     * and similar methods.
     * @param {!Element} element
     */

  }, {
    key: 'setAsOwner',
    value: function setAsOwner(element) {
      this.element.getResources().setOwner(element, this.element);
    }

    /**
     * Subclasses can override this method to opt-in into being called to
     * prerender when document itself is not yet visible (pre-render mode).
     *
     * The return value of this function is used to determine whether or not the
     * element will be built and laid out during prerender mode. Therefore, any
     * changes to the return value _after_ buildCallback() will have no affect.
     * @return {boolean}
     */

  }, {
    key: 'prerenderAllowed',
    value: function prerenderAllowed() {
      return false;
    }

    /**
     * Subclasses can override this method to create a dynamic placeholder
     * element and return it to be appended to the element. This will only
     * be called if the element doesn't already have a placeholder.
     * @return {?Element}
     */

  }, {
    key: 'createPlaceholderCallback',
    value: function createPlaceholderCallback() {
      return null;
    }

    /**
     * Subclasses can override this method to opt-out of rendering the element
     * when it is not currently visible.
     * Returning a boolean allows or prevents rendering outside the viewport at
     * any distance, while returning a positive number allows rendering only when
     * the element is within X viewports of the current viewport. Returning a
     * zero causes the element to only render inside the viewport.
     * @return {boolean|number}
     */

  }, {
    key: 'renderOutsideViewport',
    value: function renderOutsideViewport() {
      // Inabox allow layout independent of viewport location.
      return (0, _mode.getMode)(this.win).runtime == 'inabox' && (0, _experiments.isExperimentOn)(this.win, 'inabox-rov') ? true : 3;
    }

    /**
     * Allows for rendering outside of the constraint set by renderOutsideViewport
     * so long task scheduler is idle.  Integer values less than those returned
     * by renderOutsideViewport have no effect.  Subclasses can override (default
     * is disabled).
     * @return {boolean|number}
     */

  }, {
    key: 'idleRenderOutsideViewport',
    value: function idleRenderOutsideViewport() {
      return false;
    }

    /**
     * Subclasses can override this method to opt-in into receiving additional
     * {@link layoutCallback} calls. Note that this method is not consulted for
     * the first layout given that each element must be laid out at least once.
     * @return {boolean}
     */

  }, {
    key: 'isRelayoutNeeded',
    value: function isRelayoutNeeded() {
      return false;
    }

    /**
     * Called when the element should perform layout. At this point the element
     * should load/reload resources associated with it. This method is called
     * by the runtime and cannot be called manually. Returns promise that will
     * complete when loading is considered to be complete.
     *
     * The first layout call is always called. If the subclass is interested in
     * receiving additional callbacks, it has to opt in to do so using
     * {@link isRelayoutNeeded} method.
     *
     * @return {!Promise}
     */

  }, {
    key: 'layoutCallback',
    value: function layoutCallback() {
      return Promise.resolve();
    }

    /**
     * Called to notify the element that the first layout has been successfully
     * completed.
     *
     * The default behavior of this method is to hide the placeholder. However,
     * a subclass may choose to hide placeholder earlier or not hide it at all.
     *
     * @public
     */

  }, {
    key: 'firstLayoutCompleted',
    value: function firstLayoutCompleted() {
      this.togglePlaceholder(false);
    }

    /**
     * Instructs the resource that it has either entered or exited the visible
     * viewport. Intended to be implemented by actual components.
     * @param {boolean} unusedInViewport
     */

  }, {
    key: 'viewportCallback',
    value: function viewportCallback(unusedInViewport) {}

    /**
     * Requests the element to stop its activity when the document goes into
     * inactive state. The scope is up to the actual component. Among other
     * things the active playback of video or audio content must be stopped.
     */

  }, {
    key: 'pauseCallback',
    value: function pauseCallback() {}

    /**
     * Requests the element to resume its activity when the document returns from
     * an inactive state. The scope is up to the actual component. Among other
     * things the active playback of video or audio content may be resumed.
     */

  }, {
    key: 'resumeCallback',
    value: function resumeCallback() {}

    /**
     * Requests the element to unload any expensive resources when the element
     * goes into non-visible state. The scope is up to the actual component.
     * The component must return `true` if it'd like to later receive
     * {@link layoutCallback} in case document becomes active again.
     *
     * @return {boolean}
     */

  }, {
    key: 'unlayoutCallback',
    value: function unlayoutCallback() {
      return false;
    }

    /**
     * Subclasses can override this method to opt-in into calling
     * {@link unlayoutCallback} when paused.
     * @return {boolean}
     */

  }, {
    key: 'unlayoutOnPause',
    value: function unlayoutOnPause() {
      return false;
    }

    /**
     * Whether the element needs to be reconstructed after it has been
     * re-parented. Many elements cannot survive fully the reparenting and
     * are better to be reconstructed from scratch.
     *
     * An example of an element that should be reconstructed in a iframe-based
     * element. Reparenting such an element will cause the iframe to reload and
     * will lost the previously established connection. It's safer to reconstruct
     * such an element. An image or the other hand does not need to be
     * reconstructed since image itself is not reloaded by the browser and thus
     * there's no need to use additional resources for reconstruction.
     *
     * @return {boolean}
     */

  }, {
    key: 'reconstructWhenReparented',
    value: function reconstructWhenReparented() {
      return true;
    }

    /**
     * Instructs the element that its activation is requested based on some
     * user event. Intended to be implemented by actual components.
     * @param {!./service/action-impl.ActionInvocation} unusedInvocation
     */

  }, {
    key: 'activate',
    value: function activate(unusedInvocation) {}

    /**
     * Minimum event trust required for activate().
     * @return {ActionTrust}
     */

  }, {
    key: 'activationTrust',
    value: function activationTrust() {
      return _actionConstants.ActionTrust.HIGH;
    }

    /**
     * Returns a promise that will resolve or fail based on the element's 'load'
     * and 'error' events.
     * @param {T} element
     * @return {!Promise<T>}
     * @template T
     * @final
     */

  }, {
    key: 'loadPromise',
    value: function loadPromise(element) {
      return (0, _eventHelper.loadPromise)(element);
    }

    /** @private */

  }, {
    key: 'initActionMap_',
    value: function initActionMap_() {
      if (!this.actionMap_) {
        this.actionMap_ = this.win.Object.create(null);
      }
    }

    /**
     * Registers the action handler for the method with the specified name.
     *
     * The handler is only invoked by events with trust equal to or greater than
     * `minTrust`. Otherwise, a user error is logged.
     *
     * @param {string} method
     * @param {function(!./service/action-impl.ActionInvocation)} handler
     * @param {ActionTrust} minTrust
     * @public
     */

  }, {
    key: 'registerAction',
    value: function registerAction(method, handler) {
      var minTrust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _actionConstants.ActionTrust.HIGH;

      this.initActionMap_();
      this.actionMap_[method] = { handler: handler, minTrust: minTrust };
    }

    /**
     * Requests the element to execute the specified method. If method must have
     * been previously registered using {@link registerAction}, otherwise an
     * error is thrown.
     * @param {!./service/action-impl.ActionInvocation} invocation The invocation data.
     * @param {boolean} unusedDeferred Whether the invocation has had to wait any time
     *   for the element to be resolved, upgraded and built.
     * @final
     * @package
     */

  }, {
    key: 'executeAction',
    value: function executeAction(invocation, unusedDeferred) {
      if (invocation.method == 'activate') {
        if (invocation.satisfiesTrust(this.activationTrust())) {
          return this.activate(invocation);
        }
      } else {
        this.initActionMap_();
        var holder = this.actionMap_[invocation.method];
        (0, _log.user)().assert(holder, 'Method not found: ' + invocation.method + ' in %s', this);
        var handler = holder.handler,
            minTrust = holder.minTrust;

        if (invocation.satisfiesTrust(minTrust)) {
          return handler(invocation);
        }
      }
    }

    /**
     * Returns the maximum DPR available on this device.
     * @return {number}
     */

  }, {
    key: 'getMaxDpr',
    value: function getMaxDpr() {
      return this.element.getResources().getMaxDpr();
    }

    /**
     * Returns the most optimal DPR currently recommended.
     * @return {number}
     */

  }, {
    key: 'getDpr',
    value: function getDpr() {
      return this.element.getResources().getDpr();
    }

    /**
     * Utility method that propagates attributes from this element
     * to the given element.
     * If `opt_removeMissingAttrs` is true, then also removes any specified
     * attributes that are missing on this element from the target element.
     * @param {string|!Array<string>} attributes
     * @param {!Element} element
     * @param {boolean=} opt_removeMissingAttrs
     * @public @final
     */

  }, {
    key: 'propagateAttributes',
    value: function propagateAttributes(attributes, element, opt_removeMissingAttrs) {
      attributes = (0, _types.isArray)(attributes) ? attributes : [attributes];
      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];
        if (this.element.hasAttribute(attr)) {
          element.setAttribute(attr, this.element.getAttribute(attr));
        } else if (opt_removeMissingAttrs) {
          element.removeAttribute(attr);
        }
      }
    }

    /**
     * Utility method that forwards the given list of non-bubbling events
     * from the given element to this element as custom events with the same name.
     * @param  {string|!Array<string>} events
     * @param  {!Element} element
     * @public @final
     * @return {!UnlistenDef}
     */

  }, {
    key: 'forwardEvents',
    value: function forwardEvents(events, element) {
      var _this = this;

      var unlisteners = ((0, _types.isArray)(events) ? events : [events]).map(function (eventType) {
        return (0, _eventHelper.listen)(element, eventType, function (event) {
          _this.element.dispatchCustomEvent(eventType, (0, _eventHelper.getData)(event) || {});
        });
      });

      return function () {
        return unlisteners.forEach(function (unlisten) {
          return unlisten();
        });
      };
    }

    /**
     * Must be executed in the mutate context. Removes `display:none` from the
     * element set via `layout=nodisplay`.
     * @param {boolean} displayOn
     */

  }, {
    key: 'toggleLayoutDisplay',
    value: function toggleLayoutDisplay(displayOn) {
      this.element.toggleLayoutDisplay(displayOn);
    }

    /**
     * Returns an optional placeholder element for this custom element.
     * @return {?Element}
     * @public @final
     */

  }, {
    key: 'getPlaceholder',
    value: function getPlaceholder() {
      return this.element.getPlaceholder();
    }

    /**
     * Hides or shows the placeholder, if available.
     * @param {boolean} state
     * @public @final
     */

  }, {
    key: 'togglePlaceholder',
    value: function togglePlaceholder(state) {
      this.element.togglePlaceholder(state);
    }

    /**
     * Returns an optional fallback element for this custom element.
     * @return {?Element}
     * @public @final
     */

  }, {
    key: 'getFallback',
    value: function getFallback() {
      return this.element.getFallback();
    }

    /**
     * Hides or shows the fallback, if available. This function must only
     * be called inside a mutate context.
     * @param {boolean} state
     * @public @final
     */

  }, {
    key: 'toggleFallback',
    value: function toggleFallback(state) {
      this.element.toggleFallback(state);
    }

    /**
     * Hides or shows the loading indicator. This function must only
     * be called inside a mutate context.
     * @param {boolean} state
     * @param {boolean=} opt_force
     * @public @final
     */

  }, {
    key: 'toggleLoading',
    value: function toggleLoading(state, opt_force) {
      this.element.toggleLoading(state, { force: !!opt_force });
    }

    /**
     * Returns whether the loading indicator is reused again after the first
     * render.
     * @return {boolean}
     * @public
     */

  }, {
    key: 'isLoadingReused',
    value: function isLoadingReused() {
      return false;
    }

    /**
     * Returns an optional overflow element for this custom element.
     * @return {?Element}
     * @public @final
     */

  }, {
    key: 'getOverflowElement',
    value: function getOverflowElement() {
      return this.element.getOverflowElement();
    }

    /**
     * An implementation can call this method to signal to the element that
     * it has started rendering.
     */

  }, {
    key: 'renderStarted',
    value: function renderStarted() {
      this.element.renderStarted();
    }

    /**
     * Returns the original nodes of the custom element without any service nodes
     * that could have been added for markup. These nodes can include Text,
     * Comment and other child nodes.
     * @return {!Array<!Node>}
     * @public @final
     */

  }, {
    key: 'getRealChildNodes',
    value: function getRealChildNodes() {
      return this.element.getRealChildNodes();
    }

    /**
     * Returns the original children of the custom element without any service
     * nodes that could have been added for markup.
     * @return {!Array<!Element>}
     * @public @final
     */

  }, {
    key: 'getRealChildren',
    value: function getRealChildren() {
      return this.element.getRealChildren();
    }

    /**
     * Configures the supplied element to have a "fill content" layout. The
     * exact interpretation of "fill content" depends on the element's layout.
     *
     * If `opt_replacedContent` is specified, it indicates whether the "replaced
     * content" styling should be applied. Replaced content is not allowed to
     * have its own paddings or border.
     *
     * @param {!Element} element
     * @param {boolean=} opt_replacedContent
     * @public @final
     */

  }, {
    key: 'applyFillContent',
    value: function applyFillContent(element, opt_replacedContent) {
      element.classList.add('i-amphtml-fill-content');
      if (opt_replacedContent) {
        element.classList.add('i-amphtml-replaced-content');
      }
    }

    /**
     * Returns the viewport within which the element operates.
     * @return {!./service/viewport/viewport-impl.Viewport}
     */

  }, {
    key: 'getViewport',
    value: function getViewport() {
      return _services.Services.viewportForDoc(this.getAmpDoc());
    }

    /**
     * Returns the layout rectangle used for when calculating this element's
     * intersection with the viewport.
     * @return {!./layout-rect.LayoutRectDef}
     */

  }, {
    key: 'getIntersectionElementLayoutBox',
    value: function getIntersectionElementLayoutBox() {
      return this.getLayoutBox();
    }

    /**
     * Schedule the layout request for the children element or elements
     * specified. Resource manager will perform the actual layout based on the
     * priority of this element and its children.
     * @param {!Element|!Array<!Element>} elements
     * @public
     */

  }, {
    key: 'scheduleLayout',
    value: function scheduleLayout(elements) {
      this.element.getResources().scheduleLayout(this.element, elements);
    }

    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */

  }, {
    key: 'schedulePause',
    value: function schedulePause(elements) {
      this.element.getResources().schedulePause(this.element, elements);
    }

    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */

  }, {
    key: 'scheduleResume',
    value: function scheduleResume(elements) {
      this.element.getResources().scheduleResume(this.element, elements);
    }

    /**
     * Schedule the preload request for the children element or elements
     * specified. Resource manager will perform the actual preload based on the
     * priority of this element and its children.
     * @param {!Element|!Array<!Element>} elements
     * @public
     */

  }, {
    key: 'schedulePreload',
    value: function schedulePreload(elements) {
      this.element.getResources().schedulePreload(this.element, elements);
    }

    /**
     * @param {!Element|!Array<!Element>} elements
     * @public
     */

  }, {
    key: 'scheduleUnlayout',
    value: function scheduleUnlayout(elements) {
      this.element.getResources(). /*OK*/scheduleUnlayout(this.element, elements);
    }

    /**
     * Update inViewport state of the specified children element or elements.
     * Resource manager will perform the actual changes to the inViewport state
     * based on the state of these elements and their parent subtree.
     * @param {!Element|!Array<!Element>} elements
     * @param {boolean} inLocalViewport
     * @public
     */

  }, {
    key: 'updateInViewport',
    value: function updateInViewport(elements, inLocalViewport) {
      this.element.getResources().updateInViewport(this.element, elements, inLocalViewport);
    }

    /**
     * Requests the runtime to update the height of this element to the specified
     * value. The runtime will schedule this request and attempt to process it
     * as soon as possible.
     * @param {number} newHeight
     * @public
     */

  }, {
    key: 'changeHeight',
    value: function changeHeight(newHeight) {
      this.element.getResources(). /*OK*/changeSize(this.element, newHeight, /* newWidth */undefined);
    }

    /**
     * Collapses the element, setting it to `display: none`, and notifies its
     * owner (if there is one) through {@link collapsedCallback} that the element
     * is no longer visible.
     */

  }, {
    key: 'collapse',
    value: function collapse() {
      this.element.getResources().collapseElement(this.element);
    }

    /**
     * Return a promise that request the runtime to collapse one element
     * @return {!Promise}
     */

  }, {
    key: 'attemptCollapse',
    value: function attemptCollapse() {
      return this.element.getResources().attemptCollapse(this.element);
    }

    /**
     * Return a promise that requests the runtime to update
     * the height of this element to the specified value.
     * The runtime will schedule this request and attempt to process it
     * as soon as possible. However, unlike in {@link changeHeight}, the runtime
     * may refuse to make a change in which case it will show the element's
     * overflow element if provided, which is supposed to provide the reader with
     * the necessary user action. (The overflow element is shown only if the
     * requested height is greater than 0.)
     * The promise is resolved if the height is successfully updated.
     * @param {number} newHeight
     * @return {!Promise}
     * @public
     */

  }, {
    key: 'attemptChangeHeight',
    value: function attemptChangeHeight(newHeight) {
      return this.element.getResources().attemptChangeSize(this.element, newHeight, /* newWidth */undefined);
    }

    /**
    * Return a promise that requests the runtime to update
    * the size of this element to the specified value.
    * The runtime will schedule this request and attempt to process it
    * as soon as possible. However, unlike in {@link changeSize}, the runtime
    * may refuse to make a change in which case it will show the element's
    * overflow element if provided, which is supposed to provide the reader with
    * the necessary user action. (The overflow element is shown only if the
    * requested height is greater than 0.)
    * The promise is resolved if the height is successfully updated.
    * @param {number|undefined} newHeight
    * @param {number|undefined} newWidth
    * @return {!Promise}
    * @public
    */

  }, {
    key: 'attemptChangeSize',
    value: function attemptChangeSize(newHeight, newWidth) {
      return this.element.getResources().attemptChangeSize(this.element, newHeight, newWidth);
    }

    /**
     * Runs the specified measure, which is called in the "measure" vsync phase.
     * This is simply a proxy to the privileged vsync service.
     *
     * @param {function()} measurer
     * @return {!Promise}
     */

  }, {
    key: 'measureElement',
    value: function measureElement(measurer) {
      return this.element.getResources().measureElement(measurer);
    }

    /**
     * Runs the specified mutation on the element and ensures that remeasures and
     * layouts are performed for the affected elements.
     *
     * This method should be called whenever a significant mutations are done
     * on the DOM that could affect layout of elements inside this subtree or
     * its siblings. The top-most affected element should be specified as the
     * first argument to this method and all the mutation work should be done
     * in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {function()} mutator
     * @param {Element=} opt_element
     * @return {!Promise}
     */

  }, {
    key: 'mutateElement',
    value: function mutateElement(mutator, opt_element) {
      return this.measureMutateElement(null, mutator, opt_element);
    }

    /**
     * Runs the specified measure, then runs the mutation on the element and
     * ensures that remeasures and layouts are performed for the affected
     * elements.
     *
     * This method should be called whenever a measure and significant mutations
     * are done on the DOM that could affect layout of elements inside this
     * subtree or its siblings. The top-most affected element should be specified
     * as the first argument to this method and all the mutation work should be
     * done in the mutator callback which is called in the "mutation" vsync phase.
     *
     * @param {?function()} measurer
     * @param {function()} mutator
     * @param {Element=} opt_element
     * @return {!Promise}
     */

  }, {
    key: 'measureMutateElement',
    value: function measureMutateElement(measurer, mutator, opt_element) {
      return this.element.getResources().measureMutateElement(opt_element || this.element, measurer, mutator);
    }

    /**
     * Called every time an owned AmpElement collapses itself.
     * See {@link collapse}.
     * @param {!AmpElement} unusedElement Child element that was collapsed.
     */

  }, {
    key: 'collapsedCallback',
    value: function collapsedCallback(unusedElement) {}
    // Subclasses may override.


    /**
     * Expands the element, resetting its default display value, and notifies its
     * owner (if there is one) through {@link expandedCallback} that the element
     * is no longer visible.
     */

  }, {
    key: 'expand',
    value: function expand() {
      this.element.getResources().expandElement(this.element);
    }

    /**
     * Called every time an owned AmpElement expands itself.
     * See {@link expand}.
     * @param {!AmpElement} unusedElement Child element that was expanded.
     */

  }, {
    key: 'expandedCallback',
    value: function expandedCallback(unusedElement) {}
    // Subclasses may override.


    /**
     * Called when one or more attributes are mutated.
     * Note:
     * - Must be called inside a mutate context.
     * - Boolean attributes have a value of `true` and `false` when
     *       present and missing, respectively.
     * @param {
     *   !JsonObject<string, (null|boolean|string|number|Array|Object)>
     * } unusedMutations
     */

  }, {
    key: 'mutatedAttributesCallback',
    value: function mutatedAttributesCallback(unusedMutations) {}
    // Subclasses may override.


    /**
     * Called when we just measured the layout rect of this element. Doing
     * more expensive style reads should now be cheap.
     * This may currently not work with extended elements. Please file
     * an issue if that is required.
     * @public
     */

  }, {
    key: 'onLayoutMeasure',
    value: function onLayoutMeasure() {}

    /**
     * Called only when the measurements of an amp-element changes. This
     * would not trigger for every measurement invalidation caused by a mutation.
     * @public
     */

  }, {
    key: 'onMeasureChanged',
    value: function onMeasureChanged() {}

    /**
     * @return {./log.Log}
     */

  }, {
    key: 'user',
    value: function user() {
      return (0, _log.user)(this.element);
    }

    /**
     * Declares a child element (or ourselves) as a Layer
     * @param {!Element=} opt_element
     */

  }, {
    key: 'declareLayer',
    value: function declareLayer(opt_element) {
      (0, _log.dev)().assert((0, _experiments.isExperimentOn)(this.win, 'layers'), 'Layers must be enabled' + ' to declare layer.');
      if (opt_element) {
        (0, _log.dev)().assert(this.element.contains(opt_element));
      }
      return this.element.getLayers().declareLayer(opt_element || this.element);
    }
  }]);

  return BaseElement;
}();

},{"./action-constants":8,"./event-helper":27,"./experiments":28,"./layout":43,"./log":45,"./mode":47,"./preconnect":59,"./services":104,"./types":113}],14:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkPriority = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.startupChunk = startupChunk;
exports.chunk = chunk;
exports.chunkInstanceForTesting = chunkInstanceForTesting;
exports.deactivateChunking = deactivateChunking;
exports.activateChunkingForTesting = activateChunkingForTesting;
exports.runChunksForTesting = runChunksForTesting;
exports.onIdle = onIdle;

var _services = require('./services');

var _log = require('./log');

var _eventHelper = require('./event-helper');

var _service = require('./service');

var _styleInstaller = require('./style-installer');

var _priorityQueue = require('./utils/priority-queue');

var _priorityQueue2 = _interopRequireDefault(_priorityQueue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @const {string}
 */
var TAG = 'CHUNK';

/**
 * @type {boolean}
 */
var deactivated = /nochunking=1/.test(self.location.hash);

/**
 * @const {!Promise}
 */
var resolved = Promise.resolve();

/**
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc
 * @return {!Chunks}
 * @private
 */
function getChunkServiceForDoc_(nodeOrAmpDoc) {
  (0, _service.registerServiceBuilderForDoc)(nodeOrAmpDoc, 'chunk', Chunks);
  // Uses getServiceForDocDeprecated() since Chunks is a startup service.
  return (0, _service.getServiceForDocDeprecated)(nodeOrAmpDoc, 'chunk');
}

/**
 * Run the given function. For visible documents the function will be
 * called in a micro task (Essentially ASAP). If the document is
 * not visible, tasks will yield to the event loop (to give the browser
 * time to do other things) and may even be further delayed until
 * there is time.
 *
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc
 * @param {function(?IdleDeadline)} fn
 */
function startupChunk(nodeOrAmpDoc, fn) {
  if (deactivated) {
    resolved.then(fn);
    return;
  }
  var service = getChunkServiceForDoc_(nodeOrAmpDoc);
  service.runForStartup(fn);
}

/**
 * Run the given function sometime in the future without blocking UI.
 *
 * Higher priority tasks are executed before lower priority tasks.
 * Tasks with the same priority are executed in FIFO order.
 *
 * Uses `requestIdleCallback` if available and passes the `IdleDeadline`
 * object to the function, which can be used to perform a variable amount
 * of work depending on the remaining amount of idle time.
 *
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc
 * @param {function(?IdleDeadline)} fn
 * @param {ChunkPriority} priority
 */
function chunk(nodeOrAmpDoc, fn, priority) {
  if (deactivated) {
    resolved.then(fn);
    return;
  }
  var service = getChunkServiceForDoc_(nodeOrAmpDoc);
  service.run(fn, priority);
}

/**
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc
 * @return {!Chunks}
 */
function chunkInstanceForTesting(nodeOrAmpDoc) {
  return getChunkServiceForDoc_(nodeOrAmpDoc);
}

/**
 * Use a standard micro task for every invocation. This should only
 * be called from the AMP bootstrap script if it is known that
 * chunking makes no sense. In particular this is the case when
 * AMP runs in the `amp-shadow` multi document mode.
 */
function deactivateChunking() {
  deactivated = true;
}

/**
 * @visibleForTesting
 */
function activateChunkingForTesting() {
  deactivated = false;
}

/**
 * Runs all currently scheduled chunks.
 * Independent of errors it will unwind the queue. Will afterwards
 * throw the first encountered error.
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrAmpDoc
 */
function runChunksForTesting(nodeOrAmpDoc) {
  var service = chunkInstanceForTesting(nodeOrAmpDoc);
  var errors = [];
  while (true) {
    try {
      if (!service.execute_( /* idleDeadline */null)) {
        break;
      }
    } catch (e) {
      errors.push(e);
    }
  }
  if (errors.length) {
    throw errors[0];
  }
}

/**
 * The priority of a chunk task. Higher priority tasks have higher values.
 * @enum {number}
 */
var ChunkPriority = exports.ChunkPriority = {
  HIGH: 20,
  LOW: 10,
  BACKGROUND: 0
};

/** @enum {string} */
var TaskState = {
  NOT_RUN: 'not_run',
  RUN: 'run'
};

/**
 * A default chunkable task.
 * @private
 */

var Task = function () {
  /**
   * @param {function(?IdleDeadline)} fn
   */
  function Task(fn) {
    _classCallCheck(this, Task);

    /** @public {TaskState} */
    this.state = TaskState.NOT_RUN;

    /** @private @const {!function(?IdleDeadline)} */
    this.fn_ = fn;
  }

  /**
   * Executes the wrapped function.
   * @param {?IdleDeadline} idleDeadline
   * @throws {Error}
   * @protected
   */


  _createClass(Task, [{
    key: 'runTask_',
    value: function runTask_(idleDeadline) {
      if (this.state == TaskState.RUN) {
        return;
      }
      this.state = TaskState.RUN;
      try {
        this.fn_(idleDeadline);
      } catch (e) {
        this.onTaskError_(e);
        throw e;
      }
    }

    /**
     * @return {string}
     * @protected
     */

  }, {
    key: 'getName_',
    value: function getName_() {
      return this.fn_.displayName || this.fn_.name;
    }

    /**
     * Optional handling when a task run throws an error.
     * @param {Error} unusedError
     * @private
     */

  }, {
    key: 'onTaskError_',
    value: function onTaskError_(unusedError) {}
    // By default, no-op.


    /**
     * Returns true if this task should be run without delay.
     * @return {boolean}
     * @protected
     */

  }, {
    key: 'immediateTriggerCondition_',
    value: function immediateTriggerCondition_() {
      // By default, there are no immediate trigger conditions.
      return false;
    }

    /**
     * Returns true if this task should be scheduled using `requestIdleCallback`.
     * Otherwise, task is scheduled as macro-task on next event loop.
     * @return {boolean}
     * @protected
     */

  }, {
    key: 'useRequestIdleCallback_',
    value: function useRequestIdleCallback_() {
      // By default, always use requestIdleCallback.
      return true;
    }
  }]);

  return Task;
}();

/**
 * A task that's run as part of AMP's startup sequence.
 * @private
 */


var StartupTask = function (_Task) {
  _inherits(StartupTask, _Task);

  /**
   * @param {function(?IdleDeadline)} fn
   * @param {!Window} win
   * @param {!Promise<!./service/viewer-impl.Viewer>} viewerPromise
   */
  function StartupTask(fn, win, viewerPromise) {
    _classCallCheck(this, StartupTask);

    /** @private {!Window} */
    var _this = _possibleConstructorReturn(this, (StartupTask.__proto__ || Object.getPrototypeOf(StartupTask)).call(this, fn));

    _this.win_ = win;

    /** @private {?./service/viewer-impl.Viewer} */
    _this.viewer_ = null;

    viewerPromise.then(function (viewer) {
      _this.viewer_ = viewer;

      if (_this.viewer_.isVisible()) {
        _this.runTask_( /* idleDeadline */null);
      }
      _this.viewer_.onVisibilityChanged(function () {
        if (_this.viewer_.isVisible()) {
          _this.runTask_( /* idleDeadline */null);
        }
      });
    });
    return _this;
  }

  /** @override */


  _createClass(StartupTask, [{
    key: 'onTaskError_',
    value: function onTaskError_(unusedError) {
      // Startup tasks run early in init. All errors should show the doc.
      (0, _styleInstaller.makeBodyVisible)(self.document);
    }

    /** @override */

  }, {
    key: 'immediateTriggerCondition_',
    value: function immediateTriggerCondition_() {
      // Run in a micro task when the doc is visible. Otherwise, run after
      // having yielded to the event queue once.
      return this.isVisible_();
    }

    /** @override */

  }, {
    key: 'useRequestIdleCallback_',
    value: function useRequestIdleCallback_() {
      // We only start using requestIdleCallback when the viewer has
      // been initialized. Otherwise we risk starving ourselves
      // before we get into a state where the viewer can tell us
      // that we are visible.
      return !!this.viewer_;
    }

    /**
     * @return {boolean}
     * @private
     */

  }, {
    key: 'isVisible_',
    value: function isVisible_() {
      // Ask the viewer first.
      if (this.viewer_) {
        return this.viewer_.isVisible();
      }
      // There is no viewer yet. Lets try to guess whether we are visible.
      if (this.win_.document.hidden) {
        return false;
      }
      // Viewers send a URL param if we are not visible.
      return !/visibilityState=(hidden|prerender)/.test(this.win_.location.hash);
    }
  }]);

  return StartupTask;
}(Task);

/**
 * Handles queueing, scheduling and executing tasks.
 */


var Chunks = function () {
  /**
   * @param {!./service/ampdoc-impl.AmpDoc} ampDoc
   */
  function Chunks(ampDoc) {
    var _this2 = this;

    _classCallCheck(this, Chunks);

    /** @private @const {!Window} */
    this.win_ = ampDoc.win;
    /** @private @const {!PriorityQueue<Task>} */
    this.tasks_ = new _priorityQueue2.default();
    /** @private @const {function(?IdleDeadline)} */
    this.boundExecute_ = this.execute_.bind(this);

    /** @private @const {!Promise<!./service/viewer-impl.Viewer>} */
    this.viewerPromise_ = _services.Services.viewerPromiseForDoc(ampDoc);

    this.win_.addEventListener('message', function (e) {
      if ((0, _eventHelper.getData)(e) == 'amp-macro-task') {
        _this2.execute_( /* idleDeadline */null);
      }
    });
  }

  /**
   * Run fn as a "chunk".
   * @param {function(?IdleDeadline)} fn
   * @param {number} priority
   */


  _createClass(Chunks, [{
    key: 'run',
    value: function run(fn, priority) {
      var t = new Task(fn);
      this.enqueueTask_(t, priority);
    }

    /**
     * Run a fn that's part of AMP's startup sequence as a "chunk".
     * @param {function(?IdleDeadline)} fn
     */

  }, {
    key: 'runForStartup',
    value: function runForStartup(fn) {
      var t = new StartupTask(fn, this.win_, this.viewerPromise_);
      this.enqueueTask_(t, Number.POSITIVE_INFINITY);
    }

    /**
     * Queues a task to be executed later with given priority.
     * @param {!Task} task
     * @param {number} priority
     * @private
     */

  }, {
    key: 'enqueueTask_',
    value: function enqueueTask_(task, priority) {
      var _this3 = this;

      this.tasks_.enqueue(task, priority);
      resolved.then(function () {
        _this3.schedule_();
      });
    }

    /**
     * Returns the next task that hasn't been run yet.
     * If `opt_dequeue` is true, remove the returned task from the queue.
     * @param {boolean=} opt_dequeue
     * @return {?Task}
     * @private
     */

  }, {
    key: 'nextTask_',
    value: function nextTask_(opt_dequeue) {
      var t = this.tasks_.peek();
      // Dequeue tasks until we find one that hasn't been run yet.
      while (t && t.state !== TaskState.NOT_RUN) {
        this.tasks_.dequeue();
        t = this.tasks_.peek();
      }
      // If `opt_dequeue` is true, remove this task from the queue.
      if (t && opt_dequeue) {
        this.tasks_.dequeue();
      }
      return t;
    }

    /**
     * Run a task.
     * Schedule the next round if there are more tasks.
     * @param {?IdleDeadline} idleDeadline
     * @return {boolean} Whether anything was executed.
     * @private
     */

  }, {
    key: 'execute_',
    value: function execute_(idleDeadline) {
      var _this4 = this;

      var t = this.nextTask_( /* opt_dequeue */true);
      if (!t) {
        return false;
      }
      var before = Date.now();
      t.runTask_(idleDeadline);
      resolved.then(function () {
        _this4.schedule_();
      });
      (0, _log.dev)().fine(TAG, t.getName_(), 'Chunk duration', Date.now() - before);
      return true;
    }

    /**
     * Calls `execute_()` asynchronously.
     * @param {?IdleDeadline} idleDeadline
     * @private
     */

  }, {
    key: 'executeAsap_',
    value: function executeAsap_(idleDeadline) {
      var _this5 = this;

      resolved.then(function () {
        _this5.boundExecute_(idleDeadline);
      });
    }

    /**
     * Schedule running the next queued task.
     * @private
     */

  }, {
    key: 'schedule_',
    value: function schedule_() {
      var nextTask = this.nextTask_();
      if (!nextTask) {
        return;
      }
      if (nextTask.immediateTriggerCondition_()) {
        this.executeAsap_( /* idleDeadline */null);
        return;
      }
      // If requestIdleCallback exists, schedule a task with it, but
      // do not wait longer than two seconds.
      if (nextTask.useRequestIdleCallback_() && this.win_.requestIdleCallback) {
        onIdle(this.win_,
        // Wait until we have a budget of at least 15ms.
        // 15ms is a magic number. Budgets are higher when the user
        // is completely idle (around 40), but that occurs too
        // rarely to be usable. 15ms budgets can happen during scrolling
        // but only if the device is doing super, super well, and no
        // real processing is done between frames.
        15 /* minimumTimeRemaining */
        , 2000 /* timeout */
        , this.boundExecute_);
        return;
      }
      // The message doesn't actually matter.
      this.win_.postMessage /*OK*/('amp-macro-task', '*');
    }
  }]);

  return Chunks;
}();

/**
 * Delays calling the given function until the browser is notifying us
 * about a certain minimum budget or the timeout is reached.
 * @param {!Window} win
 * @param {number} minimumTimeRemaining Minimum number of millis idle
 *     budget for callback to fire.
 * @param {number} timeout in millis for callback to fire.
 * @param {function(?IdleDeadline)} fn Callback.
 * @visibleForTesting
 */


function onIdle(win, minimumTimeRemaining, timeout, fn) {
  var startTime = Date.now();
  /**
   * @param {!IdleDeadline} info
   */
  function rIC(info) {
    if (info.timeRemaining() < minimumTimeRemaining) {
      var remainingTimeout = timeout - (Date.now() - startTime);
      if (remainingTimeout <= 0 || info.didTimeout) {
        (0, _log.dev)().fine(TAG, 'Timed out', timeout, info.didTimeout);
        fn(info);
      } else {
        (0, _log.dev)().fine(TAG, 'Rescheduling with', remainingTimeout, info.timeRemaining());
        win.requestIdleCallback(rIC, { timeout: remainingTimeout });
      }
    } else {
      (0, _log.dev)().fine(TAG, 'Running idle callback with ', minimumTimeRemaining);
      fn(info);
    }
  }
  win.requestIdleCallback(rIC, { timeout: timeout });
}

},{"./event-helper":27,"./log":45,"./service":63,"./services":104,"./style-installer":109,"./utils/priority-queue":124}],15:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Commonly used signals across different elements and documents.
 * @enum {string}
 */
var CommonSignals = exports.CommonSignals = {

  /**
   * The element has been built.
   */
  BUILT: 'built',

  /**
   * The initial contents of an element/document/embed have been loaded.
   */
  INI_LOAD: 'ini-load',

  /**
   * The element has been loaded.
   */
  LOAD_END: 'load-end',

  /**
   * The element has started loading.
   */
  LOAD_START: 'load-start',

  /**
   * Rendering has been confirmed to have been started.
   */
  RENDER_START: 'render-start',

  /**
   * The element has been unlaid out.
   */
  UNLOAD: 'unload'
};

},{}],16:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Allows for runtime configuration. Internally, the runtime should
 * use the src/config.js module for various constants. We can use the
 * AMP_CONFIG global to translate user-defined configurations to this
 * module.
 * @type {!Object<string, string>}
 */
var env = self.AMP_CONFIG || {};

var thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ? new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];

var cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ? new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];

/** @type {!Object<string, string|boolean|RegExp>} */
var urls = exports.urls = {
  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',
  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',
  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\d+\.ampproject\.net$/,
  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',
  /* Note that cdnProxyRegex is only ever checked against origins
   * (proto://host[:port]) so does not need to consider path
   */
  cdnProxyRegex: cdnProxyRegex || /^https:\/\/([a-zA-Z0-9_-]+\.)?cdn\.ampproject\.org$/,
  localhostRegex: /^https?:\/\/localhost(:\d+)?$/,
  errorReporting: env['errorReportingUrl'] || 'https://amp-error-reporting.appspot.com/r',
  localDev: env['localDev'] || false
};

var config = exports.config = {
  urls: urls
};

},{}],17:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCookie = getCookie;
exports.setCookie = setCookie;

var _string = require('./string');

var _url = require('./url');

var _config = require('./config');

/**
 * Returns the value of the cookie. The cookie access is restricted and must
 * go through the privacy review. Before using this method please file a
 * GitHub issue with "Privacy Review" label.
 *
 * Returns the cookie's value or `null`.
 *
 * @param {!Window} win
 * @param {string} name
 * @return {?string}
 */
function getCookie(win, name) {
  var cookieString = tryGetDocumentCookieNoInline(win);
  if (!cookieString) {
    return null;
  }
  var cookies = cookieString.split(';');
  for (var i = 0; i < cookies.length; i++) {
    var cookie = cookies[i].trim();
    var eq = cookie.indexOf('=');
    if (eq == -1) {
      continue;
    }
    if ((0, _url.tryDecodeUriComponent)(cookie.substring(0, eq).trim()) == name) {
      var value = cookie.substring(eq + 1).trim();
      return (0, _url.tryDecodeUriComponent)(value, value);
    }
  }
  return null;
}

/**
 * This method should not be inlined to prevent TryCatch deoptimization.
 * NoInline keyword at the end of function name also prevents Closure compiler
 * from inlining the function.
 * @param {!Window} win
 * @return {string}
 */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function tryGetDocumentCookieNoInline(win) {
  try {
    return win.document.cookie;
  } catch (e) {
    // Act as if no cookie is available. Exceptions can be thrown when
    // AMP docs are opened on origins that do not allow setting
    // cookies such as null origins.
    return '';
  }
}

/**
 * Sets the value of the cookie. The cookie access is restricted and must
 * go through the privacy review. Before using this method please file a
 * GitHub issue with "Privacy Review" label.
 *
 * @param {!Window} win
 * @param {string} name
 * @param {string} value
 * @param {time} expirationTime
 * @param {{
 *   highestAvailableDomain:(boolean|undefined),
 *   domain:(string|undefined)
 * }=} opt_options
 *     - highestAvailableDomain: If true, set the cookie at the widest domain
 *       scope allowed by the browser. E.g. on example.com if we are currently
 *       on www.example.com.
 *     - domain: Explicit domain to set.
 *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.
 */
function setCookie(win, name, value, expirationTime, opt_options) {
  checkOriginForSettingCookie(win, opt_options, name);
  if (opt_options && opt_options.highestAvailableDomain) {
    var parts = win.location.hostname.split('.');
    var _domain = parts[parts.length - 1];
    for (var i = parts.length - 2; i >= 0; i--) {
      _domain = parts[i] + '.' + _domain;
      trySetCookie(win, name, value, expirationTime, _domain);
      if (getCookie(win, name) == value) {
        return;
      }
    }
  }
  var domain = undefined;
  if (opt_options && opt_options.domain) {
    domain = opt_options.domain;
  }
  trySetCookie(win, name, value, expirationTime, domain);
}

/**
 * Attempt to set a cookie with the given params.
 *
 * @param {!Window} win
 * @param {string} name
 * @param {string} value
 * @param {time} expirationTime
 * @param {string|undefined} domain
 */
function trySetCookie(win, name, value, expirationTime, domain) {
  // We do not allow setting cookies on the domain that contains both
  // the cdn. and www. hosts.
  if (domain == 'ampproject.org') {
    // Actively delete them.
    value = 'delete';
    expirationTime = 0;
  }
  var cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + '; path=/' + (domain ? '; domain=' + domain : '') + '; expires=' + new Date(expirationTime).toUTCString();
  try {
    win.document.cookie = cookie;
  } catch (ignore) {
    // Do not throw if setting the cookie failed Exceptions can be thrown
    // when AMP docs are opened on origins that do not allow setting
    // cookies such as null origins.
  }
}

/**
 * Throws if a given cookie should not be set on the given origin.
 * This is a defense-in-depth. Callers should never run into this.
 *
 * @param {!Window} win
 * @param {!Object|undefined} options
 * @param {string} name For the error message.
 */
function checkOriginForSettingCookie(win, options, name) {
  if (options && options.allowOnProxyOrigin) {
    return;
  }
  if ((0, _url.isProxyOrigin)(win.location.href)) {
    throw new Error('Should never attempt to set cookie on proxy origin: ' + name);
  }

  var current = (0, _url.parseUrlDeprecated)(win.location.href).hostname.toLowerCase();
  var proxy = (0, _url.parseUrlDeprecated)(_config.urls.cdn).hostname.toLowerCase();
  if (current == proxy || (0, _string.endsWith)(current, '.' + proxy)) {
    throw new Error('Should never attempt to set cookie on proxy origin.' + ' (in depth check): ' + name);
  }
}

},{"./config":16,"./string":108,"./url":116}],18:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Curves = exports.CurveDef = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and
limitations under the License.


// Imported just for the side effect of getting the `types` it exports into
// the type system during compile time.


exports.bezierCurve = bezierCurve;
exports.getCurve = getCurve;

require('./time');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A CurveDef is a function that returns a normtime value (0 to 1) for another
 * normtime value.
 * @typedef {function(./time.normtimeDef): ./time.normtimeDef}
 */
var CurveDef = exports.CurveDef = void 0;

/**
 * Returns a cubic bezier curve.
 * @param {number} x1 X coordinate of the first control point.
 * @param {number} y1 Y coordinate of the first control point.
 * @param {number} x2 X coordinate of the second control point.
 * @param {number} y2 Y coordinate of the second control point.
 * @return {!CurveDef}
 */
function bezierCurve(x1, y1, x2, y2) {
  var bezier = new Bezier(0, 0, x1, y1, x2, y2, 1, 1);
  return bezier.solveYValueFromXValue.bind(bezier);
}

/**
 * Thanks to
 * https://closure-library.googlecode.com/git-history/docs/local_closure_goog_math_bezier.js.source.html
 */

var Bezier = function () {

  /**
   * @param {number} x0 X coordinate of the start point.
   * @param {number} y0 Y coordinate of the start point.
   * @param {number} x1 X coordinate of the first control point.
   * @param {number} y1 Y coordinate of the first control point.
   * @param {number} x2 X coordinate of the second control point.
   * @param {number} y2 Y coordinate of the second control point.
   * @param {number} x3 X coordinate of the end point.
   * @param {number} y3 Y coordinate of the end point.
   */
  function Bezier(x0, y0, x1, y1, x2, y2, x3, y3) {
    _classCallCheck(this, Bezier);

    /**
     * X coordinate of the first point.
     * @type {number}
     */
    this.x0 = x0;

    /**
     * Y coordinate of the first point.
     * @type {number}
     */
    this.y0 = y0;

    /**
     * X coordinate of the first control point.
     * @type {number}
     */
    this.x1 = x1;

    /**
     * Y coordinate of the first control point.
     * @type {number}
     */
    this.y1 = y1;

    /**
     * X coordinate of the second control point.
     * @type {number}
     */
    this.x2 = x2;

    /**
     * Y coordinate of the second control point.
     * @type {number}
     */
    this.y2 = y2;

    /**
     * X coordinate of the end point.
     * @type {number}
     */
    this.x3 = x3;

    /**
     * Y coordinate of the end point.
     * @type {number}
     */
    this.y3 = y3;
  }

  /**
   * Computes the y coordinate of a point on the curve given its x coordinate.
   * @param {number} xVal The x coordinate of the point on the curve.
   * @return {number} The y coordinate of the point on the curve.
   */


  _createClass(Bezier, [{
    key: 'solveYValueFromXValue',
    value: function solveYValueFromXValue(xVal) {
      return this.getPointY(this.solvePositionFromXValue(xVal));
    }

    /**
     * Computes the position t of a point on the curve given its x coordinate.
     * That is, for an input xVal, finds t s.t. getPointX(t) = xVal.
     * As such, the following should always be true up to some small epsilon:
     * t ~ solvePositionFromXValue(getPointX(t)) for t in [0, 1].
     * @param {number} xVal The x coordinate of the point to find on the curve.
     * @return {number} The position t.
     */

  }, {
    key: 'solvePositionFromXValue',
    value: function solvePositionFromXValue(xVal) {
      // Desired precision on the computation.
      var epsilon = 1e-6;

      // Initial estimate of t using linear interpolation.
      var t = (xVal - this.x0) / (this.x3 - this.x0);
      if (t <= 0) {
        return 0;
      } else if (t >= 1) {
        return 1;
      }

      // Try gradient descent to solve for t. If it works, it is very fast.
      var tMin = 0;
      var tMax = 1;
      var value = 0;
      for (var i = 0; i < 8; i++) {
        value = this.getPointX(t);
        var derivative = (this.getPointX(t + epsilon) - value) / epsilon;
        if (Math.abs(value - xVal) < epsilon) {
          return t;
        } else if (Math.abs(derivative) < epsilon) {
          break;
        } else {
          if (value < xVal) {
            tMin = t;
          } else {
            tMax = t;
          }
          t -= (value - xVal) / derivative;
        }
      }

      // If the gradient descent got stuck in a local minimum, e.g. because
      // the derivative was close to 0, use a Dichotomy refinement instead.
      // We limit the number of iterations to 8.
      for (var _i = 0; Math.abs(value - xVal) > epsilon && _i < 8; _i++) {
        if (value < xVal) {
          tMin = t;
          t = (t + tMax) / 2;
        } else {
          tMax = t;
          t = (t + tMin) / 2;
        }
        value = this.getPointX(t);
      }
      return t;
    }

    /**
     * Computes the curve's X coordinate at a point between 0 and 1.
     * @param {number} t The point on the curve to find.
     * @return {number} The computed coordinate.
     */

  }, {
    key: 'getPointX',
    value: function getPointX(t) {
      // Special case start and end.
      if (t == 0) {
        return this.x0;
      } else if (t == 1) {
        return this.x3;
      }

      // Step one - from 4 points to 3
      var ix0 = this.lerp(this.x0, this.x1, t);
      var ix1 = this.lerp(this.x1, this.x2, t);
      var ix2 = this.lerp(this.x2, this.x3, t);

      // Step two - from 3 points to 2
      ix0 = this.lerp(ix0, ix1, t);
      ix1 = this.lerp(ix1, ix2, t);

      // Final step - last point
      return this.lerp(ix0, ix1, t);
    }

    /**
     * Computes the curve's Y coordinate at a point between 0 and 1.
     * @param {number} t The point on the curve to find.
     * @return {number} The computed coordinate.
     */

  }, {
    key: 'getPointY',
    value: function getPointY(t) {
      // Special case start and end.
      if (t == 0) {
        return this.y0;
      } else if (t == 1) {
        return this.y3;
      }

      // Step one - from 4 points to 3
      var iy0 = this.lerp(this.y0, this.y1, t);
      var iy1 = this.lerp(this.y1, this.y2, t);
      var iy2 = this.lerp(this.y2, this.y3, t);

      // Step two - from 3 points to 2
      iy0 = this.lerp(iy0, iy1, t);
      iy1 = this.lerp(iy1, iy2, t);

      // Final step - last point
      return this.lerp(iy0, iy1, t);
    }

    /**
     * Performs linear interpolation between values a and b. Returns the value
     * between a and b proportional to x (when x is between 0 and 1. When x is
     * outside this range, the return value is a linear extrapolation).
     * @param {number} a A number.
     * @param {number} b A number.
     * @param {number} x The proportion between a and b.
     * @return {number} The interpolated value between a and b.
     */

  }, {
    key: 'lerp',
    value: function lerp(a, b, x) {
      return a + x * (b - a);
    }
  }]);

  return Bezier;
}();

/**
 * A collection of common curves.
 * See https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function
 * @enum {!CurveDef}
 */


var Curves = exports.Curves = {
  /**
   * linear
   * @param {number} n
   * @return {number}
   */
  LINEAR: function LINEAR(n) {
    return n;
  },


  /**
   * ease
   */
  EASE: bezierCurve(0.25, 0.1, 0.25, 1.0),

  /**
   * ease-in: slow out, fast in
   */
  EASE_IN: bezierCurve(0.42, 0.0, 1.0, 1.0),

  /**
   * ease-out: fast out, slow in
   */
  EASE_OUT: bezierCurve(0.0, 0.0, 0.58, 1.0),

  /**
   * ease-in-out
   */
  EASE_IN_OUT: bezierCurve(0.42, 0.0, 0.58, 1.0)
};

/**
 * @const {!Object<string, !CurveDef>}
 */
var NAME_MAP = {
  'linear': Curves.LINEAR,
  'ease': Curves.EASE,
  'ease-in': Curves.EASE_IN,
  'ease-out': Curves.EASE_OUT,
  'ease-in-out': Curves.EASE_IN_OUT
};

/**
 * If the argument is a string, this methods matches an existing curve by name.
 * @param {?CurveDef|string|undefined} curve
 * @return {?CurveDef}
 */
function getCurve(curve) {
  if (!curve) {
    return null;
  }
  if (typeof curve == 'string') {
    // If the curve is a custom cubic-bezier curve
    if (curve.indexOf('cubic-bezier') != -1) {
      var match = curve.match(/cubic-bezier\((.+)\)/);
      if (match) {
        var values = match[1].split(',').map(parseFloat);
        if (values.length == 4) {
          for (var i = 0; i < 4; i++) {
            if (isNaN(values[i])) {
              return null;
            }
          }
          return bezierCurve(values[0], values[1], values[2], values[3]);
        }
      }
      return null;
    }
    return NAME_MAP[curve];
  }
  return curve;
}

},{"./time":111}],19:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\n            <div class="i-amphtml-loading-container i-amphtml-fill-content\n              amp-hidden"></div>'], ['\n            <div class="i-amphtml-loading-container i-amphtml-fill-content\n              amp-hidden"></div>']);

exports.createCustomElementClass = createCustomElementClass;
exports.createAmpElementForTesting = createAmpElementForTesting;

var _dom = require('./dom');

var dom = _interopRequireWildcard(_dom);

var _ampEvents = require('./amp-events');

var _commonSignals = require('./common-signals');

var _elementStub = require('./element-stub');

var _layout = require('./layout');

var _layoutDelayMeter = require('./layout-delay-meter');

var _resource = require('./service/resource');

var _services = require('./services');

var _signals = require('./utils/signals');

var _error = require('./error');

var _loader = require('../src/loader');

var _log = require('./log');

var _intersectionObserverPolyfill = require('../src/intersection-observer-polyfill');

var _mode = require('./mode');

var _staticTemplate = require('./static-template');

var _experiments = require('./experiments');

var _sizeList = require('./size-list');

var _style = require('./style');

var _types = require('./types');

var _promise = require('../src/utils/promise');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var TAG = 'CustomElement';

/**
 * This is the minimum width of the element needed to trigger `loading`
 * animation. This value is justified as about 1/3 of a smallish mobile
 * device viewport. Trying to put a loading indicator into a small element
 * is meaningless.
 * @private @const {number}
 */
var MIN_WIDTH_FOR_LOADING = 100;

/**
 * The elements positioned ahead of this threshold may have their loading
 * indicator initialized faster. This is benefitial to avoid relayout during
 * render phase or scrolling.
 * @private @const {number}
 */
var PREPARE_LOADING_THRESHOLD = 1000;

/**
 * @enum {number}
 */
var UpgradeState = {
  NOT_UPGRADED: 1,
  UPGRADED: 2,
  UPGRADE_FAILED: 3,
  UPGRADE_IN_PROGRESS: 4
};

/**
 * Caches whether the template tag is supported to avoid memory allocations.
 * @type {boolean|undefined}
 */
var templateTagSupported = void 0;

/**
 * Whether this platform supports template tags.
 * @return {boolean}
 */
function isTemplateTagSupported() {
  if (templateTagSupported === undefined) {
    var template = self.document.createElement('template');
    templateTagSupported = 'content' in template;
  }
  return templateTagSupported;
}

/**
 * Creates a named custom element class.
 *
 * @param {!Window} win The window in which to register the custom element.
 * @param {string} name The name of the custom element.
 * @return {!Function} The custom element class.
 */
function createCustomElementClass(win, name) {
  var baseCustomElement = createBaseCustomElementClass(win);
  /** @extends {HTMLElement} */

  var CustomAmpElement = function (_baseCustomElement) {
    _inherits(CustomAmpElement, _baseCustomElement);

    /**
     * @see https://github.com/WebReflection/document-register-element#v1-caveat
     * @suppress {checkTypes}
     * @param {HTMLElement} self
     */
    function CustomAmpElement(self) {
      var _this, _ret;

      _classCallCheck(this, CustomAmpElement);

      return _ret = (_this = _possibleConstructorReturn(this, (CustomAmpElement.__proto__ || Object.getPrototypeOf(CustomAmpElement)).call(this, self)), _this), _possibleConstructorReturn(_this, _ret);
    }
    /**
     * The name of the custom element.
     * @return {string}
     */


    _createClass(CustomAmpElement, [{
      key: 'elementName',
      value: function elementName() {
        return name;
      }
    }]);

    return CustomAmpElement;
  }(baseCustomElement);

  return CustomAmpElement;
}

/**
 * Creates a base custom element class.
 *
 * @param {!Window} win The window in which to register the custom element.
 * @return {!Function}
 */
function createBaseCustomElementClass(win) {
  if (win.BaseCustomElementClass) {
    return win.BaseCustomElementClass;
  }
  var htmlElement = win.HTMLElement;
  /** @abstract @extends {HTMLElement} */

  var BaseCustomElement = function (_htmlElement) {
    _inherits(BaseCustomElement, _htmlElement);

    /**
     * @see https://github.com/WebReflection/document-register-element#v1-caveat
     * @suppress {checkTypes}
     * @param {HTMLElement} self
     */
    function BaseCustomElement(self) {
      var _this2, _ret2;

      _classCallCheck(this, BaseCustomElement);

      self = (_this2 = _possibleConstructorReturn(this, (BaseCustomElement.__proto__ || Object.getPrototypeOf(BaseCustomElement)).call(this, self)), _this2);
      self.createdCallback();
      return _ret2 = self, _possibleConstructorReturn(_this2, _ret2);
    }

    /**
     * Called when elements is created. Sets instance vars since there is no
     * constructor.
     * @final @this {!Element}
     */


    _createClass(BaseCustomElement, [{
      key: 'createdCallback',
      value: function createdCallback() {
        // Flag "notbuilt" is removed by Resource manager when the resource is
        // considered to be built. See "setBuilt" method.
        /** @private {boolean} */
        this.built_ = false;

        /**
         * Several APIs require the element to be connected to the DOM tree, but
         * the CustomElement lifecycle APIs are async. This lead to subtle bugs
         * that require state tracking. See #12849, https://crbug.com/821195, and
         * https://bugs.webkit.org/show_bug.cgi?id=180940.
         * @private {boolean}
         */
        this.isConnected_ = false;

        /** @private {?Promise} */
        this.buildingPromise_ = null;

        /** @type {string} */
        this.readyState = 'loading';

        /** @type {boolean} */
        this.everAttached = false;

        /**
         * Ampdoc can only be looked up when an element is attached.
         * @private {?./service/ampdoc-impl.AmpDoc}
         */
        this.ampdoc_ = null;

        /**
         * Resources can only be looked up when an element is attached.
         * @private {?./service/resources-impl.Resources}
         */
        this.resources_ = null;

        /**
         * Layers can only be looked up when an element is attached.
         * @private {?./service/layers-impl.LayoutLayers}
         */
        this.layers_ = null;

        /** @private {!Layout} */
        this.layout_ = _layout.Layout.NODISPLAY;

        /** @private {number} */
        this.layoutWidth_ = -1;

        /** @private {number} */
        this.layoutCount_ = 0;

        /** @private {boolean} */
        this.isFirstLayoutCompleted_ = false;

        /** @private {boolean} */
        this.isInViewport_ = false;

        /** @private {boolean} */
        this.paused_ = false;

        /** @private {string|null|undefined} */
        this.mediaQuery_ = undefined;

        /** @private {!./size-list.SizeList|null|undefined} */
        this.sizeList_ = undefined;

        /** @private {!./size-list.SizeList|null|undefined} */
        this.heightsList_ = undefined;

        /** @public {boolean} */
        this.warnOnMissingOverflow = true;

        /**
         * This element can be assigned by the {@link applyStaticLayout} to a
         * child element that will be used to size this element.
         * @package {?Element|undefined}
         */
        this.sizerElement = undefined;

        /** @private {boolean|undefined} */
        this.loadingDisabled_ = undefined;

        /** @private {boolean|undefined} */
        this.loadingState_ = undefined;

        /** @private {?Element} */
        this.loadingContainer_ = null;

        /** @private {?Element} */
        this.loadingElement_ = null;

        /** @private {?Element|undefined} */
        this.overflowElement_ = undefined;

        // `opt_implementationClass` is only used for tests.
        var Ctor = win.ampExtendedElements && win.ampExtendedElements[this.elementName()];
        if ((0, _mode.getMode)().test && this.implementationClassForTesting) {
          Ctor = this.implementationClassForTesting;
        }
        (0, _log.dev)().assert(Ctor);
        /** @private {!./base-element.BaseElement} */
        this.implementation_ = new Ctor(this);

        /**
         * An element always starts in a unupgraded state until it's added to DOM
         * for the first time in which case it can be upgraded immediately or wait
         * for script download or `upgradeCallback`.
         * @private {!UpgradeState}
         */
        this.upgradeState_ = UpgradeState.NOT_UPGRADED;

        /**
         * Time delay imposed by baseElement upgradeCallback.  If no
         * upgradeCallback specified or not yet executed, delay is 0.
         * @private {number}
         */
        this.upgradeDelayMs_ = 0;

        /**
         * Action queue is initially created and kept around until the element
         * is ready to send actions directly to the implementation.
         * - undefined initially
         * - array if used
         * - null after unspun
         * @private {?Array<!./service/action-impl.ActionInvocation>|undefined}
         */
        this.actionQueue_ = undefined;

        /**
         * Whether the element is in the template.
         * @private {boolean|undefined}
         */
        this.isInTemplate_ = undefined;

        /** @private @const */
        this.signals_ = new _signals.Signals();

        var perf = _services.Services.performanceForOrNull(win);
        /** @private {boolean} */
        this.perfOn_ = perf && perf.isPerformanceTrackingOn();

        /** @private {?./layout-delay-meter.LayoutDelayMeter} */
        this.layoutDelayMeter_ = null;

        if (this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER]) {
          this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER](this);
          delete this[dom.UPGRADE_TO_CUSTOMELEMENT_RESOLVER];
          delete this[dom.UPGRADE_TO_CUSTOMELEMENT_PROMISE];
        }
      }

      /**
       * The name of the custom element.
       * @abstract
       * @return {string}
       */

    }, {
      key: 'elementName',
      value: function elementName() {}

      /** @return {!Signals} */

    }, {
      key: 'signals',
      value: function signals() {
        return this.signals_;
      }

      /**
       * Returns the associated ampdoc. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/ampdoc-impl.AmpDoc}
       * @final @this {!Element}
       * @package
       */

    }, {
      key: 'getAmpDoc',
      value: function getAmpDoc() {
        return (/** @type {!./service/ampdoc-impl.AmpDoc} */(0, _log.dev)().assert(this.ampdoc_, 'no ampdoc yet, since element is not attached')
        );
      }

      /**
       * Returns Resources manager. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/resources-impl.Resources}
       * @final @this {!Element}
       * @package
       */

    }, {
      key: 'getResources',
      value: function getResources() {
        return (/** @type {!./service/resources-impl.Resources} */(0, _log.dev)().assert(this.resources_, 'no resources yet, since element is not attached')
        );
      }

      /**
       * Returns LayoutLayers. Only available after attachment. It throws
       * exception before the element is attached.
       * @return {!./service/layers-impl.LayoutLayers}
       * @final @this {!Element}
       * @package
       */

    }, {
      key: 'getLayers',
      value: function getLayers() {
        return (/** @type {!./service/layers-impl.LayoutLayers} */(0, _log.dev)().assert(this.layers_, 'no layers yet, since element is not attached')
        );
      }

      /**
       * Whether the element has been upgraded yet. Always returns false when
       * the element has not yet been added to DOM. After the element has been
       * added to DOM, the value depends on the `BaseElement` implementation and
       * its `upgradeElement` callback.
       * @return {boolean}
       * @final @this {!Element}
       */

    }, {
      key: 'isUpgraded',
      value: function isUpgraded() {
        return this.upgradeState_ == UpgradeState.UPGRADED;
      }

      /**
       * Upgrades the element to the provided new implementation. If element
       * has already been attached, it's layout validation and attachment flows
       * are repeated for the new implementation.
       * @param {function(new:./base-element.BaseElement, !Element)} newImplClass
       * @final @package @this {!Element}
       */

    }, {
      key: 'upgrade',
      value: function upgrade(newImplClass) {
        if (this.isInTemplate_) {
          return;
        }
        if (this.upgradeState_ != UpgradeState.NOT_UPGRADED) {
          // Already upgraded or in progress or failed.
          return;
        }
        this.implementation_ = new newImplClass(this);
        if (this.everAttached) {
          // Usually, we do an implementation upgrade when the element is
          // attached to the DOM. But, if it hadn't yet upgraded from
          // ElementStub, we couldn't. Now that it's upgraded from a stub, go
          // ahead and do the full upgrade.
          this.tryUpgrade_();
        }
      }

      /**
       * Time delay imposed by baseElement upgradeCallback.  If no
       * upgradeCallback specified or not yet executed, delay is 0.
       * @return {number}
       */

    }, {
      key: 'getUpgradeDelayMs',
      value: function getUpgradeDelayMs() {
        return this.upgradeDelayMs_;
      }

      /**
       * Completes the upgrade of the element with the provided implementation.
       * @param {!./base-element.BaseElement} newImpl
       * @param {number} upgradeStartTime
       * @final @private @this {!Element}
       */

    }, {
      key: 'completeUpgrade_',
      value: function completeUpgrade_(newImpl, upgradeStartTime) {
        this.upgradeDelayMs_ = win.Date.now() - upgradeStartTime;
        this.upgradeState_ = UpgradeState.UPGRADED;
        this.implementation_ = newImpl;
        this.classList.remove('amp-unresolved');
        this.classList.remove('i-amphtml-unresolved');
        this.implementation_.createdCallback();
        this.assertLayout_();
        this.implementation_.layout_ = this.layout_;
        this.implementation_.layoutWidth_ = this.layoutWidth_;
        this.implementation_.firstAttachedCallback();
        this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ATTACHED);
        this.getResources().upgraded(this);
      }

      /** @private */

    }, {
      key: 'assertLayout_',
      value: function assertLayout_() {
        if (this.layout_ != _layout.Layout.NODISPLAY && !this.implementation_.isLayoutSupported(this.layout_)) {
          var error = 'Layout not supported: ' + this.layout_;
          if (!this.getAttribute('layout')) {
            error += '. The element did not specify a layout attribute. ' + 'Check https://www.ampproject.org/docs/guides/' + 'responsive/control_layout and the respective element ' + 'documentation for details.';
          }
          throw (0, _log.user)().createError(error);
        }
      }

      /**
       * Whether the element has been built. A built element had its
       * {@link buildCallback} method successfully invoked.
       * @return {boolean}
       * @final @this {!Element}
       */

    }, {
      key: 'isBuilt',
      value: function isBuilt() {
        return this.built_;
      }

      /**
       * Returns the promise that's resolved when the element has been built. If
       * the build fails, the resulting promise is rejected.
       * @return {!Promise}
       */

    }, {
      key: 'whenBuilt',
      value: function whenBuilt() {
        return this.signals_.whenSignal(_commonSignals.CommonSignals.BUILT);
      }

      /**
       * Get the priority to load the element.
       * @return {number} @this {!Element}
       */

    }, {
      key: 'getLayoutPriority',
      value: function getLayoutPriority() {
        (0, _log.dev)().assert(this.isUpgraded(), 'Cannot get priority of unupgraded element');
        return this.implementation_.getLayoutPriority();
      }

      /**
       * Requests or requires the element to be built. The build is done by
       * invoking {@link BaseElement.buildCallback} method.
       *
       * This method can only be called on a upgraded element.
       *
       * @return {?Promise}
       * @final @this {!Element}
       */

    }, {
      key: 'build',
      value: function build() {
        var _this3 = this;

        assertNotTemplate(this);
        (0, _log.dev)().assert(this.isUpgraded(), 'Cannot build unupgraded element');
        if (this.buildingPromise_) {
          return this.buildingPromise_;
        }
        return this.buildingPromise_ = new Promise(function (resolve, reject) {
          var policyId = _this3.getConsentPolicy_();
          if (!policyId) {
            resolve(_this3.implementation_.buildCallback());
          } else {
            _services.Services.consentPolicyServiceForDocOrNull(_this3.getAmpDoc()).then(function (consentPolicy) {
              if (!consentPolicy) {
                return true;
              }
              return consentPolicy.whenPolicyUnblock(
              /** @type {string} */policyId);
            }).then(function (shouldUnblock) {
              if (shouldUnblock == true) {
                resolve(_this3.implementation_.buildCallback());
              } else {
                reject((0, _error.blockedByConsentError)());
              }
            });
          }
        }).then(function () {
          _this3.preconnect( /* onLayout */false);
          _this3.built_ = true;
          _this3.classList.remove('i-amphtml-notbuilt');
          _this3.classList.remove('amp-notbuilt');
          _this3.signals_.signal(_commonSignals.CommonSignals.BUILT);
          if (_this3.isInViewport_) {
            _this3.updateInViewport_(true);
          }
          if (_this3.actionQueue_) {
            // Only schedule when the queue is not empty, which should be
            // the case 99% of the time.
            _services.Services.timerFor((0, _types.toWin)(_this3.ownerDocument.defaultView)).delay(_this3.dequeueActions_.bind(_this3), 1);
          }
          if (!_this3.getPlaceholder()) {
            var placeholder = _this3.createPlaceholder();
            if (placeholder) {
              _this3.appendChild(placeholder);
            }
          }
        }, function (reason) {
          _this3.signals_.rejectSignal(_commonSignals.CommonSignals.BUILT,
          /** @type {!Error} */reason);
          if (!(0, _error.isBlockedByConsent)(reason)) {
            (0, _error.reportError)(reason, _this3);
          }
          throw reason;
        });
      }

      /**
       * Called to instruct the element to preconnect to hosts it uses during
       * layout.
       * @param {boolean} onLayout Whether this was called after a layout.
       * @this {!Element}
       */

    }, {
      key: 'preconnect',
      value: function preconnect(onLayout) {
        var _this4 = this;

        if (onLayout) {
          this.implementation_.preconnectCallback(onLayout);
        } else {
          // If we do early preconnects we delay them a bit. This is kind of
          // an unfortunate trade off, but it seems faster, because the DOM
          // operations themselves are not free and might delay
          _services.Services.timerFor((0, _types.toWin)(this.ownerDocument.defaultView)).delay(function () {
            var TAG = _this4.tagName;
            if (!_this4.ownerDocument) {
              (0, _log.dev)().error(TAG, 'preconnect without ownerDocument');
              return;
            } else if (!_this4.ownerDocument.defaultView) {
              (0, _log.dev)().error(TAG, 'preconnect without defaultView');
              return;
            }
            _this4.implementation_.preconnectCallback(onLayout);
          }, 1);
        }
      }

      /**
       * Whether the custom element declares that it has to be fixed.
       * @return {boolean}
       * @this {!Element}
       */

    }, {
      key: 'isAlwaysFixed',
      value: function isAlwaysFixed() {
        return this.implementation_.isAlwaysFixed();
      }

      /**
       * Updates the layout box of the element.
       * See {@link BaseElement.getLayoutWidth} for details.
       * @param {!./layout-rect.LayoutRectDef} layoutBox
       * @param {boolean=} opt_measurementsChanged
       * @this {!Element}
       */

    }, {
      key: 'updateLayoutBox',
      value: function updateLayoutBox(layoutBox, opt_measurementsChanged) {
        var _this5 = this;

        this.layoutWidth_ = layoutBox.width;
        if (this.isUpgraded()) {
          this.implementation_.layoutWidth_ = this.layoutWidth_;
        }
        if (this.isBuilt()) {
          try {
            this.implementation_.onLayoutMeasure();
            if (opt_measurementsChanged) {
              this.implementation_.onMeasureChanged();
            }
          } catch (e) {
            (0, _error.reportError)(e, this);
          }
        }

        if (this.isLoadingEnabled_()) {
          if (this.isInViewport_) {
            // Already in viewport - start showing loading.
            this.toggleLoading(true);
          } else if (layoutBox.top < PREPARE_LOADING_THRESHOLD && layoutBox.top >= 0) {
            // Few top elements will also be pre-initialized with a loading
            // element.
            this.mutateOrInvoke_(function () {
              return _this5.prepareLoading_();
            });
          }
        }
      }

      /**
       * @return {?Element}
       * @private
       */

    }, {
      key: 'getSizer_',
      value: function getSizer_() {
        if (this.sizerElement === undefined && this.layout_ === _layout.Layout.RESPONSIVE) {
          // Expect sizer to exist, just not yet discovered.
          this.sizerElement = this.querySelector('i-amphtml-sizer');
        }
        return this.sizerElement || null;
      }

      /**
       * If the element has a media attribute, evaluates the value as a media
       * query and based on the result adds or removes the class
       * `i-amphtml-hidden-by-media-query`. The class adds display:none to the
       * element which in turn prevents any of the resource loading to happen for
       * the element.
       *
       * This method is called by Resources and shouldn't be called by anyone
       * else.
       *
       * @final
       * @package @this {!Element}
       */

    }, {
      key: 'applySizesAndMediaQuery',
      value: function applySizesAndMediaQuery() {
        assertNotTemplate(this);

        // Media query.
        if (this.mediaQuery_ === undefined) {
          this.mediaQuery_ = this.getAttribute('media') || null;
        }
        if (this.mediaQuery_) {
          var defaultView = this.ownerDocument.defaultView;

          this.classList.toggle('i-amphtml-hidden-by-media-query', !defaultView.matchMedia(this.mediaQuery_).matches);
        }

        // Sizes.
        if (this.sizeList_ === undefined) {
          var sizesAttr = this.getAttribute('sizes');
          this.sizeList_ = sizesAttr ? (0, _sizeList.parseSizeList)(sizesAttr) : null;
        }
        if (this.sizeList_) {
          (0, _style.setStyle)(this, 'width', this.sizeList_.select((0, _types.toWin)(this.ownerDocument.defaultView)));
        }
        // Heights.
        if (this.heightsList_ === undefined && this.layout_ === _layout.Layout.RESPONSIVE) {
          var heightsAttr = this.getAttribute('heights');
          this.heightsList_ = heightsAttr ? (0, _sizeList.parseSizeList)(heightsAttr, /* allowPercent */true) : null;
        }
        if (this.heightsList_) {
          var sizer = this.getSizer_();
          if (sizer) {
            (0, _style.setStyle)(sizer, 'paddingTop', this.heightsList_.select((0, _types.toWin)(this.ownerDocument.defaultView)));
          }
        }
      }

      /**
       * Changes the size of the element.
       *
       * This method is called by Resources and shouldn't be called by anyone
       * else. This method must always be called in the mutation context.
       *
       * @param {number|undefined} newHeight
       * @param {number|undefined} newWidth
       * @param {!./layout-rect.LayoutMarginsDef=} opt_newMargins
       * @final
       * @package @this {!Element}
       */

    }, {
      key: 'changeSize',
      value: function changeSize(newHeight, newWidth, opt_newMargins) {
        var sizer = this.getSizer_();
        if (sizer) {
          // From the moment height is changed the element becomes fully
          // responsible for managing its height. Aspect ratio is no longer
          // preserved.
          this.sizerElement = null;
          (0, _style.setStyle)(sizer, 'paddingTop', '0');
          this.mutateOrInvoke_(function () {
            dom.removeElement(sizer);
          });
        }
        if (newHeight !== undefined) {
          (0, _style.setStyle)(this, 'height', newHeight, 'px');
        }
        if (newWidth !== undefined) {
          (0, _style.setStyle)(this, 'width', newWidth, 'px');
        }
        if (opt_newMargins) {
          if (opt_newMargins.top != null) {
            (0, _style.setStyle)(this, 'marginTop', opt_newMargins.top, 'px');
          }
          if (opt_newMargins.right != null) {
            (0, _style.setStyle)(this, 'marginRight', opt_newMargins.right, 'px');
          }
          if (opt_newMargins.bottom != null) {
            (0, _style.setStyle)(this, 'marginBottom', opt_newMargins.bottom, 'px');
          }
          if (opt_newMargins.left != null) {
            (0, _style.setStyle)(this, 'marginLeft', opt_newMargins.left, 'px');
          }
        }
        if (this.isAwaitingSize_()) {
          this.sizeProvided_();
        }
      }

      /**
       * Called when the element is first connected to the DOM. Calls
       * {@link firstAttachedCallback} if this is the first attachment.
       * @final @this {!Element}
       */

    }, {
      key: 'connectedCallback',
      value: function connectedCallback() {
        // Chrome and Safari can trigger connectedCallback even when the node is
        // disconnected. See #12849, https://crbug.com/821195, and
        // https://bugs.webkit.org/show_bug.cgi?id=180940. Thankfully,
        // connectedCallback will later be called when the disconnected root is
        // connected to the document tree.
        if (this.isConnected_ || !dom.isConnectedNode(this)) {
          return;
        }
        this.isConnected_ = true;

        if (!this.everAttached) {
          this.classList.add('i-amphtml-element');
          this.classList.add('i-amphtml-notbuilt');
          this.classList.add('amp-notbuilt');
        }

        if (!isTemplateTagSupported() && this.isInTemplate_ === undefined) {
          this.isInTemplate_ = !!dom.closestByTag(this, 'template');
        }
        if (this.isInTemplate_) {
          return;
        }
        if (!this.ampdoc_) {
          // Ampdoc can now be initialized.
          var _win = (0, _types.toWin)(this.ownerDocument.defaultView);
          var ampdocService = _services.Services.ampdocServiceFor(_win);
          var ampdoc = ampdocService.getAmpDoc(this);
          this.ampdoc_ = ampdoc;
          // Load the pre-stubbed extension if needed.
          var extensionId = this.tagName.toLowerCase();
          if (isStub(this.implementation_) && !ampdoc.declaresExtension(extensionId)) {
            _services.Services.extensionsFor(_win).installExtensionForDoc(ampdoc, extensionId);
          }
        }
        if (!this.resources_) {
          // Resources can now be initialized since the ampdoc is now available.
          this.resources_ = _services.Services.resourcesForDoc(this.ampdoc_);
        }
        if ((0, _experiments.isExperimentOn)(this.ampdoc_.win, 'layers')) {
          if (!this.layers_) {
            // Resources can now be initialized since the ampdoc is now available.
            this.layers_ = _services.Services.layersForDoc(this.ampdoc_);
          }
          this.getLayers().add(this);
        }
        this.getResources().add(this);

        if (this.everAttached) {
          var reconstruct = this.reconstructWhenReparented();
          if (reconstruct) {
            this.reset_();
          }
          if (this.isUpgraded()) {
            if (reconstruct) {
              this.getResources().upgraded(this);
            }
            this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ATTACHED);
          }
        } else {
          this.everAttached = true;

          try {
            this.layout_ = (0, _layout.applyStaticLayout)(this);
          } catch (e) {
            (0, _error.reportError)(e, this);
          }
          if (!isStub(this.implementation_)) {
            this.tryUpgrade_();
          }
          if (!this.isUpgraded()) {
            this.classList.add('amp-unresolved');
            this.classList.add('i-amphtml-unresolved');
            // amp:attached is dispatched from the ElementStub class when it
            // replayed the firstAttachedCallback call.
            this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.STUBBED);
          }
        }
      }

      /**
       * @return {boolean}
       * @private
       */

    }, {
      key: 'isAwaitingSize_',
      value: function isAwaitingSize_() {
        return this.classList.contains('i-amphtml-layout-awaiting-size');
      }

      /**
       * @private
       */

    }, {
      key: 'sizeProvided_',
      value: function sizeProvided_() {
        this.classList.remove('i-amphtml-layout-awaiting-size');
      }

      /** The Custom Elements V0 sibling to `connectedCallback`. */

    }, {
      key: 'attachedCallback',
      value: function attachedCallback() {
        this.connectedCallback();
      }

      /**
       * Try to upgrade the element with the provided implementation.
       * @private @final @this {!Element}
       */

    }, {
      key: 'tryUpgrade_',
      value: function tryUpgrade_() {
        var _this6 = this;

        var impl = this.implementation_;
        (0, _log.dev)().assert(!isStub(impl), 'Implementation must not be a stub');
        if (this.upgradeState_ != UpgradeState.NOT_UPGRADED) {
          // Already upgraded or in progress or failed.
          return;
        }

        // The `upgradeCallback` only allows redirect once for the top-level
        // non-stub class. We may allow nested upgrades later, but they will
        // certainly be bad for performance.
        this.upgradeState_ = UpgradeState.UPGRADE_IN_PROGRESS;
        var startTime = win.Date.now();
        var res = impl.upgradeCallback();
        if (!res) {
          // Nothing returned: the current object is the upgraded version.
          this.completeUpgrade_(impl, startTime);
        } else if (typeof res.then == 'function') {
          // It's a promise: wait until it's done.
          res.then(function (upgrade) {
            _this6.completeUpgrade_(upgrade || impl, startTime);
          }).catch(function (reason) {
            _this6.upgradeState_ = UpgradeState.UPGRADE_FAILED;
            (0, _log.rethrowAsync)(reason);
          });
        } else {
          // It's an actual instance: upgrade immediately.
          this.completeUpgrade_(
          /** @type {!./base-element.BaseElement} */res, startTime);
        }
      }

      /**
       * Called when the element is disconnected from the DOM.
       * @final @this {!Element}
       */

    }, {
      key: 'disconnectedCallback',
      value: function disconnectedCallback() {
        if (this.isInTemplate_) {
          return;
        }
        if (!this.isConnected_ || dom.isConnectedNode(this)) {
          return;
        }
        this.isConnected_ = false;
        this.getResources().remove(this);
        this.implementation_.detachedCallback();
      }

      /** The Custom Elements V0 sibling to `disconnectedCallback`. */

    }, {
      key: 'detachedCallback',
      value: function detachedCallback() {
        this.disconnectedCallback();
      }

      /**
       * Dispatches a custom event.
       *
       * @param {string} name
       * @param {!Object=} opt_data Event data.
       * @final @this {!Element}
       */

    }, {
      key: 'dispatchCustomEvent',
      value: function dispatchCustomEvent(name, opt_data) {
        var data = opt_data || {};
        // Constructors of events need to come from the correct window. Sigh.
        var event = this.ownerDocument.createEvent('Event');
        event.data = data;
        event.initEvent(name, /* bubbles */true, /* cancelable */true);
        this.dispatchEvent(event);
      }

      /**
       * Dispatches a custom event only in testing environment.
       *
       * @param {string} name
       * @param {!Object=} opt_data Event data.
       * @final @this {!Element}
       */

    }, {
      key: 'dispatchCustomEventForTesting',
      value: function dispatchCustomEventForTesting(name, opt_data) {
        if (!(0, _mode.getMode)().test) {
          return;
        }
        this.dispatchCustomEvent(name, opt_data);
      }

      /**
       * Whether the element can pre-render.
       * @return {boolean}
       * @final @this {!Element}
       */

    }, {
      key: 'prerenderAllowed',
      value: function prerenderAllowed() {
        return this.implementation_.prerenderAllowed();
      }

      /**
       * Creates a placeholder for the element.
       * @return {?Element}
       * @final @this {!Element}
       */

    }, {
      key: 'createPlaceholder',
      value: function createPlaceholder() {
        return this.implementation_.createPlaceholderCallback();
      }

      /**
       * Whether the element should ever render when it is not in viewport.
       * @return {boolean|number}
       * @final @this {!Element}
       */

    }, {
      key: 'renderOutsideViewport',
      value: function renderOutsideViewport() {
        return this.implementation_.renderOutsideViewport();
      }

      /**
       * Whether the element should render outside of renderOutsideViewport when
       * the scheduler is idle.
       * @return {boolean|number}
       * @final @this {!Element}
       */

    }, {
      key: 'idleRenderOutsideViewport',
      value: function idleRenderOutsideViewport() {
        return this.implementation_.idleRenderOutsideViewport();
      }

      /**
       * Returns a previously measured layout box adjusted to the viewport. This
       * mainly affects fixed-position elements that are adjusted to be always
       * relative to the document position in the viewport.
       * @return {!./layout-rect.LayoutRectDef}
       * @final @this {!Element}
       */

    }, {
      key: 'getLayoutBox',
      value: function getLayoutBox() {
        return this.getResources().getResourceForElement(this).getLayoutBox();
      }

      /**
       * Returns a previously measured layout box relative to the page. The
       * fixed-position elements are relative to the top of the document.
       * @return {!./layout-rect.LayoutRectDef}
       * @final @this {!Element}
       */

    }, {
      key: 'getPageLayoutBox',
      value: function getPageLayoutBox() {
        return this.getResources().getResourceForElement(this).getPageLayoutBox();
      }

      /**
       * @return {?Element}
       * @final @this {!Element}
       */

    }, {
      key: 'getOwner',
      value: function getOwner() {
        return this.getResources().getResourceForElement(this).getOwner();
      }

      /**
       * Returns a change entry for that should be compatible with
       * IntersectionObserverEntry.
       * @return {!IntersectionObserverEntry} A change entry.
       * @final @this {!Element}
       */

    }, {
      key: 'getIntersectionChangeEntry',
      value: function getIntersectionChangeEntry() {
        var box = this.implementation_.getIntersectionElementLayoutBox();
        var owner = this.getResources().getResourceForElement(this).getOwner();
        var viewportBox = this.implementation_.getViewport().getRect();
        // TODO(jridgewell, #4826): We may need to make this recursive.
        var ownerBox = owner && owner.getLayoutBox();
        return (0, _intersectionObserverPolyfill.getIntersectionChangeEntry)(box, ownerBox, viewportBox);
      }

      /**
       * Returns the resource ID of the element.
       * @return {number}
       */

    }, {
      key: 'getResourceId',
      value: function getResourceId() {
        return this.getResources().getResourceForElement(this).getId();
      }

      /**
       * Returns the current resource state of the element.
       * @return {!ResourceState}
       */

    }, {
      key: 'getResourceState_',
      value: function getResourceState_() {
        return this.getResources().getResourceForElement(this).getState();
      }

      /**
       * The runtime calls this method to determine if {@link layoutCallback}
       * should be called again when layout changes.
       * @return {boolean}
       * @package @final @this {!Element}
       */

    }, {
      key: 'isRelayoutNeeded',
      value: function isRelayoutNeeded() {
        return this.implementation_.isRelayoutNeeded();
      }

      /**
       * Returns reference to implementation after it has been built.
       * @return {!Promise<!./base-element.BaseElement>}
       */

    }, {
      key: 'getImpl',
      value: function getImpl() {
        var _this7 = this;

        return this.whenBuilt().then(function () {
          return _this7.implementation_;
        });
      }

      /**
       * Returns the layout of the element.
       * @return {!Layout}
       */

    }, {
      key: 'getLayout',
      value: function getLayout() {
        return this.layout_;
      }

      /**
       * Instructs the element to layout its content and load its resources if
       * necessary by calling the {@link BaseElement.layoutCallback} method that
       * should be implemented by BaseElement subclasses. Must return a promise
       * that will yield when the layout and associated loadings are complete.
       *
       * This method is always called for the first layout, but for subsequent
       * layouts the runtime consults {@link isRelayoutNeeded} method.
       *
       * Can only be called on a upgraded and built element.
       *
       * @return {!Promise}
       * @package @final @this {!Element}
       */

    }, {
      key: 'layoutCallback',
      value: function layoutCallback() {
        var _this8 = this;

        assertNotTemplate(this);
        (0, _log.dev)().assert(this.isBuilt(), 'Must be built to receive viewport events');
        this.dispatchCustomEventForTesting(_ampEvents.AmpEvents.LOAD_START);
        var isLoadEvent = this.layoutCount_ == 0; // First layout is "load".
        this.signals_.reset(_commonSignals.CommonSignals.UNLOAD);
        if (isLoadEvent) {
          this.signals_.signal(_commonSignals.CommonSignals.LOAD_START);
        }
        if (this.perfOn_) {
          this.getLayoutDelayMeter_().startLayout();
        }

        var promise = (0, _promise.tryResolve)(function () {
          return _this8.implementation_.layoutCallback();
        });
        this.preconnect( /* onLayout */true);
        this.classList.add('i-amphtml-layout');

        return promise.then(function () {
          if (isLoadEvent) {
            _this8.signals_.signal(_commonSignals.CommonSignals.LOAD_END);
          }
          _this8.readyState = 'complete';
          _this8.layoutCount_++;
          _this8.toggleLoading(false, { cleanup: true });
          // Check if this is the first success layout that needs
          // to call firstLayoutCompleted.
          if (!_this8.isFirstLayoutCompleted_) {
            _this8.implementation_.firstLayoutCompleted();
            _this8.isFirstLayoutCompleted_ = true;
            // TODO(dvoytenko, #7389): cleanup once amp-sticky-ad signals are
            // in PROD.
            _this8.dispatchCustomEvent(_ampEvents.AmpEvents.LOAD_END);
          }
        }, function (reason) {
          // add layoutCount_ by 1 despite load fails or not
          if (isLoadEvent) {
            _this8.signals_.rejectSignal(_commonSignals.CommonSignals.LOAD_END, /** @type {!Error} */reason);
          }
          _this8.layoutCount_++;
          _this8.toggleLoading(false, { cleanup: true });
          throw reason;
        });
      }

      /**
       * Whether the resource is currently visible in the viewport.
       * @return {boolean}
       * @final @package @this {!Element}
       */

    }, {
      key: 'isInViewport',
      value: function isInViewport() {
        return this.isInViewport_;
      }

      /**
       * Instructs the resource that it entered or exited the visible viewport.
       *
       * Can only be called on a upgraded and built element.
       *
       * @param {boolean} inViewport Whether the element has entered or exited
       *   the visible viewport.
       * @final @package @this {!Element}
       */

    }, {
      key: 'viewportCallback',
      value: function viewportCallback(inViewport) {
        var _this9 = this;

        assertNotTemplate(this);
        if (inViewport == this.isInViewport_) {
          return;
        }
        // TODO(dvoytenko, #9177): investigate/cleanup viewport signals for
        // elements in dead iframes.
        if (!this.ownerDocument || !this.ownerDocument.defaultView) {
          return;
        }
        this.isInViewport_ = inViewport;
        if (this.layoutCount_ == 0) {
          if (!inViewport) {
            this.toggleLoading(false);
          } else {
            // Set a minimum delay in case the element loads very fast or if it
            // leaves the viewport.
            _services.Services.timerFor((0, _types.toWin)(this.ownerDocument.defaultView)).delay(function () {
              // TODO(dvoytenko, #9177): cleanup `this.ownerDocument.defaultView`
              // once investigation is complete. It appears that we get a lot of
              // errors here once the iframe is destroyed due to timer.
              if (_this9.isInViewport_ && _this9.ownerDocument && _this9.ownerDocument.defaultView) {
                _this9.toggleLoading(true);
              }
            }, 100);
          }
        }
        if (this.isBuilt()) {
          this.updateInViewport_(inViewport);
        }
      }

      /**
       * @param {boolean} inViewport
       * @private @this {!Element}
       */

    }, {
      key: 'updateInViewport_',
      value: function updateInViewport_(inViewport) {
        this.implementation_.inViewport_ = inViewport;
        this.implementation_.viewportCallback(inViewport);
        if (inViewport && this.perfOn_) {
          this.getLayoutDelayMeter_().enterViewport();
        }
      }

      /**
       * Whether the resource is currently paused.
       * @return {boolean}
       * @final @package @this {!Element}
       */

    }, {
      key: 'isPaused',
      value: function isPaused() {
        return this.paused_;
      }

      /**
       * Requests the resource to stop its activity when the document goes into
       * inactive state. The scope is up to the actual component. Among other
       * things the active playback of video or audio content must be stopped.
       *
       * @package @final @this {!Element}
       */

    }, {
      key: 'pauseCallback',
      value: function pauseCallback() {
        assertNotTemplate(this);
        if (this.paused_) {
          return;
        }
        this.paused_ = true;
        this.viewportCallback(false);
        if (this.isBuilt()) {
          this.implementation_.pauseCallback();
        }
      }

      /**
       * Requests the resource to resume its activity when the document returns
       * from an inactive state. The scope is up to the actual component. Among
       * other things the active playback of video or audio content may be
       * resumed.
       *
       * @package @final @this {!Element}
       */

    }, {
      key: 'resumeCallback',
      value: function resumeCallback() {
        assertNotTemplate(this);
        if (!this.paused_) {
          return;
        }
        this.paused_ = false;
        if (this.isBuilt()) {
          this.implementation_.resumeCallback();
        }
      }

      /**
       * Requests the element to unload any expensive resources when the element
       * goes into non-visible state. The scope is up to the actual component.
       *
       * Calling this method on unbuilt or unupgraded element has no effect.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */

    }, {
      key: 'unlayoutCallback',
      value: function unlayoutCallback() {
        assertNotTemplate(this);
        if (!this.isBuilt()) {
          return false;
        }
        this.signals_.signal(_commonSignals.CommonSignals.UNLOAD);
        var isReLayoutNeeded = this.implementation_.unlayoutCallback();
        if (isReLayoutNeeded) {
          this.reset_();
        }
        return isReLayoutNeeded;
      }

      /** @private */

    }, {
      key: 'reset_',
      value: function reset_() {
        this.layoutCount_ = 0;
        this.isFirstLayoutCompleted_ = false;
        this.signals_.reset(_commonSignals.CommonSignals.RENDER_START);
        this.signals_.reset(_commonSignals.CommonSignals.LOAD_START);
        this.signals_.reset(_commonSignals.CommonSignals.LOAD_END);
        this.signals_.reset(_commonSignals.CommonSignals.INI_LOAD);
      }

      /**
       * Whether to call {@link unlayoutCallback} when pausing the element.
       * Certain elements cannot properly pause (like amp-iframes with unknown
       * video content), and so we must unlayout to stop playback.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */

    }, {
      key: 'unlayoutOnPause',
      value: function unlayoutOnPause() {
        return this.implementation_.unlayoutOnPause();
      }

      /**
       * Whether the element needs to be reconstructed after it has been
       * re-parented. Many elements cannot survive fully the reparenting and
       * are better to be reconstructed from scratch.
       *
       * @return {boolean}
       * @package @final @this {!Element}
       */

    }, {
      key: 'reconstructWhenReparented',
      value: function reconstructWhenReparented() {
        return this.implementation_.reconstructWhenReparented();
      }

      /**
       * Collapses the element, and notifies its owner (if there is one) that the
       * element is no longer present.
       */

    }, {
      key: 'collapse',
      value: function collapse() {
        this.implementation_. /*OK*/collapse();
      }

      /**
       * Called every time an owned AmpElement collapses itself.
       * @param {!AmpElement} element
       */

    }, {
      key: 'collapsedCallback',
      value: function collapsedCallback(element) {
        this.implementation_.collapsedCallback(element);
      }

      /**
       * Expands the element, and notifies its owner (if there is one) that the
       * element is now present.
       */

    }, {
      key: 'expand',
      value: function expand() {
        this.implementation_. /*OK*/expand();
      }

      /**
       * Called every time an owned AmpElement expands itself.
       * @param {!AmpElement} element
       */

    }, {
      key: 'expandedCallback',
      value: function expandedCallback(element) {
        this.implementation_.expandedCallback(element);
      }

      /**
       * Called when one or more attributes are mutated.
       * Note: Must be called inside a mutate context.
       * Note: Boolean attributes have a value of `true` and `false` when
       *     present and missing, respectively.
       * @param {!JsonObject<string, (null|boolean|string|number|Array|Object)>} mutations
       */

    }, {
      key: 'mutatedAttributesCallback',
      value: function mutatedAttributesCallback(mutations) {
        this.implementation_.mutatedAttributesCallback(mutations);
      }

      /**
       * Enqueues the action with the element. If element has been upgraded and
       * built, the action is dispatched to the implementation right away.
       * Otherwise the invocation is enqueued until the implementation is ready
       * to receive actions.
       * @param {!./service/action-impl.ActionInvocation} invocation
       * @final @this {!Element}
       */

    }, {
      key: 'enqueAction',
      value: function enqueAction(invocation) {
        assertNotTemplate(this);
        if (!this.isBuilt()) {
          if (this.actionQueue_ === undefined) {
            this.actionQueue_ = [];
          }
          (0, _log.dev)().assert(this.actionQueue_).push(invocation);
        } else {
          this.executionAction_(invocation, false);
        }
      }

      /**
       * Dequeues events from the queue and dispatches them to the implementation
       * with "deferred" flag.
       * @private @this {!Element}
       */

    }, {
      key: 'dequeueActions_',
      value: function dequeueActions_() {
        var _this10 = this;

        if (!this.actionQueue_) {
          return;
        }

        var actionQueue = (0, _log.dev)().assert(this.actionQueue_);
        this.actionQueue_ = null;

        // Notice, the actions are currently not de-duped.
        actionQueue.forEach(function (invocation) {
          _this10.executionAction_(invocation, true);
        });
      }

      /**
       * Executes the action immediately. All errors are consumed and reported.
       * @param {!./service/action-impl.ActionInvocation} invocation
       * @param {boolean} deferred
       * @final
       * @private @this {!Element}
       */

    }, {
      key: 'executionAction_',
      value: function executionAction_(invocation, deferred) {
        try {
          this.implementation_.executeAction(invocation, deferred);
        } catch (e) {
          (0, _log.rethrowAsync)('Action execution failed:', e, invocation.node.tagName, invocation.method);
        }
      }

      /**
       * Get the consent policy to follow.
       * @return {?string}
       */

    }, {
      key: 'getConsentPolicy_',
      value: function getConsentPolicy_() {
        var policyId = this.getAttribute('data-block-on-consent');
        if (policyId === null) {
          // data-block-on-consent attribute not set
          return null;
        }
        if (policyId == '' || policyId == 'default') {
          // data-block-on-consent value not set, up to individual element
          // Note: data-block-on-consent and data-block-on-consent='default' is
          // treated exactly the same
          return this.implementation_.getConsentPolicy();
        }
        return policyId;
      }

      /**
       * Returns the original nodes of the custom element without any service
       * nodes that could have been added for markup. These nodes can include
       * Text, Comment and other child nodes.
       * @return {!Array<!Node>}
       * @package @final @this {!Element}
       */

    }, {
      key: 'getRealChildNodes',
      value: function getRealChildNodes() {
        return dom.childNodes(this, function (node) {
          return !isInternalOrServiceNode(node);
        });
      }

      /**
       * Returns the original children of the custom element without any service
       * nodes that could have been added for markup.
       * @return {!Array<!Element>}
       * @package @final @this {!Element}
       */

    }, {
      key: 'getRealChildren',
      value: function getRealChildren() {
        return dom.childElements(this, function (element) {
          return !isInternalOrServiceNode(element);
        });
      }

      /**
       * Must be executed in the mutate context. Removes `display:none` from the
       * element set via `layout=nodisplay`.
       * @param {boolean} displayOn
       */

    }, {
      key: 'toggleLayoutDisplay',
      value: function toggleLayoutDisplay(displayOn) {
        this.classList.toggle('i-amphtml-display', displayOn);
      }

      /**
       * Returns an optional placeholder element for this custom element.
       * @return {?Element}
       * @package @final @this {!Element}
       */

    }, {
      key: 'getPlaceholder',
      value: function getPlaceholder() {
        return dom.lastChildElement(this, function (el) {
          return el.hasAttribute('placeholder') &&
          // Blacklist elements that has a native placeholder property
          // like input and textarea. These are not allowed to be AMP
          // placeholders.
          !isInputPlaceholder(el);
        });
      }

      /**
       * Hides or shows the placeholder, if available.
       * @param {boolean} show
       * @package @final @this {!Element}
       */

    }, {
      key: 'togglePlaceholder',
      value: function togglePlaceholder(show) {
        assertNotTemplate(this);
        if (show) {
          var placeholder = this.getPlaceholder();
          if (placeholder) {
            placeholder.classList.remove('amp-hidden');
          }
        } else {
          var placeholders = dom.childElementsByAttr(this, 'placeholder');
          for (var i = 0; i < placeholders.length; i++) {
            // Don't toggle elements with a native placeholder property
            // e.g. input, textarea
            if (isInputPlaceholder(placeholders[i])) {
              continue;
            }
            placeholders[i].classList.add('amp-hidden');
          }
        }
      }

      /**
       * Returns an optional fallback element for this custom element.
       * @return {?Element}
       * @package @final @this {!Element}
       */

    }, {
      key: 'getFallback',
      value: function getFallback() {
        return dom.childElementByAttr(this, 'fallback');
      }

      /**
       * Hides or shows the fallback, if available. This function must only
       * be called inside a mutate context.
       * @param {boolean} show
       * @package @final @this {!Element}
       */

    }, {
      key: 'toggleFallback',
      value: function toggleFallback(show) {
        assertNotTemplate(this);
        var resourceState = this.getResourceState_();
        // Do not show fallback before layout
        if (show && (resourceState == _resource.ResourceState.NOT_BUILT || resourceState == _resource.ResourceState.NOT_LAID_OUT || resourceState == _resource.ResourceState.READY_FOR_LAYOUT)) {
          return;
        }
        // This implementation is notably less efficient then placeholder
        // toggling. The reasons for this are: (a) "not supported" is the state of
        // the whole element, (b) some relayout is expected and (c) fallback
        // condition would be rare.
        this.classList.toggle('amp-notsupported', show);
        if (show == true) {
          var fallbackElement = this.getFallback();
          if (fallbackElement) {
            this.getResources().scheduleLayout(this, fallbackElement);
          }
        }
      }

      /**
       * An implementation can call this method to signal to the element that
       * it has started rendering.
       * @package @final @this {!Element}
       */

    }, {
      key: 'renderStarted',
      value: function renderStarted() {
        this.signals_.signal(_commonSignals.CommonSignals.RENDER_START);
        this.togglePlaceholder(false);
        this.toggleLoading(false);
      }

      /**
       * Whether the loading can be shown for this element.
       * @return {boolean}
       * @private @this {!Element}
       */

    }, {
      key: 'isLoadingEnabled_',
      value: function isLoadingEnabled_() {
        // No loading indicator will be shown if either one of these conditions
        // true:
        // 1. `noloading` attribute is specified;
        // 2. The element has not been whitelisted;
        // 3. The element is too small or has not yet been measured;
        // 4. The element has already been laid out (include having loading
        //    error);
        // 5. The element is a `placeholder` or a `fallback`;
        // 6. The element's layout is not a size-defining layout.
        // 7. The document is A4A.
        if (this.isInA4A_()) {
          return false;
        }
        if (this.loadingDisabled_ === undefined) {
          this.loadingDisabled_ = this.hasAttribute('noloading');
        }
        if (this.loadingDisabled_ || !(0, _layout.isLoadingAllowed)(this) || this.layoutWidth_ < MIN_WIDTH_FOR_LOADING || this.layoutCount_ > 0 || isInternalOrServiceNode(this) || !(0, _layout.isLayoutSizeDefined)(this.layout_)) {
          return false;
        }
        return true;
      }

      /**
       * @return {boolean}
       * @private
       */

    }, {
      key: 'isInA4A_',
      value: function isInA4A_() {
        return (
          // in FIE
          this.ampdoc_ && this.ampdoc_.win != this.ownerDocument.defaultView ||

          // in inabox
          (0, _mode.getMode)().runtime == 'inabox'
        );
      }

      /**
       * Creates a loading object. The caller must ensure that loading can
       * actually be shown. This method must also be called in the mutate
       * context.
       * @private @this {!Element}
       */

    }, {
      key: 'prepareLoading_',
      value: function prepareLoading_() {
        if (!this.isLoadingEnabled_()) {
          return;
        }
        if (!this.loadingContainer_) {
          var doc = /** @type {!Document} */(0, _log.dev)().assert(this.ownerDocument);

          var container = (0, _staticTemplate.htmlFor)(doc)(_templateObject);

          var element = (0, _loader.createLoaderElement)(doc, this.elementName());
          container.appendChild(element);

          this.appendChild(container);
          this.loadingContainer_ = container;
          this.loadingElement_ = element;
        }
      }

      /**
       * Turns the loading indicator on or off.
       * @param {boolean} state
       * @param {{cleanup:boolean, force:boolean}=} opt_options
       * @public @final @this {!Element}
       */

    }, {
      key: 'toggleLoading',
      value: function toggleLoading(state, opt_options) {
        var _this11 = this;

        var cleanup = opt_options && opt_options.cleanup;
        var force = opt_options && opt_options.force;
        assertNotTemplate(this);
        if (state && !this.implementation_.isLoadingReused() && (this.layoutCount_ > 0 || this.signals_.get(_commonSignals.CommonSignals.RENDER_START))) {
          // Loading has already been canceled. Ignore.
          return;
        }
        this.loadingState_ = state;
        if (!state && !this.loadingContainer_) {
          return;
        }

        // Check if loading should be shown.
        if (state && !force && !this.isLoadingEnabled_()) {
          this.loadingState_ = false;
          return;
        }

        this.mutateOrInvoke_(function () {
          var state = _this11.loadingState_;
          // Repeat "loading enabled" check because it could have changed while
          // waiting for vsync.
          if (state && !force && !_this11.isLoadingEnabled_()) {
            state = false;
          }
          if (state) {
            _this11.prepareLoading_();
          }
          if (!_this11.loadingContainer_) {
            return;
          }

          _this11.loadingContainer_.classList.toggle('amp-hidden', !state);
          _this11.loadingElement_.classList.toggle('amp-active', state);

          if (!state && cleanup && !_this11.implementation_.isLoadingReused()) {
            var loadingContainer = _this11.loadingContainer_;
            _this11.loadingContainer_ = null;
            _this11.loadingElement_ = null;
            _this11.mutateOrInvoke_(function () {
              dom.removeElement(loadingContainer);
            });
          }
        });
      }

      /**
       * Returns an optional overflow element for this custom element.
       * @return {!./layout-delay-meter.LayoutDelayMeter}
       */

    }, {
      key: 'getLayoutDelayMeter_',
      value: function getLayoutDelayMeter_() {
        if (!this.layoutDelayMeter_) {
          this.layoutDelayMeter_ = new _layoutDelayMeter.LayoutDelayMeter((0, _types.toWin)(this.ownerDocument.defaultView), this.getLayoutPriority());
        }
        return this.layoutDelayMeter_;
      }

      /**
       * Returns an optional overflow element for this custom element.
       * @return {?Element}
       * @this {!Element}
       */

    }, {
      key: 'getOverflowElement',
      value: function getOverflowElement() {
        if (this.overflowElement_ === undefined) {
          this.overflowElement_ = dom.childElementByAttr(this, 'overflow');
          if (this.overflowElement_) {
            if (!this.overflowElement_.hasAttribute('tabindex')) {
              this.overflowElement_.setAttribute('tabindex', '0');
            }
            if (!this.overflowElement_.hasAttribute('role')) {
              this.overflowElement_.setAttribute('role', 'button');
            }
          }
        }
        return this.overflowElement_;
      }

      /**
       * Hides or shows the overflow, if available. This function must only
       * be called inside a mutate context.
       * @param {boolean} overflown
       * @param {number|undefined} requestedHeight
       * @param {number|undefined} requestedWidth
       * @package @final @this {!Element}
       */

    }, {
      key: 'overflowCallback',
      value: function overflowCallback(overflown, requestedHeight, requestedWidth) {
        var _this12 = this;

        this.getOverflowElement();
        if (!this.overflowElement_) {
          if (overflown && this.warnOnMissingOverflow) {
            (0, _log.user)().warn(TAG, 'Cannot resize element and overflow is not available', this);
          }
        } else {
          this.overflowElement_.classList.toggle('amp-visible', overflown);

          if (overflown) {
            this.overflowElement_.onclick = function () {
              var resources = _this12.getResources();
              resources. /*OK*/changeSize(_this12, requestedHeight, requestedWidth);
              resources.mutateElement(_this12, function () {
                _this12.overflowCallback(
                /* overflown */false, requestedHeight, requestedWidth);
              });
            };
          } else {
            this.overflowElement_.onclick = null;
          }
        }
      }

      /**
       * Mutates the element using resources if available.
       *
       * @param {function()} mutator
       * @param {?Element=} opt_element
       */

    }, {
      key: 'mutateOrInvoke_',
      value: function mutateOrInvoke_(mutator, opt_element) {
        if (this.resources_) {
          this.getResources().mutateElement(opt_element || this, mutator);
        } else {
          mutator();
        }
      }
    }]);

    return BaseCustomElement;
  }(htmlElement);

  win.BaseCustomElementClass = BaseCustomElement;
  return win.BaseCustomElementClass;
}

/** @param {!Element} element */
function isInputPlaceholder(element) {
  return 'placeholder' in element;
}

/** @param {!Element} element */
function assertNotTemplate(element) {
  (0, _log.dev)().assert(!element.isInTemplate_, 'Must never be called in template');
}

/**
 * Whether the implementation is a stub.
 * @param {?./base-element.BaseElement} impl
 * @return {boolean}
 */
function isStub(impl) {
  return impl instanceof _elementStub.ElementStub;
}

/**
 * Returns "true" for internal AMP nodes or for placeholder elements.
 * @param {!Node} node
 * @return {boolean}
 */
function isInternalOrServiceNode(node) {
  if ((0, _layout.isInternalElement)(node)) {
    return true;
  }
  if (node.tagName && (node.hasAttribute('placeholder') || node.hasAttribute('fallback') || node.hasAttribute('overflow'))) {
    return true;
  }
  return false;
}

/**
 * Creates a new custom element class prototype.
 *
 * @param {!Window} win The window in which to register the custom element.
 * @param {string} name The name of the custom element.
 * @param {function(new:./base-element.BaseElement, !Element)=} opt_implementationClass For testing only.
 * @return {!Object} Prototype of element.
 */
function createAmpElementForTesting(win, name, opt_implementationClass) {
  var Element = createCustomElementClass(win, name);
  if ((0, _mode.getMode)().test && opt_implementationClass) {
    Element.prototype.implementationClassForTesting = opt_implementationClass;
  }
  return Element;
}

},{"../src/intersection-observer-polyfill":39,"../src/loader":44,"../src/utils/promise":125,"./amp-events":9,"./common-signals":15,"./dom":22,"./element-stub":24,"./error":25,"./experiments":28,"./layout":43,"./layout-delay-meter":41,"./log":45,"./mode":47,"./service/resource":84,"./services":104,"./size-list":106,"./static-template":107,"./style":110,"./types":113,"./utils/signals":127}],20:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDocumentReady = isDocumentReady;
exports.onDocumentReady = onDocumentReady;
exports.whenDocumentReady = whenDocumentReady;
exports.whenDocumentComplete = whenDocumentComplete;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Whether the document is ready.
 * @param {!Document} doc
 * @return {boolean}
 */
function isDocumentReady(doc) {
  return doc.readyState != 'loading' && doc.readyState != 'uninitialized';
}

/**
 * Whether the document has loaded all the css and sub-resources.
 * @param {!Document} doc
 * @return {boolean}
 */
function isDocumentComplete(doc) {
  return doc.readyState == 'complete';
}

/**
 * Calls the callback when document is ready.
 * @param {!Document} doc
 * @param {function(!Document)} callback
 */
function onDocumentReady(doc, callback) {
  onDocumentState(doc, isDocumentReady, callback);
}

/**
 * Calls the callback when document's state satisfies the stateFn.
 * @param {!Document} doc
 * @param {function(!Document):boolean} stateFn
 * @param {function(!Document)} callback
 */
function onDocumentState(doc, stateFn, callback) {
  var ready = stateFn(doc);
  if (ready) {
    callback(doc);
  } else {
    var readyListener = function readyListener() {
      if (stateFn(doc)) {
        if (!ready) {
          ready = true;
          callback(doc);
        }
        doc.removeEventListener('readystatechange', readyListener);
      }
    };
    doc.addEventListener('readystatechange', readyListener);
  }
}

/**
 * Returns a promise that is resolved when document is ready.
 * @param {!Document} doc
 * @return {!Promise<!Document>}
 */
function whenDocumentReady(doc) {
  return new Promise(function (resolve) {
    onDocumentReady(doc, resolve);
  });
}

/**
 * Returns a promise that is resolved when document is complete.
 * @param {!Document} doc
 * @return {!Promise<!Document>}
 */
function whenDocumentComplete(doc) {
  return new Promise(function (resolve) {
    onDocumentState(doc, isDocumentComplete, resolve);
  });
}

},{}],21:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installGlobalSubmitListenerForDoc = installGlobalSubmitListenerForDoc;
exports.onDocumentFormSubmit_ = onDocumentFormSubmit_;

var _actionConstants = require('./action-constants');

var _url = require('./url');

var _services = require('./services');

var _log = require('./log');

var _elementService = require('./element-service');

/**
 * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
 * @return {!Promise}
 */
function installGlobalSubmitListenerForDoc(ampdoc) {
  // Register global submit event listener only if the amp-form
  // extension is used. Allowing the usage of native forms, otherwise.
  return (0, _elementService.isExtensionScriptInNode)(ampdoc, 'amp-form').then(function (ampFormInstalled) {
    if (ampFormInstalled) {
      ampdoc.getRootNode().addEventListener('submit', onDocumentFormSubmit_, true);
    }
  });
}

/**
 * Intercept any submit on the current document and prevent invalid submits from
 * going through.
 *
 * @param {!Event} e
 */
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function onDocumentFormSubmit_(e) {
  if (e.defaultPrevented) {
    return;
  }

  var form = (0, _log.dev)().assertElement(e.target);
  if (!form || form.tagName != 'FORM') {
    return;
  }

  // amp-form extension will add novalidate to all forms to manually trigger
  // validation. In that case `novalidate` doesn't have the same meaning.
  var isAmpFormMarked = form.classList.contains('i-amphtml-form');
  var shouldValidate = void 0;
  if (isAmpFormMarked) {
    shouldValidate = !form.hasAttribute('amp-novalidate');
  } else {
    shouldValidate = !form.hasAttribute('novalidate');
  }

  // Safari does not trigger validation check on submission, hence we
  // trigger it manually. In other browsers this would never execute since
  // the submit event wouldn't be fired if the form is invalid.
  if (shouldValidate && form.checkValidity && !form.checkValidity()) {
    e.preventDefault();
  }

  var inputs = form.elements;
  for (var i = 0; i < inputs.length; i++) {
    (0, _log.user)().assert(!inputs[i].name || inputs[i].name != _url.SOURCE_ORIGIN_PARAM, 'Illegal input name, %s found: %s', _url.SOURCE_ORIGIN_PARAM, inputs[i]);
  }

  var action = form.getAttribute('action');
  var actionXhr = form.getAttribute('action-xhr');
  var method = (form.getAttribute('method') || 'GET').toUpperCase();

  if (actionXhr) {
    (0, _url.assertHttpsUrl)(actionXhr, form, 'action-xhr');
    (0, _log.user)().assert(!(0, _url.isProxyOrigin)(actionXhr), 'form action-xhr should not be on AMP CDN: %s', form);
    (0, _url.checkCorsUrl)(actionXhr);
  }
  if (action) {
    (0, _url.assertHttpsUrl)(action, form, 'action');
    (0, _log.user)().assert(!(0, _url.isProxyOrigin)(action), 'form action should not be on AMP CDN: %s', form);
    (0, _url.checkCorsUrl)(action);
  }

  if (method == 'GET') {
    (0, _log.user)().assert(actionXhr || action, 'form action-xhr or action attribute is required for method=GET: %s', form);
  } else if (method == 'POST') {
    if (action) {
      var TAG = 'form';
      (0, _log.user)().error(TAG, 'action attribute is invalid for method=POST: %s', form);
    }

    if (!actionXhr) {
      e.preventDefault();
      (0, _log.user)().assert(false, 'Only XHR based (via action-xhr attribute) submissions are support ' + 'for POST requests. %s', form);
    }
  }

  var target = form.getAttribute('target');
  if (target) {
    (0, _log.user)().assert(target == '_blank' || target == '_top', 'form target=%s is invalid can only be _blank or _top: %s', target, form);
  } else {
    form.setAttribute('target', '_top');
  }

  // For xhr submissions relay the submission event through action service to
  // allow us to wait for amp-form (and possibly its dependencies) to execute
  // the actual submission. For non-XHR GET we let the submission go through
  // to allow _blank target to work.
  if (actionXhr) {
    e.preventDefault();

    // It's important to stop propagation of the submission to avoid double
    // handling of the event in cases were we are delegating to action service
    // to deliver the submission event.
    e.stopImmediatePropagation();

    var actions = _services.Services.actionServiceForDoc(form);
    actions.execute(form, 'submit', /*args*/null, /*source*/form, /*caller*/form, e, _actionConstants.ActionTrust.HIGH);
  }
}

},{"./action-constants":8,"./element-service":23,"./log":45,"./services":104,"./url":116}],22:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPGRADE_TO_CUSTOMELEMENT_RESOLVER = exports.UPGRADE_TO_CUSTOMELEMENT_PROMISE = undefined;
exports.waitForChild = waitForChild;
exports.waitForChildPromise = waitForChildPromise;
exports.waitForBody = waitForBody;
exports.waitForBodyPromise = waitForBodyPromise;
exports.removeElement = removeElement;
exports.removeChildren = removeChildren;
exports.copyChildren = copyChildren;
exports.insertAfterOrAtStart = insertAfterOrAtStart;
exports.addAttributesToElement = addAttributesToElement;
exports.createElementWithAttributes = createElementWithAttributes;
exports.isConnectedNode = isConnectedNode;
exports.rootNodeFor = rootNodeFor;
exports.closest = closest;
exports.closestNode = closestNode;
exports.closestByTag = closestByTag;
exports.closestBySelector = closestBySelector;
exports.matches = matches;
exports.elementByTag = elementByTag;
exports.childElement = childElement;
exports.childElements = childElements;
exports.lastChildElement = lastChildElement;
exports.childNodes = childNodes;
exports.setScopeSelectorSupportedForTesting = setScopeSelectorSupportedForTesting;
exports.childElementByAttr = childElementByAttr;
exports.lastChildElementByAttr = lastChildElementByAttr;
exports.childElementsByAttr = childElementsByAttr;
exports.childElementByTag = childElementByTag;
exports.childElementsByTag = childElementsByTag;
exports.scopedQuerySelector = scopedQuerySelector;
exports.scopedQuerySelectorAll = scopedQuerySelectorAll;
exports.getDataParamsFromAttributes = getDataParamsFromAttributes;
exports.hasNextNodeInDocumentOrder = hasNextNodeInDocumentOrder;
exports.ancestorElements = ancestorElements;
exports.ancestorElementsByTag = ancestorElementsByTag;
exports.templateContentClone = templateContentClone;
exports.iterateCursor = iterateCursor;
exports.openWindowDialog = openWindowDialog;
exports.isJsonScriptTag = isJsonScriptTag;
exports.isJsonLdScriptTag = isJsonLdScriptTag;
exports.isRTL = isRTL;
exports.escapeCssSelectorIdent = escapeCssSelectorIdent;
exports.escapeCssSelectorNth = escapeCssSelectorNth;
exports.escapeHtml = escapeHtml;
exports.tryFocus = tryFocus;
exports.isIframed = isIframed;
exports.isAmpElement = isAmpElement;
exports.whenUpgradedToCustomElement = whenUpgradedToCustomElement;
exports.fullscreenEnter = fullscreenEnter;
exports.fullscreenExit = fullscreenExit;
exports.isFullscreenElement = isFullscreenElement;
exports.isEnabled = isEnabled;

var _promise = require('./utils/promise');

var _cssEscape = require('../third_party/css-escape/css-escape');

var _log = require('./log');

var _object = require('./utils/object');

var _string = require('./string');

var _types = require('./types');

/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var HTML_ESCAPE_CHARS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;'
};
var HTML_ESCAPE_REGEX = /(&|<|>|"|'|`)/g;

/** @const {string} */
var UPGRADE_TO_CUSTOMELEMENT_PROMISE = exports.UPGRADE_TO_CUSTOMELEMENT_PROMISE = '__AMP_UPG_PRM';

/** @const {string} */
var UPGRADE_TO_CUSTOMELEMENT_RESOLVER = exports.UPGRADE_TO_CUSTOMELEMENT_RESOLVER = '__AMP_UPG_RES';

/**
 * Waits until the child element is constructed. Once the child is found, the
 * callback is executed.
 * @param {!Element} parent
 * @param {function(!Element):boolean} checkFunc
 * @param {function()} callback
 */
function waitForChild(parent, checkFunc, callback) {
  if (checkFunc(parent)) {
    callback();
    return;
  }
  /** @const {!Window} */
  var win = (0, _types.toWin)(parent.ownerDocument.defaultView);
  if (win.MutationObserver) {
    /** @const {MutationObserver} */
    var observer = new win.MutationObserver(function () {
      if (checkFunc(parent)) {
        observer.disconnect();
        callback();
      }
    });
    observer.observe(parent, { childList: true });
  } else {
    /** @const {number} */
    var interval = win.setInterval(function () {
      if (checkFunc(parent)) {
        win.clearInterval(interval);
        callback();
      }
    }, /* milliseconds */5);
  }
}

/**
 * Waits until the child element is constructed. Once the child is found, the
 * promise is resolved.
 * @param {!Element} parent
 * @param {function(!Element):boolean} checkFunc
 * @return {!Promise}
 */
function waitForChildPromise(parent, checkFunc) {
  return new Promise(function (resolve) {
    waitForChild(parent, checkFunc, resolve);
  });
}

/**
 * Waits for document's body to be available.
 * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or
 * @{link DocumentState#onBodyAvailable} instead.
 * @param {!Document} doc
 * @param {function()} callback
 */
function waitForBody(doc, callback) {
  waitForChild(doc.documentElement, function () {
    return !!doc.body;
  }, callback);
}

/**
 * Waits for document's body to be available.
 * @param {!Document} doc
 * @return {!Promise}
 */
function waitForBodyPromise(doc) {
  return new Promise(function (resolve) {
    waitForBody(doc, resolve);
  });
}

/**
 * Removes the element.
 * @param {!Element} element
 */
function removeElement(element) {
  if (element.parentElement) {
    element.parentElement.removeChild(element);
  }
}

/**
 * Removes all child nodes of the specified element.
 * @param {!Element} parent
 */
function removeChildren(parent) {
  while (parent.firstChild) {
    parent.removeChild(parent.firstChild);
  }
}

/**
 * Copies all children nodes of element "from" to element "to". Child nodes
 * are deeply cloned. Notice, that this method should be used with care and
 * preferably on smaller subtrees.
 * @param {!Element} from
 * @param {!Element|!DocumentFragment} to
 */
function copyChildren(from, to) {
  var frag = to.ownerDocument.createDocumentFragment();
  for (var n = from.firstChild; n; n = n.nextSibling) {
    frag.appendChild(n.cloneNode(true));
  }
  to.appendChild(frag);
}

/**
 * Insert the element in the root after the element named after or
 * if that is null at the beginning.
 * @param {!Element|!ShadowRoot} root
 * @param {!Element} element
 * @param {?Node} after
 */
function insertAfterOrAtStart(root, element, after) {
  var before = after ? after.nextSibling : root.firstChild;
  root.insertBefore(element, before);
}

/**
 * Add attributes to an element.
 * @param {!Element} element
 * @param {!JsonObject<string, string>} attributes
 * @return {!Element} created element
 */
function addAttributesToElement(element, attributes) {
  for (var attr in attributes) {
    element.setAttribute(attr, attributes[attr]);
  }
  return element;
}

/**
 * Create a new element on document with specified tagName and attributes.
 * @param {!Document} doc
 * @param {string} tagName
 * @param {!JsonObject<string, string>} attributes
 * @return {!Element} created element
 */
function createElementWithAttributes(doc, tagName, attributes) {
  var element = doc.createElement(tagName);
  return addAttributesToElement(element, attributes);
}

/**
 * Returns true if node is connected (attached).
 * @param {!Node} node
 * @return {boolean}
 * @see https://dom.spec.whatwg.org/#connected
 */
function isConnectedNode(node) {
  var connected = node.isConnected;
  if (connected !== undefined) {
    return connected;
  }

  // "An element is connected if its shadow-including root is a document."
  var n = node;
  do {
    n = rootNodeFor(n);
    if (n.host) {
      n = n.host;
    } else {
      break;
    }
  } while (true);
  return n.nodeType === Node.DOCUMENT_NODE;
}

/**
 * Returns the root for a given node. Does not cross shadow DOM boundary.
 * @param {!Node} node
 * @return {!Node}
 */
function rootNodeFor(node) {
  if (Node.prototype.getRootNode) {
    // Type checker says `getRootNode` may return null.
    return node.getRootNode() || node;
  }
  var n = void 0;
  for (n = node; !!n.parentNode; n = n.parentNode) {}
  return n;
}

/**
 * Finds the closest element that satisfies the callback from this element
 * up the DOM subtree.
 * @param {!Element} element
 * @param {function(!Element):boolean} callback
 * @param {Element=} opt_stopAt optional elemnt to stop the search at.
 * @return {?Element}
 */
function closest(element, callback, opt_stopAt) {
  for (var el = element; el && el !== opt_stopAt; el = el.parentElement) {
    if (callback(el)) {
      return el;
    }
  }
  return null;
}

/**
 * Finds the closest node that satisfies the callback from this node
 * up the DOM subtree.
 * @param {!Node} node
 * @param {function(!Node):boolean} callback
 * @return {?Node}
 */
function closestNode(node, callback) {
  for (var n = node; n; n = n.parentNode) {
    if (callback(n)) {
      return n;
    }
  }
  return null;
}

/**
 * Finds the closest element with the specified name from this element
 * up the DOM subtree.
 * @param {!Element} element
 * @param {string} tagName
 * @return {?Element}
 */
function closestByTag(element, tagName) {
  if (element.closest) {
    return element.closest(tagName);
  }
  tagName = tagName.toUpperCase();
  return closest(element, function (el) {
    return el.tagName == tagName;
  });
}

/**
 * Finds the closest element with the specified selector from this element
 * @param {!Element} element
 * @param {string} selector
 * @return {?Element} closest ancestor if found.
 */
function closestBySelector(element, selector) {
  if (element.closest) {
    return element.closest(selector);
  }

  return closest(element, function (el) {
    return matches(el, selector);
  });
}

/**
 * Checks if the given element matches the selector
 * @param  {!Element} el The element to verify
 * @param  {string} selector The selector to check against
 * @return {boolean} True if the element matched the selector. False otherwise.
 */
function matches(el, selector) {
  var matcher = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector;
  if (matcher) {
    return matcher.call(el, selector);
  }
  return false; // IE8 always returns false.
}

/**
 * Finds the first descendant element with the specified name.
 * @param {!Element|!Document|!ShadowRoot} element
 * @param {string} tagName
 * @return {?Element}
 */
function elementByTag(element, tagName) {
  var elements = void 0;
  // getElementsByTagName() is not supported on ShadowRoot.
  if (typeof element.getElementsByTagName === 'function') {
    elements = element.getElementsByTagName(tagName);
  } else {
    elements = element. /*OK*/querySelectorAll(tagName);
  }
  return elements && elements[0] || null;
}

/**
 * Finds the first child element that satisfies the callback.
 * @param {!Element} parent
 * @param {function(!Element):boolean} callback
 * @return {?Element}
 */
function childElement(parent, callback) {
  for (var child = parent.firstElementChild; child; child = child.nextElementSibling) {
    if (callback(child)) {
      return child;
    }
  }
  return null;
}

/**
 * Finds all child elements that satisfy the callback.
 * @param {!Element} parent
 * @param {function(!Element):boolean} callback
 * @return {!Array<!Element>}
 */
function childElements(parent, callback) {
  var children = [];
  for (var child = parent.firstElementChild; child; child = child.nextElementSibling) {
    if (callback(child)) {
      children.push(child);
    }
  }
  return children;
}

/**
 * Finds the last child element that satisfies the callback.
 * @param {!Element} parent
 * @param {function(!Element):boolean} callback
 * @return {?Element}
 */
function lastChildElement(parent, callback) {
  for (var child = parent.lastElementChild; child; child = child.previousElementSibling) {
    if (callback(child)) {
      return child;
    }
  }
  return null;
}

/**
 * Finds all child nodes that satisfy the callback.
 * These nodes can include Text, Comment and other child nodes.
 * @param {!Node} parent
 * @param {function(!Node):boolean} callback
 * @return {!Array<!Node>}
 */
function childNodes(parent, callback) {
  var nodes = [];
  for (var child = parent.firstChild; child; child = child.nextSibling) {
    if (callback(child)) {
      nodes.push(child);
    }
  }
  return nodes;
}

/**
 * @type {boolean|undefined}
 * @visibleForTesting
 */
var scopeSelectorSupported = void 0;

/**
 * @param {boolean|undefined} val
 * @visibleForTesting
 */
function setScopeSelectorSupportedForTesting(val) {
  scopeSelectorSupported = val;
}

/**
 * Test that the :scope selector is supported and behaves correctly.
 * @param {!Element} parent
 * @return {boolean}
 */
function isScopeSelectorSupported(parent) {
  var doc = parent.ownerDocument;
  try {
    var testElement = doc.createElement('div');
    var testChild = doc.createElement('div');
    testElement.appendChild(testChild);
    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,
    // therefore we test actual functionality of`:scope` as well.
    return testElement. /*OK*/querySelector(':scope div') === testChild;
  } catch (e) {
    return false;
  }
}

/**
 * Finds the first child element that has the specified attribute.
 * @param {!Element} parent
 * @param {string} attr
 * @return {?Element}
 */
function childElementByAttr(parent, attr) {
  return scopedQuerySelector /*OK*/(parent, '> [' + attr + ']');
}

/**
 * Finds the last child element that has the specified attribute.
 * @param {!Element} parent
 * @param {string} attr
 * @return {?Element}
 */
function lastChildElementByAttr(parent, attr) {
  return lastChildElement(parent, function (el) {
    return el.hasAttribute(attr);
  });
}

/**
 * Finds all child elements that has the specified attribute.
 * @param {!Element} parent
 * @param {string} attr
 * @return {!NodeList<!Element>}
 */
function childElementsByAttr(parent, attr) {
  return scopedQuerySelectorAll /*OK*/(parent, '> [' + attr + ']');
}

/**
 * Finds the first child element that has the specified tag name.
 * @param {!Element} parent
 * @param {string} tagName
 * @return {?Element}
 */
function childElementByTag(parent, tagName) {
  return scopedQuerySelector /*OK*/(parent, '> ' + tagName);
}

/**
 * Finds all child elements with the specified tag name.
 * @param {!Element} parent
 * @param {string} tagName
 * @return {!NodeList<!Element>}
 */
function childElementsByTag(parent, tagName) {
  return scopedQuerySelectorAll /*OK*/(parent, '> ' + tagName);
}

/**
 * Finds the first element that matches `selector`, scoped inside `root`.
 * Note: in IE, this causes a quick mutation of the element's class list.
 * @param {!Element} root
 * @param {string} selector
 * @return {?Element}
 */
function scopedQuerySelector(root, selector) {
  if (scopeSelectorSupported == null) {
    scopeSelectorSupported = isScopeSelectorSupported(root);
  }
  if (scopeSelectorSupported) {
    return root. /*OK*/querySelector(':scope ' + selector);
  }

  // Only IE.
  var unique = 'i-amphtml-scoped';
  root.classList.add(unique);
  var element = root. /*OK*/querySelector('.' + unique + ' ' + selector);
  root.classList.remove(unique);
  return element;
}

/**
 * Finds the every element that matches `selector`, scoped inside `root`.
 * Note: in IE, this causes a quick mutation of the element's class list.
 * @param {!Element} root
 * @param {string} selector
 * @return {!NodeList<!Element>}
 */
function scopedQuerySelectorAll(root, selector) {
  if (scopeSelectorSupported == null) {
    scopeSelectorSupported = isScopeSelectorSupported(root);
  }
  if (scopeSelectorSupported) {
    return root. /*OK*/querySelectorAll(':scope ' + selector);
  }

  // Only IE.
  var unique = 'i-amphtml-scoped';
  root.classList.add(unique);
  var elements = root. /*OK*/querySelectorAll('.' + unique + ' ' + selector);
  root.classList.remove(unique);
  return elements;
}

/**
 * Returns element data-param- attributes as url parameters key-value pairs.
 * e.g. data-param-some-attr=value -> {someAttr: value}.
 * @param {!Element} element
 * @param {function(string):string=} opt_computeParamNameFunc to compute the
 *    parameter name, get passed the camel-case parameter name.
 * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.
 * @return {!JsonObject}
 */
function getDataParamsFromAttributes(element, opt_computeParamNameFunc, opt_paramPattern) {
  var computeParamNameFunc = opt_computeParamNameFunc || function (key) {
    return key;
  };
  var dataset = element.dataset;

  var params = (0, _object.dict)();
  var paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;
  for (var key in dataset) {
    var _matches = key.match(paramPattern);
    if (_matches) {
      var param = _matches[1][0].toLowerCase() + _matches[1].substr(1);
      params[computeParamNameFunc(param)] = dataset[key];
    }
  }
  return params;
}

/**
 * Whether the element have a next node in the document order.
 * This means either:
 *  a. The element itself has a nextSibling.
 *  b. Any of the element ancestors has a nextSibling.
 * @param {!Element} element
 * @param {?Node} opt_stopNode
 * @return {boolean}
 */
function hasNextNodeInDocumentOrder(element, opt_stopNode) {
  var currentElement = element;
  do {
    if (currentElement.nextSibling) {
      return true;
    }
  } while ((currentElement = currentElement.parentNode) && currentElement != opt_stopNode);
  return false;
}

/**
 * Finds all ancestor elements that satisfy predicate.
 * @param {!Element} child
 * @param {function(!Element):boolean} predicate
 * @return {!Array<!Element>}
 */
function ancestorElements(child, predicate) {
  var ancestors = [];
  for (var ancestor = child.parentElement; ancestor; ancestor = ancestor.parentElement) {
    if (predicate(ancestor)) {
      ancestors.push(ancestor);
    }
  }
  return ancestors;
}

/**
 * Finds all ancestor elements that has the specified tag name.
 * @param {!Element} child
 * @param {string} tagName
 * @return {!Array<!Element>}
 */
function ancestorElementsByTag(child, tagName) {
  tagName = tagName.toUpperCase();
  return ancestorElements(child, function (el) {
    return el.tagName == tagName;
  });
}

/**
 * Returns a clone of the content of a template element.
 *
 * Polyfill to replace .content access for browsers that do not support
 * HTMLTemplateElements natively.
 *
 * @param {!HTMLTemplateElement|!Element} template
 * @return {!DocumentFragment}
 */
function templateContentClone(template) {
  if ('content' in template) {
    return template.content.cloneNode(true);
  } else {
    var content = template.ownerDocument.createDocumentFragment();
    copyChildren(template, content);
    return content;
  }
}

/**
 * Iterate over an array-like. Some collections like NodeList are
 * lazily evaluated in some browsers, and accessing `length` forces full
 * evaluation. We can improve performance by iterating until an element is
 * `undefined` to avoid checking the `length` property.
 * Test cases: https://jsperf.com/iterating-over-collections-of-elements
 * @param {!IArrayLike<T>} iterable
 * @param {function(T, number)} cb
 * @template T
 */
function iterateCursor(iterable, cb) {
  for (var i = 0, value; (value = iterable[i]) !== undefined; i++) {
    cb(value, i);
  }
}

/**
 * This method wraps around window's open method. It first tries to execute
 * `open` call with the provided target and if it fails, it retries the call
 * with the `_top` target. This is necessary given that in some embedding
 * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets
 * is blocked by default.
 *
 * @param {!Window} win
 * @param {string} url
 * @param {string} target
 * @param {string=} opt_features
 * @return {?Window}
 */
function openWindowDialog(win, url, target, opt_features) {
  // Try first with the specified target. If we're inside the WKWebView or
  // a similar environments, this method is expected to fail by default for
  // all targets except `_top`.
  var res = void 0;
  try {
    res = win.open(url, target, opt_features);
  } catch (e) {
    (0, _log.dev)().error('DOM', 'Failed to open url on target: ', target, e);
  }

  // Then try with `_top` target.
  if (!res && target != '_top') {
    res = win.open(url, '_top');
  }
  return res;
}

/**
 * Whether the element is a script tag with application/json type.
 * @param {!Element} element
 * @return {boolean}
 */
function isJsonScriptTag(element) {
  return element.tagName == 'SCRIPT' && element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';
}

/**
 * Whether the element is a script tag with application/json type.
 * @param {!Element} element
 * @return {boolean}
 */
function isJsonLdScriptTag(element) {
  return element.tagName == 'SCRIPT' && element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';
}

/**
 * Whether the page's direction is right to left or not.
 * @param {!Document} doc
 * @return {boolean}
 */
function isRTL(doc) {
  var dir = doc.body.getAttribute('dir') || doc.documentElement.getAttribute('dir') || 'ltr';
  return dir == 'rtl';
}

/**
 * Escapes an ident (ID or a class name) to be used as a CSS selector.
 *
 * See https://drafts.csswg.org/cssom/#serialize-an-identifier.
 *
 * @param {string} ident
 * @return {string}
 */
function escapeCssSelectorIdent(ident) {
  return (0, _cssEscape.cssEscape)(ident);
}

/**
 * Escapes an ident in a way that can be used by :nth-child() psuedo-class.
 *
 * See https://github.com/w3c/csswg-drafts/issues/2306.
 *
 * @param {string|number} ident
 * @return {string}
 */
function escapeCssSelectorNth(ident) {
  var escaped = String(ident);
  // Ensure it doesn't close the nth-child psuedo class.
  (0, _log.dev)().assert(escaped.indexOf(')') === -1);
  return escaped;
}

/**
 * Escapes `<`, `>` and other HTML charcaters with their escaped forms.
 * @param {string} text
 * @return {string}
 */
function escapeHtml(text) {
  if (!text) {
    return text;
  }
  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);
}

/**
 * @param {string} c
 * @return {string}
 */
function escapeHtmlChar(c) {
  return HTML_ESCAPE_CHARS[c];
}

/**
 * Tries to focus on the given element; fails silently if browser throws an
 * exception.
 * @param {!Element} element
 */
function tryFocus(element) {
  try {
    element. /*OK*/focus();
  } catch (e) {
    // IE <= 7 may throw exceptions when focusing on hidden items.
  }
}

/**
 * Whether the given window is in an iframe or not.
 * @param {!Window} win
 * @return {boolean}
 */
function isIframed(win) {
  return win.parent && win.parent != win;
}

/**
 * Determines if this element is an AMP element
 * @param {!Element} element
 * @return {boolean}
 */
function isAmpElement(element) {
  var tag = element.tagName;
  // Use prefix to recognize AMP element. This is necessary because stub
  // may not be attached yet.
  return (0, _string.startsWith)(tag, 'AMP-') &&
  // Some "amp-*" elements are not really AMP elements. :smh:
  !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');
}

/**
 * Return a promise that resolve when an AMP element upgrade from HTMLElement
 * to CustomElement
 * @param {!Element} element
 * @return {!Promise<!Element>}
 */
function whenUpgradedToCustomElement(element) {
  (0, _log.dev)().assert(isAmpElement(element), 'element is not AmpElement');
  if (element.createdCallback) {
    // Element already is CustomElement;
    return Promise.resolve(element);
  }
  // If Element is still HTMLElement, wait for it to upgrade to customElement
  // Note: use pure string to avoid obfuscation between versions.
  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {
    var deferred = new _promise.Deferred();
    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;
    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;
  }

  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];
}

/**
 * Replacement for `Element.requestFullscreen()` method.
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen
 * @param {!Element} element
 */
function fullscreenEnter(element) {
  var requestFs = element.requestFullscreen || element.requestFullScreen || element.webkitRequestFullscreen || element.webkitRequestFullScreen || element.webkitEnterFullscreen || element.webkitEnterFullScreen || element.msRequestFullscreen || element.msRequestFullScreen || element.mozRequestFullscreen || element.mozRequestFullScreen;
  if (requestFs) {
    requestFs.call(element);
  }
}

/**
 * Replacement for `Document.exitFullscreen()` method.
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen
 * @param {!Element} element
 */
function fullscreenExit(element) {
  var exitFs = element.cancelFullScreen || element.exitFullscreen || element.exitFullScreen || element.webkitExitFullscreen || element.webkitExitFullScreen || element.webkitCancelFullScreen || element.mozCancelFullScreen || element.msExitFullscreen;
  if (exitFs) {
    exitFs.call(element);
    return;
  }
  if (element.ownerDocument) {
    exitFs = element.ownerDocument.cancelFullScreen || element.ownerDocument.exitFullscreen || element.ownerDocument.exitFullScreen || element.ownerDocument.webkitExitFullscreen || element.ownerDocument.webkitExitFullScreen || element.ownerDocument.webkitCancelFullScreen || element.ownerDocument.mozCancelFullScreen || element.ownerDocument.msExitFullscreen;
  }
  if (exitFs) {
    exitFs.call(element.ownerDocument);
    return;
  }
}

/**
 * Replacement for `Document.fullscreenElement`.
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement
 * @param {!Element} element
 * @return {boolean}
 */
function isFullscreenElement(element) {
  var isFullscreen = element.webkitDisplayingFullscreen;
  if (isFullscreen) {
    return true;
  }
  if (element.ownerDocument) {
    var fullscreenElement = element.ownerDocument.fullscreenElement || element.ownerDocument.webkitFullscreenElement || element.ownerDocument.mozFullScreenElement || element.webkitCurrentFullScreenElement;
    if (fullscreenElement == element) {
      return true;
    }
  }
  return false;
}

/**
 * Returns true if node is not disabled.
 *
 * IE8 can return false positives, see {@link matches}.
 * @param {!Element} element
 * @return {boolean}
 * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled
 */
function isEnabled(element) {
  return !(element.disabled || matches(element, ':disabled'));
}

},{"../third_party/css-escape/css-escape":133,"./log":45,"./string":108,"./types":113,"./utils/object":123,"./utils/promise":125}],23:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getElementService = getElementService;
exports.getElementServiceIfAvailable = getElementServiceIfAvailable;
exports.getElementServiceForDoc = getElementServiceForDoc;
exports.getElementServiceIfAvailableForDoc = getElementServiceIfAvailableForDoc;
exports.getElementServiceIfAvailableForDocInEmbedScope = getElementServiceIfAvailableForDocInEmbedScope;
exports.extensionScriptsInNode = extensionScriptsInNode;
exports.isExtensionScriptInNode = isExtensionScriptInNode;

var _dom = require('./dom');

var dom = _interopRequireWildcard(_dom);

var _service = require('./service');

var _types = require('./types');

var _log = require('./log');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Returns a promise for a service for the given id and window. Also expects an
 * element that has the actual implementation. The promise resolves when the
 * implementation loaded. Users should typically wrap this as a special purpose
 * function (e.g. Services.viewportForDoc(...)) for type safety and because the
 * factory should not be passed around.
 * @param {!Window} win
 * @param {string} id of the service.
 * @param {string} extension Name of the custom extension that provides the
 *     implementation of this service.
 * @param {boolean=} opt_element Whether this service is provided by an element,
 *     not the extension.
 * @return {!Promise<*>}
 */
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function getElementService(win, id, extension, opt_element) {
  return getElementServiceIfAvailable(win, id, extension, opt_element).then(function (service) {
    return assertService(service, id, extension);
  });
}

/**
 * Same as getElementService but produces null if the given element is not
 * actually available on the current page.
 * @param {!Window} win
 * @param {string} id of the service.
 * @param {string} extension Name of the custom extension that provides the
 *     implementation of this service.
 * @param {boolean=} opt_element Whether this service is provided by an
 *     element, not the extension.
 * @return {!Promise<?Object>}
 */
function getElementServiceIfAvailable(win, id, extension, opt_element) {
  var s = (0, _service.getServicePromiseOrNull)(win, id);
  if (s) {
    return (/** @type {!Promise<?Object>} */s
    );
  }
  return getElementServicePromiseOrNull(win, id, extension, opt_element);
}

/**
 * @param {!Window} win
 * @param {string} elementName Name of an extended custom element.
 * @return {boolean} Whether this element is scheduled to be loaded.
 */
function isElementScheduled(win, elementName) {
  // Set in custom-element.js
  if (!win.ampExtendedElements) {
    return false;
  }
  return !!win.ampExtendedElements[elementName];
}

/**
 * Returns a promise for a service for the given id and window. Also expects an
 * element that has the actual implementation. The promise resolves when the
 * implementation loaded. Users should typically wrap this as a special purpose
 * function (e.g. Services.viewportForDoc(...)) for type safety and because the
 * factory should not be passed around.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id of the service.
 * @param {string} extension Name of the custom extension that provides the
 *     implementation of this service.
 * @param {boolean=} opt_element Whether this service is provided by an element,
 *     not the extension.
 * @return {!Promise<*>}
 */
function getElementServiceForDoc(elementOrAmpDoc, id, extension, opt_element) {
  return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension, opt_element).then(function (service) {
    return assertService(service, id, extension);
  });
}

/**
 * Same as getElementService but produces null if the given element is not
 * actually available on the current page.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id of the service.
 * @param {string} extension Name of the custom extension that provides the
 *     implementation of this service.
 * @param {boolean=} opt_element Whether this service is provided by an
 *     element, not the extension.
 * @return {!Promise<?Object>}
 */
function getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension, opt_element) {
  var ampdoc = (0, _service.getAmpdoc)(elementOrAmpDoc);
  var s = (0, _service.getServicePromiseOrNullForDoc)(elementOrAmpDoc, id);
  if (s) {
    return (/** @type {!Promise<?Object>} */s
    );
  }

  return ampdoc.whenBodyAvailable().then(function () {
    return waitForExtensionIfPresent(ampdoc.win, extension, ampdoc.getHeadNode());
  }).then(function () {
    // If this service is provided by an element, then we can't depend on
    // the service (they may not use the element).
    if (opt_element) {
      return (0, _service.getServicePromiseOrNullForDoc)(elementOrAmpDoc, id);
    } else if (isElementScheduled(ampdoc.win, extension)) {
      return (0, _service.getServicePromiseForDoc)(elementOrAmpDoc, id);
    }
    return null;
  });
}

/**
 * Returns a promise for service for the given id in the embed scope of
 * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF
 * the given node is in the top-level window.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id of the service.
 * @param {string} extension Name of the custom element that provides
 *     the implementation of this service.
 * @return {!Promise<?Object>}
 */
function getElementServiceIfAvailableForDocInEmbedScope(elementOrAmpDoc, id, extension) {
  var s = (0, _service.getExistingServiceForDocInEmbedScope)(elementOrAmpDoc, id);
  if (s) {
    return (/** @type {!Promise<?Object>} */Promise.resolve(s)
    );
  }
  // Return embed-scope element service promise if scheduled.
  if (elementOrAmpDoc.nodeType) {
    var win = (0, _types.toWin)(elementOrAmpDoc.ownerDocument.defaultView);
    var topWin = (0, _service.getTopWindow)(win);
    // In embeds, doc-scope services are window-scope. But make sure to
    // only do this for embeds (not the top window), otherwise we'd grab
    // a promise from the wrong service holder which would never resolve.
    if (win !== topWin) {
      return getElementServicePromiseOrNull(win, id, extension);
    } else {
      // Fallback to ampdoc IFF the given node is _not_ FIE.
      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);
    }
  }
  return (/** @type {!Promise<?Object>} */Promise.resolve(null)
  );
}

/**
 * Throws user error if `service` is null.
 * @param {Object} service
 * @param {string} id
 * @param {string} extension
 * @return {!Object}
 * @private
 */
function assertService(service, id, extension) {
  return (/** @type {!Object} */(0, _log.user)().assert(service, 'Service %s was requested to be provided through %s, ' + 'but %s is not loaded in the current page. To fix this ' + 'problem load the JavaScript file for %s in this page.', id, extension, extension, extension)
  );
}

/**
 * Get list of all the extension JS files
 * @param {HTMLHeadElement|Element|ShadowRoot} head
 * @return {!Array<string>}
 */
function extensionScriptsInNode(head) {
  // ampdoc.getHeadNode() can return null
  if (!head) {
    return [];
  }
  var scripts = [];
  var list = head.querySelectorAll('script[custom-element]');
  for (var i = 0; i < list.length; i++) {
    scripts.push(list[i].getAttribute('custom-element'));
  }
  return scripts;
}

/**
 * Waits for body to be present then verifies that an extension script is
 * present in head for installation.
 * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
 * @param {string} extensionId
 * @return {!Promise<boolean>}
 */
function isExtensionScriptInNode(ampdoc, extensionId) {
  return ampdoc.whenBodyAvailable().then(function () {
    return extensionScriptInNode(ampdoc.getHeadNode(), extensionId);
  });
}

/**
 * Verifies that an extension script is present in head for
 * installation.
 * @param {HTMLHeadElement|Element|ShadowRoot} head
 * @param {string} extensionId
 * @private
 */
function extensionScriptInNode(head, extensionId) {
  return extensionScriptsInNode(head).includes(extensionId);
}

/**
 * Waits for an extension if its script is present
 * @param {!Window} win
 * @param {string} extension
 * @param {HTMLHeadElement|Element|ShadowRoot} head
 * @return {!Promise}
 * @private
 */
function waitForExtensionIfPresent(win, extension, head) {
  /**
   * If there is an extension script wait for it to load before trying
   * to get the service. Prevents a race condition when everything but
   * the extensions is in cache. If there is no script then it's either
   * not present, or the service was defined by a test. In those cases
   * we don't wait around for an extension that does not exist.
   */

  // TODO(jpettitt) investigate registerExtension to short circuit
  // the dom call in extensionScriptsInNode()
  if (!extensionScriptInNode(head, extension)) {
    return Promise.resolve();
  }

  var extensions = (0, _service.getService)(win, 'extensions');
  return (/** @type {!Promise<?Object>} */extensions.waitForExtension(win, extension)
  );
}

/**
 * Returns the promise for service with `id` on the given window if available.
 * Otherwise, resolves with null (service was not registered).
 * @param {!Window} win
 * @param {string} id
 * @param {string} extension
 * @param {boolean=} opt_element
 * @return {!Promise<Object>}
 * @private
 */
function getElementServicePromiseOrNull(win, id, extension, opt_element) {
  return dom.waitForBodyPromise(win.document).then(function () {
    return waitForExtensionIfPresent(win, extension, win.document.head);
  }).then(function () {
    // If this service is provided by an element, then we can't depend on
    // the service (they may not use the element).
    if (opt_element) {
      return (0, _service.getServicePromiseOrNull)(win, id);
    } else if (isElementScheduled(win, extension)) {
      return (0, _service.getServicePromise)(win, id);
    }
    return null;
  });
}

},{"./dom":22,"./log":45,"./service":63,"./types":113}],24:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementStub = exports.stubbedElements = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _baseElement = require('./base-element');

var _log = require('./log');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/** @type {!Array} */
var stubbedElements = exports.stubbedElements = [];

var ElementStub = exports.ElementStub = function (_BaseElement) {
  _inherits(ElementStub, _BaseElement);

  /** @param {!AmpElement} element */
  function ElementStub(element) {
    _classCallCheck(this, ElementStub);

    var _this = _possibleConstructorReturn(this, (ElementStub.__proto__ || Object.getPrototypeOf(ElementStub)).call(this, element));

    stubbedElements.push(_this);
    return _this;
  }

  /** @override */


  _createClass(ElementStub, [{
    key: 'getLayoutPriority',
    value: function getLayoutPriority() {
      return (0, _log.dev)().assert(0, 'Cannot get priority of stubbed element');
    }

    /** @override */

  }, {
    key: 'isLayoutSupported',
    value: function isLayoutSupported(unusedLayout) {
      // Always returns true and will eventually call this method on the actual
      // element.
      return true;
    }

    /** @override */

  }, {
    key: 'reconstructWhenReparented',
    value: function reconstructWhenReparented() {
      // No real state so no reason to reconstruct.
      return false;
    }
  }]);

  return ElementStub;
}(_baseElement.BaseElement);

},{"./base-element":13,"./log":45}],25:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportErrorForWin = reportErrorForWin;
exports.reportError = reportError;
exports.cancellation = cancellation;
exports.isCancellation = isCancellation;
exports.blockedByConsentError = blockedByConsentError;
exports.isBlockedByConsent = isBlockedByConsent;
exports.installErrorReporting = installErrorReporting;
exports.maybeReportErrorToViewer = maybeReportErrorToViewer;
exports.getErrorReportData = getErrorReportData;
exports.detectNonAmpJs = detectNonAmpJs;
exports.resetAccumulatedErrorMessagesForTesting = resetAccumulatedErrorMessagesForTesting;
exports.detectJsEngineFromStack = detectJsEngineFromStack;
exports.reportErrorToAnalytics = reportErrorToAnalytics;

var _ampEvents = require('./amp-events');

var _services = require('./services');

var _log = require('./log');

var _experiments = require('./experiments');

var _exponentialBackoff = require('./exponential-backoff');

var _mode = require('./mode');

var _eventHelper = require('./event-helper');

var _url = require('./url');

var _styleInstaller = require('./style-installer');

var _string = require('./string');

var _analytics = require('./analytics');

var _config = require('./config');

/**
 * @const {string}
 */
var CANCELLED = 'CANCELLED';

/**
 * @const {string}
 */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var BLOCK_BY_CONSENT = 'BLOCK_BY_CONSENT';

/**
 * The threshold for errors throttled because nothing can be done about
 * them, but we'd still like to report the rough number.
 * @const {number}
 */
var NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD = 0.001;

/**
 * The threshold for errors throttled because nothing can be done about
 * them, but we'd still like to report the rough number.
 * @const {number}
 */
var USER_ERROR_THROTTLE_THRESHOLD = 0.1;

/**
 * Collects error messages, so they can be included in subsequent reports.
 * That allows identifying errors that might be caused by previous errors.
 */
var accumulatedErrorMessages = self.AMPErrors || [];
// Use a true global, to avoid multi-module inclusion issues.
self.AMPErrors = accumulatedErrorMessages;

/**
 * Pushes element into array, keeping at most the most recent limit elements
 *
 * @param {!Array<T>} array
 * @param {T} element
 * @param {number} limit
 * @template T
 */
function pushLimit(array, element, limit) {
  if (array.length >= limit) {
    array.splice(0, array.length - limit + 1);
  }
  array.push(element);
}

/**
 * A wrapper around our exponentialBackoff, to lazy initialize it to avoid an
 * un-DCE'able side-effect.
 * @param {function()} work the function to execute after backoff
 * @return {number} the setTimeout id
 */
var _reportingBackoff = function reportingBackoff(work) {
  // Set reportingBackoff as the lazy-created function. JS Vooodoooo.
  _reportingBackoff = (0, _exponentialBackoff.exponentialBackoff)(1.5);
  return _reportingBackoff(work);
};

/**
 * Attempts to stringify a value, falling back to String.
 * @param {*} value
 * @return {string}
 */
function tryJsonStringify(value) {
  try {
    // Cast is fine, because we really don't care here. Just trying.
    return JSON.stringify( /** @type {!JsonObject} */value);
  } catch (e) {
    return String(value);
  }
}

/**
 * The true JS engine, as detected by inspecting an Error stack. This should be
 * used with the userAgent to tell definitely. I.e., Chrome on iOS is really a
 * Safari JS engine.
 */
var detectedJsEngine = void 0;

/**
 * @param {!Window} win
 * @param {*} error
 * @param {!Element=} opt_associatedElement
 */
function reportErrorForWin(win, error, opt_associatedElement) {
  reportError(error, opt_associatedElement);
  if (error && !!win && (0, _log.isUserErrorMessage)(error.message) && !(0, _log.isUserErrorEmbed)(error.message)) {
    reportErrorToAnalytics( /** @type {!Error} */error, win);
  }
}

/**
 * Reports an error. If the error has an "associatedElement" property
 * the element is marked with the `i-amphtml-element-error` and displays
 * the message itself. The message is always send to the console.
 * If the error has a "messageArray" property, that array is logged.
 * This way one gets the native fidelity of the console for things like
 * elements instead of stringification.
 * @param {*} error
 * @param {!Element=} opt_associatedElement
 * @return {!Error}
 */
function reportError(error, opt_associatedElement) {
  try {
    // Convert error to the expected type.
    var isValidError = void 0;
    if (error) {
      if (error.message !== undefined) {
        error = (0, _log.duplicateErrorIfNecessary)( /** @type {!Error} */error);
        isValidError = true;
      } else {
        var origError = error;
        error = new Error(tryJsonStringify(origError));
        error.origError = origError;
      }
    } else {
      error = new Error('Unknown error');
    }
    // Report if error is not an expected type.
    if (!isValidError && (0, _mode.getMode)().localDev && !(0, _mode.getMode)().test) {
      setTimeout(function () {
        var rethrow = new Error('_reported_ Error reported incorrectly: ' + error);
        throw rethrow;
      });
    }

    if (error.reported) {
      return (/** @type {!Error} */error
      );
    }
    error.reported = true;

    // Update element.
    var element = opt_associatedElement || error.associatedElement;
    if (element && element.classList) {
      element.classList.add('i-amphtml-error');
      if ((0, _mode.getMode)().development) {
        element.classList.add('i-amphtml-element-error');
        element.setAttribute('error-message', error.message);
      }
    }

    // Report to console.
    if (self.console) {
      var output = console.error || console.log;
      if (error.messageArray) {
        output.apply(console, error.messageArray);
      } else {
        if (element) {
          output.call(console, error.message, element);
        } else if (!(0, _mode.getMode)().minified) {
          output.call(console, error.stack);
        } else {
          output.call(console, error.message);
        }
      }
    }
    if (element && element.dispatchCustomEventForTesting) {
      element.dispatchCustomEventForTesting(_ampEvents.AmpEvents.ERROR, error.message);
    }

    // 'call' to make linter happy. And .call to make compiler happy
    // that expects some @this.
    reportErrorToServer['call'](undefined, undefined, undefined, undefined, undefined, error);
  } catch (errorReportingError) {
    setTimeout(function () {
      throw errorReportingError;
    });
  }
  return (/** @type {!Error} */error
  );
}

/**
 * Returns an error for a cancellation of a promise.
 * @return {!Error}
 */
function cancellation() {
  return new Error(CANCELLED);
}

/**
 * @param {*} errorOrMessage
 * @return {boolean}
 */
function isCancellation(errorOrMessage) {
  if (!errorOrMessage) {
    return false;
  }
  if (typeof errorOrMessage == 'string') {
    return (0, _string.startsWith)(errorOrMessage, CANCELLED);
  }
  if (typeof errorOrMessage.message == 'string') {
    return (0, _string.startsWith)(errorOrMessage.message, CANCELLED);
  }
  return false;
}

/**
 * Returns an error for component blocked by consent
 * @return {!Error}
 */
function blockedByConsentError() {
  return new Error(BLOCK_BY_CONSENT);
}

/**
 * @param {*} errorOrMessage
 * @return {boolean}
 */
function isBlockedByConsent(errorOrMessage) {
  if (!errorOrMessage) {
    return false;
  }
  if (typeof errorOrMessage == 'string') {
    return (0, _string.startsWith)(errorOrMessage, BLOCK_BY_CONSENT);
  }
  if (typeof errorOrMessage.message == 'string') {
    return (0, _string.startsWith)(errorOrMessage.message, BLOCK_BY_CONSENT);
  }
  return false;
}

/**
 * Install handling of global unhandled exceptions.
 * @param {!Window} win
 */
function installErrorReporting(win) {
  win.onerror = /** @type {!Function} */reportErrorToServer;
  win.addEventListener('unhandledrejection', function (event) {
    if (event.reason && (event.reason.message === CANCELLED || event.reason.message === BLOCK_BY_CONSENT)) {
      event.preventDefault();
      return;
    }
    reportError(event.reason || new Error('rejected promise ' + event));
  });
}

/**
 * Signature designed, so it can work with window.onerror
 * @param {string|undefined} message
 * @param {string|undefined} filename
 * @param {string|undefined} line
 * @param {string|undefined} col
 * @param {*|undefined} error
 * @this {!Window|undefined}
 */
function reportErrorToServer(message, filename, line, col, error) {
  // Make an attempt to unhide the body.
  if (this && this.document) {
    (0, _styleInstaller.makeBodyVisible)(this.document);
  }
  if ((0, _mode.getMode)().localDev || (0, _mode.getMode)().development || (0, _mode.getMode)().test) {
    return;
  }
  var hasNonAmpJs = false;
  try {
    hasNonAmpJs = detectNonAmpJs(self);
  } catch (ignore) {
    // Ignore errors during error report generation.
  }
  if (hasNonAmpJs && Math.random() > 0.01) {
    // Only report 1% of errors on pages with non-AMP JS.
    // These errors can almost never be acted upon, but spikes such as
    // due to buggy browser extensions may be helpful to notify authors.
    return;
  }
  var data = getErrorReportData(message, filename, line, col, error, hasNonAmpJs);
  if (data) {
    // Report the error to viewer if it has the capability. The data passed
    // to the viewer is exactly the same as the data passed to the server
    // below.
    maybeReportErrorToViewer(this, data);
    _reportingBackoff(function () {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', _config.urls.errorReporting, true);
      xhr.send(JSON.stringify(data));
    });
  }
}

/**
 * Passes the given error data to the viewer if the following criteria is met:
 * - The viewer is a trusted viewer
 * - The viewer has the `errorReporter` capability
 * - The AMP doc is in single doc mode
 * - The AMP doc is opted-in for error interception (`<html>` tag has the
 *   `report-errors-to-viewer` attribute)
 *
 * @param {!Window} win
 * @param {!JsonObject} data Data from `getErrorReportData`.
 * @return {!Promise<boolean>} `Promise<True>` if the error was sent to the
 *     viewer, `Promise<False>` otherwise.
 * @visibleForTesting
 */
function maybeReportErrorToViewer(win, data) {
  var ampdocService = _services.Services.ampdocServiceFor(win);
  if (!ampdocService.isSingleDoc()) {
    return Promise.resolve(false);
  }
  var ampdocSingle = ampdocService.getAmpDoc();
  var htmlElement = ampdocSingle.getRootNode().documentElement;
  var docOptedIn = htmlElement.hasAttribute('report-errors-to-viewer');
  if (!docOptedIn) {
    return Promise.resolve(false);
  }

  var viewer = _services.Services.viewerForDoc(ampdocSingle);
  if (!viewer.hasCapability('errorReporter')) {
    return Promise.resolve(false);
  }

  return viewer.isTrustedViewer().then(function (viewerTrusted) {
    if (!viewerTrusted) {
      return false;
    }
    viewer.sendMessage('error', data);
    return true;
  });
}

/**
 * Signature designed, so it can work with window.onerror
 * @param {string|undefined} message
 * @param {string|undefined} filename
 * @param {string|undefined} line
 * @param {string|undefined} col
 * @param {*|undefined} error
 * @param {boolean} hasNonAmpJs
 * @return {!JsonObject|undefined} The data to post
 * visibleForTesting
 */
function getErrorReportData(message, filename, line, col, error, hasNonAmpJs) {
  var expected = false;
  if (error) {
    if (error.message) {
      message = error.message;
    } else {
      // This should never be a string, but sometimes it is.
      message = String(error);
    }
    // An "expected" error is still an error, i.e. some features are disabled
    // or not functioning fully because of it. However, it's an expected
    // error. E.g. as is the case with some browser API missing (storage).
    // Thus, the error can be classified differently by log aggregators.
    // The main goal is to monitor that an "expected" error doesn't deteriorate
    // over time. It's impossible to completely eliminate it.
    if (error.expected) {
      expected = true;
    }
  }
  if (!message) {
    message = 'Unknown error';
  }
  if (/_reported_/.test(message)) {
    return;
  }
  if (message == CANCELLED) {
    return;
  }

  var detachedWindow = !(self && self.window);
  var throttleBase = Math.random();

  // We throttle load errors and generic "Script error." errors
  // that have no information and thus cannot be acted upon.
  if ((0, _eventHelper.isLoadErrorMessage)(message) ||
  // See https://github.com/ampproject/amphtml/issues/7353
  // for context.
  message == 'Script error.' ||
  // Window has become detached, really anything can happen
  // at this point.
  detachedWindow) {
    expected = true;

    if (throttleBase > NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD) {
      return;
    }
  }

  var isUserError = (0, _log.isUserErrorMessage)(message);

  // Only report a subset of user errors.
  if (isUserError && throttleBase > USER_ERROR_THROTTLE_THRESHOLD) {
    return;
  }

  // This is the App Engine app in
  // https://github.com/ampproject/error-tracker
  // It stores error reports via https://cloud.google.com/error-reporting/
  // for analyzing production issues.
  var data = /** @type {!JsonObject} */Object.create(null);
  data['v'] = (0, _mode.getMode)().rtvVersion;
  data['noAmp'] = hasNonAmpJs ? '1' : '0';
  data['m'] = message.replace(_log.USER_ERROR_SENTINEL, '');
  data['a'] = isUserError ? '1' : '0';

  // Errors are tagged with "ex" ("expected") label to allow loggers to
  // classify these errors as benchmarks and not exceptions.
  data['ex'] = expected ? '1' : '0';
  data['dw'] = detachedWindow ? '1' : '0';

  var runtime = '1p';
  if (self.context && self.context.location) {
    data['3p'] = '1';
    runtime = '3p';
  } else if ((0, _mode.getMode)().runtime) {
    runtime = (0, _mode.getMode)().runtime;
  }
  data['rt'] = runtime;

  // TODO(erwinm): Remove ca when all systems read `bt` instead of `ca` to
  // identify js binary type.
  data['ca'] = (0, _experiments.isCanary)(self) ? '1' : '0';

  // Pass binary type.
  data['bt'] = (0, _experiments.getBinaryType)(self);

  if (self.location.ancestorOrigins && self.location.ancestorOrigins[0]) {
    data['or'] = self.location.ancestorOrigins[0];
  }
  if (self.viewerState) {
    data['vs'] = self.viewerState;
  }
  // Is embedded?
  if (self.parent && self.parent != self) {
    data['iem'] = '1';
  }

  if (self.AMP && self.AMP.viewer) {
    var resolvedViewerUrl = self.AMP.viewer.getResolvedViewerUrl();
    var messagingOrigin = self.AMP.viewer.maybeGetMessagingOrigin();
    if (resolvedViewerUrl) {
      data['rvu'] = resolvedViewerUrl;
    }
    if (messagingOrigin) {
      data['mso'] = messagingOrigin;
    }
  }

  if (!detectedJsEngine) {
    detectedJsEngine = detectJsEngineFromStack();
  }
  data['jse'] = detectedJsEngine;

  var exps = [];
  var experiments = (0, _experiments.experimentTogglesOrNull)(self);
  for (var exp in experiments) {
    var on = experiments[exp];
    exps.push(exp + '=' + (on ? '1' : '0'));
  }
  data['exps'] = exps.join(',');

  if (error) {
    var tagName = error.associatedElement ? error.associatedElement.tagName : 'u'; // Unknown
    data['el'] = tagName;

    if (error.args) {
      data['args'] = JSON.stringify(error.args);
    }

    if (!isUserError && !error.ignoreStack && error.stack) {
      data['s'] = error.stack;
    }

    error.message += ' _reported_';
  } else {
    data['f'] = filename || '';
    data['l'] = line || '';
    data['c'] = col || '';
  }
  data['r'] = self.document.referrer;
  data['ae'] = accumulatedErrorMessages.join(',');
  data['fr'] = self.location.originalHash || self.location.hash;

  pushLimit(accumulatedErrorMessages, message, 25);

  return data;
}

/**
 * Returns true if it appears like there is non-AMP JS on the
 * current page.
 * @param {!Window} win
 * @return {boolean}
 * @visibleForTesting
 */
function detectNonAmpJs(win) {
  var scripts = win.document.querySelectorAll('script[src]');
  for (var i = 0; i < scripts.length; i++) {
    if (!(0, _url.isProxyOrigin)(scripts[i].src.toLowerCase())) {
      return true;
    }
  }
  return false;
}

/**
 * Resets accumulated error messages for testing
 */
function resetAccumulatedErrorMessagesForTesting() {
  accumulatedErrorMessages = [];
}

/**
 * Does a series of checks on the stack of an thrown error to determine the
 * JS engine that is currently running. This gives a bit more information than
 * just the UserAgent, since browsers often allow overriding it to "emulate"
 * mobile.
 * @return {string}
 * @visibleForTesting
 */
function detectJsEngineFromStack() {
  /** @constructor */
  function Fn() {}
  Fn.prototype.t = function () {
    throw new Error('message');
  };
  var object = new Fn();
  try {
    object.t();
  } catch (e) {
    var stack = e.stack;

    // Safari only mentions the method name.

    if ((0, _string.startsWith)(stack, 't@')) {
      return 'Safari';
    }

    // Firefox mentions "prototype".
    if (stack.indexOf('.prototype.t@') > -1) {
      return 'Firefox';
    }

    // IE looks like Chrome, but includes a context for the base stack line.
    // Explicitly, we're looking for something like:
    // "    at Global code (https://example.com/app.js:1:200)" or
    // "    at Anonymous function (https://example.com/app.js:1:200)"
    // vs Chrome which has:
    // "    at https://example.com/app.js:1:200"
    var last = stack.split('\n').pop();
    if (/\bat .* \(/i.test(last)) {
      return 'IE';
    }

    // Finally, chrome includes the error message in the stack.
    if ((0, _string.startsWith)(stack, 'Error: message')) {
      return 'Chrome';
    }
  }

  return 'unknown';
}

/**
 * @param {!Error} error
 * @param {!Window} win
 */
function reportErrorToAnalytics(error, win) {
  if ((0, _experiments.isExperimentOn)(win, 'user-error-reporting')) {
    var vars = {
      'errorName': error.name,
      'errorMessage': error.message
    };
    (0, _analytics.triggerAnalyticsEvent)(getRootElement_(win), 'user-error', vars);
  }
}

/**
 * @param {!Window} win
 * @return {!Element}
 * @private
 */
function getRootElement_(win) {
  var root = _services.Services.ampdocServiceFor(win).getAmpDoc().getRootNode();
  return (0, _log.dev)().assertElement(root.documentElement || root.body || root);
}

},{"./amp-events":9,"./analytics":11,"./config":16,"./event-helper":27,"./experiments":28,"./exponential-backoff":29,"./log":45,"./mode":47,"./services":104,"./string":108,"./style-installer":109,"./url":116}],26:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.internalListenImplementation = internalListenImplementation;
exports.detectEvtListenerOptsSupport = detectEvtListenerOptsSupport;
exports.resetEvtListenerOptsSupportForTesting = resetEvtListenerOptsSupportForTesting;
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
  * Whether addEventListener supports options or only takes capture as a boolean
  * @type {boolean|undefined}
  * @visibleForTesting
  */
var optsSupported = void 0;

/**
 * Listens for the specified event on the element.
 *
 * Do not use this directly. This method is implemented as a shared
 * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,
 * depending on your use case.
 *
 * @param {!EventTarget} element
 * @param {string} eventType
 * @param {function(!Event)} listener
 * @param {Object=} opt_evtListenerOpts
 * @return {!UnlistenDef}
 */
function internalListenImplementation(element, eventType, listener, opt_evtListenerOpts) {
  var localElement = element;
  var localListener = listener;
  /**
   * @type {?Function}
   */
  var wrapped = void 0;

  wrapped = function wrapped(event) {
    try {
      return localListener(event);
    } catch (e) {
      // reportError is installed globally per window in the entry point.
      self.reportError(e);
      throw e;
    }
  };
  var optsSupported = detectEvtListenerOptsSupport();
  var capture = false;
  if (opt_evtListenerOpts) {
    capture = opt_evtListenerOpts.capture;
  }
  localElement.addEventListener(eventType, wrapped, optsSupported ? opt_evtListenerOpts : capture);
  return function () {
    if (localElement) {
      localElement.removeEventListener(eventType, wrapped, optsSupported ? opt_evtListenerOpts : capture);
    }
    // Ensure these are GC'd
    localListener = null;
    localElement = null;
    wrapped = null;
  };
}

/**
 * Tests whether the browser supports options as an argument of addEventListener
 * or not.
 *
 * @return {boolean}
 */
function detectEvtListenerOptsSupport() {
  // Only run the test once
  if (optsSupported !== undefined) {
    return optsSupported;
  }

  optsSupported = false;
  try {
    // Test whether browser supports EventListenerOptions or not
    var options = {
      get capture() {
        optsSupported = true;
      }
    };
    self.addEventListener('test-options', null, options);
    self.removeEventListener('test-options', null, options);
  } catch (err) {
    // EventListenerOptions are not supported
  }
  return optsSupported;
}

/**
  * Resets the test for whether addEventListener supports options or not.
  */
function resetEvtListenerOptsSupportForTesting() {
  optsSupported = undefined;
}

},{}],27:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCustomEvent = createCustomEvent;
exports.listen = listen;
exports.getData = getData;
exports.getDetail = getDetail;
exports.listenOnce = listenOnce;
exports.listenOncePromise = listenOncePromise;
exports.isLoaded = isLoaded;
exports.loadPromise = loadPromise;
exports.isLoadErrorMessage = isLoadErrorMessage;

var _eventHelperListen = require('./event-helper-listen');

var _log = require('./log');

/** @const {string}  */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var LOAD_FAILURE_PREFIX = 'Failed to load:';

/**
 * Returns a CustomEvent with a given type and detail; supports fallback for IE.
 * @param {!Window} win
 * @param {string} type
 * @param {!JsonObject|string|undefined|null} detail
 * @param {EventInit=} opt_eventInit
 * @return {!Event}
 */
function createCustomEvent(win, type, detail, opt_eventInit) {
  var eventInit = /** @type {!CustomEventInit} */{ detail: detail };
  Object.assign(eventInit, opt_eventInit);
  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but
  // is an object on IE 11.
  if (typeof win.CustomEvent == 'function') {
    return new win.CustomEvent(type, eventInit);
  } else {
    // Deprecated fallback for IE.
    var e = win.document.createEvent('CustomEvent');
    e.initCustomEvent(type, !!eventInit.bubbles, !!eventInit.cancelable, detail);
    return e;
  }
}

/**
 * Listens for the specified event on the element.
 * @param {!EventTarget} element
 * @param {string} eventType
 * @param {function(!Event)} listener
 * @param {Object=} opt_evtListenerOpts
 * @return {!UnlistenDef}
 */
function listen(element, eventType, listener, opt_evtListenerOpts) {
  return (0, _eventHelperListen.internalListenImplementation)(element, eventType, listener, opt_evtListenerOpts);
}

/**
 * Returns the data property of an event with the correct type.
 * @param {!Event|{data: !JsonObject}} event
 * @return {?JsonObject|string|undefined}
 */
function getData(event) {
  return (/** @type {?JsonObject|string|undefined} */event.data
  );
}

/**
 * Returns the detail property of an event with the correct type.
 * @param {!Event|{detail: !JsonObject}} event
 * @return {?JsonObject|string|undefined}
 */
function getDetail(event) {
  return (/** @type {?JsonObject|string|undefined} */event.detail
  );
}

/**
 * Listens for the specified event on the element and removes the listener
 * as soon as event has been received.
 * @param {!EventTarget} element
 * @param {string} eventType
 * @param {function(!Event)} listener
 * @param {Object=} opt_evtListenerOpts
 * @return {!UnlistenDef}
 */
function listenOnce(element, eventType, listener, opt_evtListenerOpts) {
  var localListener = listener;
  var unlisten = (0, _eventHelperListen.internalListenImplementation)(element, eventType, function (event) {
    try {
      localListener(event);
    } finally {
      // Ensure listener is GC'd
      localListener = null;
      unlisten();
    }
  }, opt_evtListenerOpts);
  return unlisten;
}

/**
 * Returns  a promise that will resolve as soon as the specified event has
 * fired on the element.
 * @param {!EventTarget} element
 * @param {string} eventType
 * @param {Object=} opt_evtListenerOpts
 * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when
 *     provided, will be called with the unlistener. This gives the caller
 *     access to the unlistener, so it may be called manually when necessary.
 * @return {!Promise<!Event>}
 */
function listenOncePromise(element, eventType, opt_evtListenerOpts, opt_cancel) {
  var unlisten = void 0;
  var eventPromise = new Promise(function (resolve) {
    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);
  });
  eventPromise.then(unlisten, unlisten);
  if (opt_cancel) {
    opt_cancel(unlisten);
  }
  return eventPromise;
}

/**
 * Whether the specified element/window has been loaded already.
 * @param {!Element|!Window} eleOrWindow
 * @return {boolean}
 */
function isLoaded(eleOrWindow) {
  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'
  // If the passed in thing is a Window, infer loaded state from
  //
  || eleOrWindow.document && eleOrWindow.document.readyState == 'complete');
}

/**
 * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'
 * and 'error' events. Optionally this method takes a timeout, which will reject
 * the promise if the resource has not loaded by then.
 * @param {T} eleOrWindow Supports both Elements and as a special case Windows.
 * @return {!Promise<T>}
 * @template T
 */
function loadPromise(eleOrWindow) {
  var unlistenLoad = void 0;
  var unlistenError = void 0;
  if (isLoaded(eleOrWindow)) {
    return Promise.resolve(eleOrWindow);
  }
  var loadingPromise = new Promise(function (resolve, reject) {
    // Listen once since IE 5/6/7 fire the onload event continuously for
    // animated GIFs.
    var tagName = eleOrWindow.tagName;

    if (tagName === 'AUDIO' || tagName === 'VIDEO') {
      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);
    } else {
      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);
    }
    // For elements, unlisten on error (don't for Windows).
    if (tagName) {
      unlistenError = listenOnce(eleOrWindow, 'error', reject);
    }
  });

  return loadingPromise.then(function () {
    if (unlistenError) {
      unlistenError();
    }
    return eleOrWindow;
  }, function () {
    if (unlistenLoad) {
      unlistenLoad();
    }
    failedToLoad(eleOrWindow);
  });
}

/**
 * Emit error on load failure.
 * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special
 *     case Windows.
 */
function failedToLoad(eleOrWindow) {
  // Report failed loads as user errors so that they automatically go
  // into the "document error" bucket.
  var target = eleOrWindow;
  if (target && target.src) {
    target = target.src;
  }
  throw (0, _log.user)().createError(LOAD_FAILURE_PREFIX, target);
}

/**
 * Returns true if this error message is was created for a load error.
 * @param {string} message An error message
 * @return {boolean}
 */
function isLoadErrorMessage(message) {
  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;
}

},{"./event-helper-listen":26,"./log":45}],28:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RANDOM_NUMBER_GENERATORS = exports.ExperimentInfo = undefined;
exports.isCanary = isCanary;
exports.getBinaryType = getBinaryType;
exports.isExperimentOn = isExperimentOn;
exports.toggleExperiment = toggleExperiment;
exports.experimentToggles = experimentToggles;
exports.experimentTogglesOrNull = experimentTogglesOrNull;
exports.getExperimentToglesFromCookieForTesting = getExperimentToglesFromCookieForTesting;
exports.resetExperimentTogglesForTesting = resetExperimentTogglesForTesting;
exports.randomlySelectUnsetExperiments = randomlySelectUnsetExperiments;
exports.getExperimentBranch = getExperimentBranch;
exports.forceExperimentBranch = forceExperimentBranch;

var _cookies = require('./cookies');

var _object = require('./utils/object');

var _url = require('./url');

/** @const {string} */
var COOKIE_NAME = 'AMP_EXP';

/** @const {number} */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Experiments system allows a developer to opt-in to test
 * features that are not yet fully tested.
 *
 * Experiments page: https://cdn.ampproject.org/experiments.html *
 */

var COOKIE_MAX_AGE_DAYS = 180; // 6 month

/** @const {time} */
var COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;

/** @const {string} */
var TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';

/**
 * @typedef {{
 *   isTrafficEligible: function(!Window):boolean,
 *   branches: !Array<string>
 * }}
 */
var ExperimentInfo = exports.ExperimentInfo = void 0;

/**
 * Whether we are in canary.
 * @param {!Window} win
 * @return {boolean}
 */
function isCanary(win) {
  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);
}

/**
 * Returns binary type, e.g., canary, control, or production.
 * @param {!Window} win
 * @return {string}
 */
function getBinaryType(win) {
  return win.AMP_CONFIG && win.AMP_CONFIG.type ? win.AMP_CONFIG.type : 'unknown';
}

/**
 * Whether the specified experiment is on or off.
 * @param {!Window} win
 * @param {string} experimentId
 * @return {boolean}
 */
function isExperimentOn(win, experimentId) {
  var toggles = experimentToggles(win);
  return !!toggles[experimentId];
}

/**
 * Toggles the experiment on or off. Returns the actual value of the experiment
 * after toggling is done.
 * @param {!Window} win
 * @param {string} experimentId
 * @param {boolean=} opt_on
 * @param {boolean=} opt_transientExperiment  Whether to toggle the
 *     experiment state "transiently" (i.e., for this page load only) or
 *     durably (by saving the experiment IDs to the cookie after toggling).
 *     Default: false (save durably).
 * @return {boolean} New state for experimentId.
 */
function toggleExperiment(win, experimentId, opt_on, opt_transientExperiment) {
  var currentlyOn = isExperimentOn(win, /*OK*/experimentId);
  var on = !!(opt_on !== undefined ? opt_on : !currentlyOn);
  if (on != currentlyOn) {
    var toggles = experimentToggles(win);
    toggles[experimentId] = on;

    if (!opt_transientExperiment) {
      var cookieToggles = getExperimentTogglesFromCookie(win);
      cookieToggles[experimentId] = on;
      saveExperimentTogglesToCookie(win, cookieToggles);
    }
  }
  return on;
}

/**
 * Calculate whether the experiment is on or off based off of the
 * cookieFlag or the global config frequency given.
 * @param {!Window} win
 * @return {!Object<string, boolean>}
 */
function experimentToggles(win) {
  if (win[TOGGLES_WINDOW_PROPERTY]) {
    return win[TOGGLES_WINDOW_PROPERTY];
  }
  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);
  var toggles = win[TOGGLES_WINDOW_PROPERTY];

  // Read the default config of this build.
  if (win.AMP_CONFIG) {
    for (var experimentId in win.AMP_CONFIG) {
      var frequency = win.AMP_CONFIG[experimentId];
      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {
        toggles[experimentId] = Math.random() < frequency;
      }
    }
  }
  // Read document level override from meta tag.
  if (win.AMP_CONFIG && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in']) && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {
    var allowed = win.AMP_CONFIG['allow-doc-opt-in'];
    var meta = win.document.head.querySelector('meta[name="amp-experiments-opt-in"]');
    if (meta) {
      var optedInExperiments = meta.getAttribute('content').split(',');
      for (var i = 0; i < optedInExperiments.length; i++) {
        if (allowed.indexOf(optedInExperiments[i]) != -1) {
          toggles[optedInExperiments[i]] = true;
        }
      }
    }
  }

  Object.assign(toggles, getExperimentTogglesFromCookie(win));

  if (win.AMP_CONFIG && Array.isArray(win.AMP_CONFIG['allow-url-opt-in']) && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {
    var _allowed = win.AMP_CONFIG['allow-url-opt-in'];
    var hash = win.location.originalHash || win.location.hash;
    var params = (0, _url.parseQueryString)(hash);
    for (var _i = 0; _i < _allowed.length; _i++) {
      var param = params['e-' + _allowed[_i]];
      if (param == '1') {
        toggles[_allowed[_i]] = true;
      }
      if (param == '0') {
        toggles[_allowed[_i]] = false;
      }
    }
  }
  return toggles;
}

/**
 * Returns the cached experiments toggles, or null if they have not been
 * computed yet.
 * @param {!Window} win
 * @return {Object<string, boolean>}
 */
function experimentTogglesOrNull(win) {
  return win[TOGGLES_WINDOW_PROPERTY] || null;
}

/**
 * Returns a set of experiment IDs currently on.
 * @param {!Window} win
 * @return {!Object<string, boolean>}
 */
function getExperimentTogglesFromCookie(win) {
  var experimentCookie = (0, _cookies.getCookie)(win, COOKIE_NAME);
  var tokens = experimentCookie ? experimentCookie.split(/\s*,\s*/g) : [];

  var toggles = Object.create(null);
  for (var i = 0; i < tokens.length; i++) {
    if (tokens[i].length == 0) {
      continue;
    }
    if (tokens[i][0] == '-') {
      toggles[tokens[i].substr(1)] = false;
    } else {
      toggles[tokens[i]] = true;
    }
  }

  return toggles;
}

/**
 * Saves a set of experiment IDs currently on.
 * @param {!Window} win
 * @param {!Object<string, boolean>} toggles
 */
function saveExperimentTogglesToCookie(win, toggles) {
  var experimentIds = [];
  for (var experiment in toggles) {
    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);
  }

  (0, _cookies.setCookie)(win, COOKIE_NAME, experimentIds.join(','), Date.now() + COOKIE_EXPIRATION_INTERVAL, {
    // Set explicit domain, so the cookie gets send to sub domains.
    domain: win.location.hostname,
    allowOnProxyOrigin: true
  });
}

/**
 * See getExperimentTogglesFromCookie().
 * @param {!Window} win
 * @return {!Object<string, boolean>}
 * @visibleForTesting
 */
function getExperimentToglesFromCookieForTesting(win) {
  return getExperimentTogglesFromCookie(win);
}

/**
 * Resets the experimentsToggle cache for testing purposes.
 * @param {!Window} win
 * @visibleForTesting
 */
function resetExperimentTogglesForTesting(win) {
  (0, _cookies.setCookie)(win, COOKIE_NAME, '', 0, {
    domain: win.location.hostname
  });
  win[TOGGLES_WINDOW_PROPERTY] = null;
}

/**
 * In some browser implementations of Math.random(), sequential calls of
 * Math.random() are correlated and can cause a bias.  In particular,
 * if the previous random() call was < 0.001 (as it will be if we select
 * into an experiment), the next value could be less than 0.5 more than
 * 50.7% of the time.  This provides an implementation that roots down into
 * the crypto API, when available, to produce less biased samples.
 *
 * @return {number} Pseudo-random floating-point value on the range [0, 1).
 */
function slowButAccuratePrng() {
  // TODO(tdrl): Implement.
  return Math.random();
}

/**
 * Container for alternate random number generator implementations.  This
 * allows us to set an "accurate" PRNG for branch selection, but to mock it
 * out easily in tests.
 *
 * @visibleForTesting
 * @const {!{accuratePrng: function():number}}
 */
var RANDOM_NUMBER_GENERATORS = exports.RANDOM_NUMBER_GENERATORS = {
  accuratePrng: slowButAccuratePrng
};

/**
 * Selects, uniformly at random, a single item from the array.
 * @param {!Array<string>} arr Object to select from.
 * @return {?string} Single item from arr or null if arr was empty.
 */
function selectRandomItem(arr) {
  var rn = RANDOM_NUMBER_GENERATORS.accuratePrng();
  return arr[Math.floor(rn * arr.length)] || null;
}

/**
 * Selects which page-level experiment branches are enabled. If a given
 * experiment name is already set (including to the null / no branches selected
 * state), this won't alter its state.
 *
 * Check whether a given experiment is set using isExperimentOn(win,
 * experimentName) and, if it is on, look for which branch is selected in
 * win.experimentBranches[experimentName].
 *
 * @param {!Window} win Window context on which to save experiment
 *     selection state.
 * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to
 *     configure for this page load.
 * @return {!Object<string, string>} Map of experiment names to selected
 *     branches.
 */
function randomlySelectUnsetExperiments(win, experiments) {
  win.experimentBranches = win.experimentBranches || {};
  var selectedExperiments = {};
  for (var experimentName in experiments) {
    // Skip experimentName if it is not a key of experiments object or if it
    // has already been populated by some other property.
    if (!(0, _object.hasOwn)(experiments, experimentName)) {
      continue;
    }
    if ((0, _object.hasOwn)(win.experimentBranches, experimentName)) {
      selectedExperiments[experimentName] = win.experimentBranches[experimentName];
      continue;
    }

    if (!experiments[experimentName].isTrafficEligible || !experiments[experimentName].isTrafficEligible(win)) {
      win.experimentBranches[experimentName] = null;
      continue;
    }

    // If we're in the experiment, but we haven't already forced a specific
    // experiment branch (e.g., via a test setup), then randomize the branch
    // choice.
    if (!win.experimentBranches[experimentName] && isExperimentOn(win, /*OK*/experimentName)) {
      var branches = experiments[experimentName].branches;

      win.experimentBranches[experimentName] = selectRandomItem(branches);
      selectedExperiments[experimentName] = win.experimentBranches[experimentName];
    }
  }
  return selectedExperiments;
}

/**
 * Returns the experiment branch enabled for the given experiment ID.
 * For example, 'control' or 'experiment'.
 *
 * @param {!Window} win Window context to check for experiment state.
 * @param {string} experimentName Name of the experiment to check.
 * @return {?string} Active experiment branch ID for experimentName (possibly
 *     null if experimentName has been tested but no branch was enabled).
 */
function getExperimentBranch(win, experimentName) {
  return win.experimentBranches ? win.experimentBranches[experimentName] : null;
}

/**
 * Force enable (or disable) a specific branch of a given experiment name.
 * Disables the experiment name altogether if branchId is falseish.
 *
 * @param {!Window} win Window context to check for experiment state.
 * @param {string} experimentName Name of the experiment to check.
 * @param {?string} branchId ID of branch to force or null to disable
 *     altogether.
 * @visibleForTesting
 */
function forceExperimentBranch(win, experimentName, branchId) {
  win.experimentBranches = win.experimentBranches || {};
  toggleExperiment(win, experimentName, !!branchId, true);
  win.experimentBranches[experimentName] = branchId;
}

},{"./cookies":17,"./url":116,"./utils/object":123}],29:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exponentialBackoff = exponentialBackoff;
exports.exponentialBackoffClock = exponentialBackoffClock;
exports.getJitter = getJitter;
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param {number=} opt_base Exponential base. Defaults to 2.
 * @return {function(function()): number} Function that when invoked will
 *     call the passed in function. On every invocation the next
 *     invocation of the passed in function will be exponentially
 *     later. Returned function returns timeout id.
 */
function exponentialBackoff(opt_base) {
  var getTimeout = exponentialBackoffClock(opt_base);
  return function (work) {
    return setTimeout(work, getTimeout());
  };
}

/**
 * @param {number=} opt_base Exponential base. Defaults to 2.
 * @return {function(): number} Function that when invoked will return
 *    a number that exponentially grows per invocation.
 */
function exponentialBackoffClock(opt_base) {
  var base = opt_base || 2;
  var count = 0;
  return function () {
    var wait = Math.pow(base, count++);
    wait += getJitter(wait);
    return wait * 1000;
  };
}

/**
 * Add jitter to avoid the thundering herd. This can e.g. happen when
 * we poll a backend and it fails for everyone at the same time.
 * We add up to 30% (default) longer or shorter than the given time.
 *
 * @param {number} wait the amount if base milliseconds
 * @param {number=} opt_perc the min/max percentage to add or sutract
 * @return {number}
 */
function getJitter(wait, opt_perc) {
  opt_perc = opt_perc || .3;
  var jitter = wait * opt_perc * Math.random();
  if (Math.random() > .5) {
    jitter *= -1;
  }
  return jitter;
}

},{}],30:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FiniteStateMachine = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _log = require('./log');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @template STATE
 */
var FiniteStateMachine = exports.FiniteStateMachine = function () {

  /**
   * Constructs a FSM using the bits defined in initialState as changeable
   * states.
   * @param {STATE} initialState
   */
  function FiniteStateMachine(initialState) {
    _classCallCheck(this, FiniteStateMachine);

    /**
     * The current state of the FSM
     * @private {STATE}
     */
    this.state_ = initialState;

    /**
     * Callbacks that are invoked when transitioning from an old state
     * to the new.
     * @private {Object<string, function()>}
     */
    this.transitions_ = Object.create(null);
  }

  /**
   * Adds a transition callback that will be called when the oldState
   * transitions to the newState.
   * @param {STATE} oldState
   * @param {STATE} newState
   * @param {function()} callback
   */


  _createClass(FiniteStateMachine, [{
    key: 'addTransition',
    value: function addTransition(oldState, newState, callback) {
      var transition = this.statesToTransition_(oldState, newState);
      (0, _log.dev)().assert(!this.transitions_[transition], 'cannot define a duplicate transition callback');
      this.transitions_[transition] = callback;
    }

    /**
     * Transitions to the newState and invokes the registered transition
     * callback, if one is defined.
     * @param {STATE} newState
     */

  }, {
    key: 'setState',
    value: function setState(newState) {
      var oldState = this.state_;
      this.state_ = newState;

      var transition = this.statesToTransition_(oldState, newState);
      var callback = this.transitions_[transition];

      if (callback) {
        callback();
      }
    }

    /**
     * Transforms the state transition into a key which identifies a callback.
     * @private
     * @param {STATE} oldState
     * @param {STATE} newState
     * @return {string}
     */

  }, {
    key: 'statesToTransition_',
    value: function statesToTransition_(oldState, newState) {
      return oldState + '|' + newState;
    }
  }]);

  return FiniteStateMachine;
}();

},{"./log":45}],31:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusHistory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _observable = require('./observable');

var _services = require('./services');

var _log = require('./log');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * FocusHistory keeps track of recent focused elements. This history can be
 * purged using `purgeBefore` method.
 */
var FocusHistory = exports.FocusHistory = function () {
  /**
   * @param {!Window} win
   * @param {number} purgeTimeout
   */
  function FocusHistory(win, purgeTimeout) {
    var _this = this;

    _classCallCheck(this, FocusHistory);

    /** @const {!Window} */
    this.win = win;

    /** @private @const {number} */
    this.purgeTimeout_ = purgeTimeout;

    /** @private @const {!Array<!{el: !Element, time: time}>} */
    this.history_ = [];

    /** @private @const {!Observable<!Element>} */
    this.observeFocus_ = new _observable.Observable();

    /**
     * @private
     * @param {!Event} e
     */
    this.captureFocus_ = function (e) {
      // Hack (#15079) due to Firefox firing focus events on the entire page
      if (e.target && e.target.nodeType == 1) {
        _this.pushFocus_((0, _log.dev)().assertElement(e.target));
      }
    };

    /**
     * @private
     * @param {*} unusedE
     */
    this.captureBlur_ = function (unusedE) {
      // IFrame elements do not receive `focus` event. An alternative way is
      // implemented here. We wait for a blur to arrive on the main window
      // and after a short time check which element is active.
      _services.Services.timerFor(win).delay(function () {
        _this.pushFocus_(_this.win.document.activeElement);
      }, 500);
    };
    this.win.document.addEventListener('focus', this.captureFocus_, true);
    this.win.addEventListener('blur', this.captureBlur_);
  }

  /** @visibleForTesting */


  _createClass(FocusHistory, [{
    key: 'cleanup_',
    value: function cleanup_() {
      this.win.document.removeEventListener('focus', this.captureFocus_, true);
      this.win.removeEventListener('blur', this.captureBlur_);
    }

    /**
     * Add a listener for focus events.
     * @param {function(!Element)} handler
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onFocus',
    value: function onFocus(handler) {
      return this.observeFocus_.add(handler);
    }

    /**
     * @param {!Element} element
     * @private
     */

  }, {
    key: 'pushFocus_',
    value: function pushFocus_(element) {
      var now = Date.now();
      if (this.history_.length == 0 || this.history_[this.history_.length - 1].el != element) {
        this.history_.push({ el: element, time: now });
      } else {
        this.history_[this.history_.length - 1].time = now;
      }
      this.purgeBefore(now - this.purgeTimeout_);
      this.observeFocus_.fire(element);
    }

    /**
     * Returns the element that was focused last.
     * @return {?Element}
     */

  }, {
    key: 'getLast',
    value: function getLast() {
      if (this.history_.length == 0) {
        return null;
      }
      return this.history_[this.history_.length - 1].el;
    }

    /**
     * Removes elements from the history older than the specified time.
     * @param {time} time
     */

  }, {
    key: 'purgeBefore',
    value: function purgeBefore(time) {
      var index = this.history_.length - 1;
      for (var i = 0; i < this.history_.length; i++) {
        if (this.history_[i].time >= time) {
          index = i - 1;
          break;
        }
      }
      if (index != -1) {
        this.history_.splice(0, index + 1);
      }
    }

    /**
     * Returns `true` if the specified element contains any of the elements in
     * the history.
     * @param {!Element} element
     * @return {boolean}
     */

  }, {
    key: 'hasDescendantsOf',
    value: function hasDescendantsOf(element) {
      if (this.win.document.activeElement) {
        this.pushFocus_(this.win.document.activeElement);
      }
      for (var i = 0; i < this.history_.length; i++) {
        if (element.contains(this.history_[i].el)) {
          return true;
        }
      }
      return false;
    }
  }]);

  return FocusHistory;
}();

},{"./log":45,"./observable":48,"./services":104}],32:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fontStylesheetTimeout = fontStylesheetTimeout;

var _dom = require('./dom');

var _experiments = require('./experiments');

var _documentReady = require('./document-ready');

var _config = require('./config');

/**
 * While browsers put a timeout on font downloads (3s by default,
 * some less on slow connections), there is no such timeout for style
 * sheets. In the case of AMP external stylesheets are ONLY used to
 * download fonts, but browsers have no reasonable timeout for
 * stylesheets. Users may thus wait a long time for these to download
 * even though all they do is reference fonts.
 *
 * For that reasons this function identifies (or rather infers) font
 * stylesheets that have not downloaded within timeout period of the page
 * response starting and reinserts equivalent link tags  dynamically. This
 * removes their page-render-blocking nature and lets the doc render.
 *
 * @param {!Window} win
 */
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function fontStylesheetTimeout(win) {
  (0, _documentReady.onDocumentReady)(win.document, function () {
    return maybeTimeoutFonts(win);
  });
}

/**
 * @param {!Window} win
 */
function maybeTimeoutFonts(win) {
  var timeSinceResponseStart = 0;
  // If available, we start counting from the time the HTTP response
  // for the page started. The preload scanner should then quickly
  // start the CSS download.
  var perf = win.performance;
  if (perf && perf.timing && perf.timing.responseStart) {
    timeSinceResponseStart = Date.now() - perf.timing.responseStart;
  }
  var timeout = Math.max(1, 250 - timeSinceResponseStart);

  // Avoid timer dependency since this runs very early in execution.
  win.setTimeout(function () {
    // Try again, more fonts might have loaded.
    timeoutFontFaces(win);
    var styleSheets = win.document.styleSheets;

    if (!styleSheets) {
      return;
    }
    // Find all stylesheets that aren't loaded from the AMP CDN (those are
    // critical if they are present).
    var styleLinkElements = win.document.querySelectorAll('link[rel~="stylesheet"]:not([href^="' + (0, _dom.escapeCssSelectorIdent)(_config.urls.cdn) + '"])');
    // Compare external sheets against elements of document.styleSheets.
    // They do not appear in this list until they have been loaded.
    var timedoutStyleSheets = [];
    for (var i = 0; i < styleLinkElements.length; i++) {
      var link = styleLinkElements[i];
      var found = false;
      for (var n = 0; n < styleSheets.length; n++) {
        if (styleSheets[n].ownerNode == link) {
          found = true;
          break;
        }
      }
      if (!found) {
        timedoutStyleSheets.push(link);
      }
    }

    var _loop = function _loop(_i) {
      var link = timedoutStyleSheets[_i];
      // To avoid blocking the render, we assign a non-matching media
      // attribute firstâ€¦
      var media = link.media || 'all';
      link.media = 'not-matching';
      // And then switch it back to the original after the stylesheet
      // loaded.
      link.onload = function () {
        link.media = media;
        timeoutFontFaces(win);
      };
      link.setAttribute('i-amphtml-timeout', timeout);
      // Pop/insert the same link. This causes Chrome to unblock, and doesn't
      // blank out Safari. #12521
      link.parentNode.insertBefore(link, link.nextSibling);
    };

    for (var _i = 0; _i < timedoutStyleSheets.length; _i++) {
      _loop(_i);
    }
  }, timeout);
}

/**
 * Sets font faces that haven't been loaded by the time this was called to
 * `font-display: swap` in supported browsers.
 * See https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display
 * for details on behavior.
 * Swap effectively leads to immediate display of the fallback font with
 * the custom font being displayed when possible.
 * While this is not the most desirable setting, it is compatible with the
 * default (which does that but only waiting for 3 seconds).
 * Ideally websites would opt into `font-display: optional` which provides
 * nicer UX for non-icon fonts.
 * If fonts set a non default display mode, this does nothing.
 * @param {!Window} win
 */
function timeoutFontFaces(win) {
  if (!(0, _experiments.isExperimentOn)(win, 'font-display-swap')) {
    return;
  }
  var doc = win.document;
  // TODO(@cramforce) Switch to .values when FontFaceSet extern supports it.
  if (!doc.fonts || !doc.fonts['values']) {
    return;
  }
  var it = doc.fonts['values']();
  var entry = void 0;
  while (entry = it.next()) {
    var fontFace = entry.value;
    if (!fontFace) {
      return;
    }
    if (fontFace.status != 'loading') {
      continue;
    }
    // Not supported or non-default value.
    // If the publisher specified a non-default, we respect that, of course.
    if (!('display' in fontFace) || fontFace.display != 'auto') {
      continue;
    }
    fontFace.display = 'swap';
  }
}

},{"./config":16,"./document-ready":20,"./dom":22,"./experiments":28}],33:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormDataWrapper = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * See the License for the specific language governing permissions and
limitations under the License.


exports.isFormDataWrapper = isFormDataWrapper;

var _log = require('./log');

var _form = require('./form');

var _object = require('./utils/object');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A wrapper for a native `FormData` object that allows the retrieval of entries
 * in the form data after construction even on browsers that don't natively
 * support `FormData.prototype.entries`.
 *
 * @final
 * @note Subclassing `FormData` doesn't work in this case as the transpiler
 *     generates code that calls the super constructor directly using
 *     `Function.prototype.call`. WebKit (Safari) doesn't allow this and
 *     enforces that constructors be called with the `new` operator.
 */
var FormDataWrapper = exports.FormDataWrapper = function () {
  /**
   * Creates a new wrapper for a `FormData` object.
   *
   * If there's no native `FormData#entries`, chances are there are no native
   * methods to read the content of the `FormData` after construction, so the
   * only way to implement `entries` in this class is to capture the fields in
   * the form passed to the constructor (and the arguments passed to the
   * `append` method).
   *
   * For more details on this, see http://mdn.io/FormData.
   *
   * @param {!HTMLFormElement=} opt_form An HTML `<form>` element â€” when
   *     specified, the `FormData` object will be populated with the form's
   *     current keys/values using the name property of each element for the
   *     keys and their submitted value for the values. It will also encode file
   *     input content.
   */
  function FormDataWrapper() {
    var opt_form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, FormDataWrapper);

    /** @private @const {!FormData} */
    this.formData_ = new FormData(opt_form);

    /** @private @const {?Object<string, !Array<string>>} */
    this.fieldValues_ = this.formData_['entries'] ? null : opt_form ? (0, _form.getFormAsObject)(opt_form) : (0, _object.map)();
  }

  /**
   * Appends a new value onto an existing key inside a `FormData` object, or
   * adds the key if it does not already exist.
   *
   * If there's no native `FormData#entries`, chances are there are no native
   * methods to read the content of the `FormData` after construction, so the
   * only way to implement `entries` in this class is to capture the arguments
   * passed to the `append` method (and the form passed to the constructor).
   *
   * Since AMP doesn't support `<input type="file">`, appending a `File` object
   * is not supported and the `filename` parameter is ignored for this wrapper.
   *
   * For more details on this, see http://mdn.io/FormData/append.
   *
   * @param {string} name The name of the field whose data is contained in
   *     `value`.
   * @param {string} value The field's value.
   */


  _createClass(FormDataWrapper, [{
    key: 'append',
    value: function append(name, value) {
      if (!this.formData_['entries']) {
        var nameString = String(name);
        this.fieldValues_[nameString] = this.fieldValues_[nameString] || [];
        this.fieldValues_[name].push(String(value));
      }

      return this.formData_.append(name, value);
    }

    /**
     * Returns an iterator of all key/value pairs contained in this object.
     *
     * For more details on this, see http://mdn.io/FormData/entries.
     *
     * @return {!Iterator<!Array<string>>}
     */

  }, {
    key: 'entries',
    value: function entries() {
      if (this.formData_['entries']) {
        return this.formData_['entries']();
      }

      var fieldEntries = [];
      var fieldValues = /** @type {!Object<string, !Array<string>>} */(0, _log.dev)().assert(this.fieldValues_);
      Object.keys(fieldValues).forEach(function (name) {
        var values = fieldValues[name];
        values.forEach(function (value) {
          return fieldEntries.push([name, value]);
        });
      });

      // Generator functions are not supported by the current Babel configuration,
      // so we must manually implement the iterator interface.
      var nextIndex = 0;
      return (/** @type {!Iterator<!Array<string>>} */{
          next: function next() {
            return nextIndex < fieldEntries.length ? { value: fieldEntries[nextIndex++], done: false } : { value: undefined, done: true };
          }
        }
      );
    }

    /**
     * Returns the wrapped native `FormData` object.
     *
     * @return {!FormData}
     */

  }, {
    key: 'getFormData',
    value: function getFormData() {
      return this.formData_;
    }
  }]);

  return FormDataWrapper;
}();

/**
 * Check if the given object is a FormDataWrapper instance
 * @param {*} o
 * @return {boolean} True if the object is a FormDataWrapper instance.
 */


function isFormDataWrapper(o) {
  // instanceof doesn't work as expected, so we detect with duck-typing.
  return !!o && typeof o.getFormData == 'function';
}

},{"./form":34,"./log":45,"./utils/object":123}],34:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formOrNullForElement = formOrNullForElement;
exports.setFormForElement = setFormForElement;
exports.getFormAsObject = getFormAsObject;

var _dom = require('./dom');

/** @const {string} */
var FORM_PROP_ = '__AMP_FORM';

/**
 * @param {!Element} element
 * @return {../extensions/amp-form/0.1/amp-form.AmpForm}
 */
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function formOrNullForElement(element) {
  return element[FORM_PROP_] || null;
}

/**
 * @param {!Element} element
 * @param {!../extensions/amp-form/0.1/amp-form.AmpForm} form
 */
function setFormForElement(element, form) {
  element[FORM_PROP_] = form;
}

/**
 * Returns form data in the passed-in form as an object.
 * @param {!HTMLFormElement} form
 * @return {!JsonObject}
 */
function getFormAsObject(form) {
  var data = /** @type {!JsonObject} */{};
  var inputs = form.elements;
  var submittableTagsRegex = /^(?:input|select|textarea)$/i;
  var unsubmittableTypesRegex = /^(?:button|image|file|reset)$/i;
  var checkableType = /^(?:checkbox|radio)$/i;
  for (var i = 0; i < inputs.length; i++) {
    var input = inputs[i];
    if (!input.name || isDisabled(input) || !submittableTagsRegex.test(input.tagName) || unsubmittableTypesRegex.test(input.type) || checkableType.test(input.type) && !input.checked) {
      continue;
    }

    if (data[input.name] === undefined) {
      data[input.name] = [];
    }
    data[input.name].push(input.value);
  }

  return data;
}

/**
 * Checks if a field is disabled.
 * @param {!Element} element
 * @private
 */
function isDisabled(element) {
  if (element.disabled) {
    return true;
  }

  var ancestors = (0, _dom.ancestorElementsByTag)(element, 'fieldset');
  for (var i = 0; i < ancestors.length; i++) {
    if (ancestors[i].disabled) {
      return true;
    }
  }
  return false;
}

},{"./dom":22}],35:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FriendlyIframeEmbed = exports.FriendlyIframeSpec = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.setSrcdocSupportedForTesting = setSrcdocSupportedForTesting;
exports.setFriendlyIframeEmbedVisible = setFriendlyIframeEmbedVisible;
exports.getFriendlyIframeEmbedOptional = getFriendlyIframeEmbedOptional;
exports.installFriendlyIframeEmbed = installFriendlyIframeEmbed;
exports.mergeHtmlForTesting = mergeHtmlForTesting;
exports.whenContentIniLoad = whenContentIniLoad;
exports.isInFie = isInFie;

var _commonSignals = require('./common-signals');

var _observable = require('./observable');

var _services = require('./services');

var _signals = require('./utils/signals');

var _dom = require('./dom');

var _log = require('./log');

var _service = require('./service');

var _documentReady = require('./document-ready');

var _layoutRect = require('./layout-rect');

var _eventHelper = require('./event-helper');

var _style = require('./style');

var _types = require('./types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @const {string} */
var EMBED_PROP = '__AMP_EMBED__';

/** @const {!Array<string>} */
var EXCLUDE_INI_LOAD = ['AMP-AD', 'AMP-ANALYTICS', 'AMP-PIXEL', 'AMP-AD-EXIT'];

/**
 * Parameters used to create the new "friendly iframe" embed.
 * - html: The complete content of an AMP embed, which is itself an AMP
 *   document. Can include whatever is normally allowed in an AMP document,
 *   except for AMP `<script>` declarations. Those should be passed as an
 *   array of `extensionIds`.
 * - extensionsIds: An optional array of AMP extension IDs used in this embed.
 * - fonts: An optional array of fonts used in this embed.
 *
 * @typedef {{
 *   host: (?AmpElement|undefined),
 *   url: string,
 *   html: string,
 *   extensionIds: (?Array<string>|undefined),
 *   fonts: (?Array<string>|undefined),
 * }}
 */
var FriendlyIframeSpec = exports.FriendlyIframeSpec = void 0;

/**
 * @type {boolean|undefined}
 * @visibleForTesting
 */
var srcdocSupported = void 0;

/**
 * @param {boolean|undefined} val
 * @visibleForTesting
 */
function setSrcdocSupportedForTesting(val) {
  srcdocSupported = val;
}

/**
 * Returns `true` if the Friendly Iframes are supported.
 * @return {boolean}
 */
function isSrcdocSupported() {
  if (srcdocSupported === undefined) {
    srcdocSupported = 'srcdoc' in HTMLIFrameElement.prototype;
  }
  return srcdocSupported;
}

/**
 * Sets whether the embed is currently visible. The interpretation of visibility
 * is up to the embed parent. However, most of typical cases would rely on
 * whether the embed is currently in the viewport.
 * @param {!FriendlyIframeEmbed} embed
 * @param {boolean} visible
 * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.
 */
function setFriendlyIframeEmbedVisible(embed, visible) {
  embed.setVisible_(visible);
}

/**
 * Returns the embed created using `installFriendlyIframeEmbed` or `null`.
 * Caution: This will only return the FIE after the iframe has 'loaded'. If you
 * are checking before this signal you may be in a race condition that returns
 * null.
 * @param {!HTMLIFrameElement} iframe
 * @return {?FriendlyIframeEmbed}
 */
function getFriendlyIframeEmbedOptional(iframe) {
  return (/** @type {?FriendlyIframeEmbed} */iframe[EMBED_PROP]
  );
}

/**
 * Creates the requested "friendly iframe" embed. Returns the promise that
 * will be resolved as soon as the embed is available. The actual
 * initialization of the embed will start as soon as the `iframe` is added
 * to the DOM.
 * @param {!HTMLIFrameElement} iframe
 * @param {!Element} container
 * @param {!FriendlyIframeSpec} spec
 * @param {function(!Window)=} opt_preinstallCallback
 * @return {!Promise<!FriendlyIframeEmbed>}
 */
function installFriendlyIframeEmbed(iframe, container, spec, opt_preinstallCallback) {
  /** @const {!Window} */
  var win = (0, _service.getTopWindow)((0, _types.toWin)(iframe.ownerDocument.defaultView));
  /** @const {!./service/extensions-impl.Extensions} */
  var extensions = _services.Services.extensionsFor(win);

  (0, _style.setStyle)(iframe, 'visibility', 'hidden');
  iframe.setAttribute('referrerpolicy', 'unsafe-url');

  // Pre-load extensions.
  if (spec.extensionIds) {
    spec.extensionIds.forEach(function (extensionId) {
      return extensions.preloadExtension(extensionId);
    });
  }

  var html = mergeHtml(spec);

  // Receive the signal when iframe is ready: it's document is formed.
  iframe.onload = function () {
    // Chrome does not reflect the iframe readystate.
    iframe.readyState = 'complete';
  };
  var registerViolationListener = function registerViolationListener() {
    iframe.contentWindow.addEventListener('securitypolicyviolation', function (violationEvent) {
      (0, _log.dev)().warn('FIE', 'security policy violation', violationEvent);
    });
  };
  var loadedPromise = void 0;
  if (isSrcdocSupported()) {
    iframe.srcdoc = html;
    loadedPromise = (0, _eventHelper.loadPromise)(iframe);
    container.appendChild(iframe);
    registerViolationListener();
  } else {
    iframe.src = 'about:blank';
    container.appendChild(iframe);
    var childDoc = iframe.contentWindow.document;
    childDoc.open();
    registerViolationListener();
    childDoc.write(html);
    // With document.write, `iframe.onload` arrives almost immediately, thus
    // we need to wait for child's `window.onload`.
    loadedPromise = (0, _eventHelper.loadPromise)(iframe.contentWindow);
    childDoc.close();
  }

  // Wait for document ready signal.
  // This is complicated due to crbug.com/649201 on Chrome and a similar issue
  // on Safari where newly created document's `readyState` immediately equals
  // `complete`, even though the document itself is not yet available. There's
  // no other reliable signal for `readyState` in a child window and thus
  // we have to fallback to polling.
  var readyPromise = void 0;
  if (isIframeReady(iframe)) {
    readyPromise = Promise.resolve();
  } else {
    readyPromise = new Promise(function (resolve) {
      /** @const {number} */
      var interval = win.setInterval(function () {
        if (isIframeReady(iframe)) {
          resolve();
          win.clearInterval(interval);
        }
      }, /* milliseconds */5);

      // For safety, make sure we definitely stop polling when child doc is
      // loaded.
      loadedPromise.catch(function (error) {
        (0, _log.rethrowAsync)(error);
      }).then(function () {
        resolve();
        win.clearInterval(interval);
      });
    });
  }

  return readyPromise.then(function () {
    var embed = new FriendlyIframeEmbed(iframe, spec, loadedPromise);
    iframe[EMBED_PROP] = embed;

    var childWin = /** @type {!Window} */iframe.contentWindow;
    // Add extensions.
    extensions.installExtensionsInChildWindow(childWin, spec.extensionIds || [], opt_preinstallCallback);
    // Ready to be shown.
    embed.startRender_();
    return embed;
  });
}

/**
 * Returns `true` when iframe is ready.
 * @param {!HTMLIFrameElement} iframe
 * @return {boolean}
 */
function isIframeReady(iframe) {
  // This is complicated due to crbug.com/649201 on Chrome and a similar issue
  // on Safari where newly created document's `readyState` immediately equals
  // `complete`, even though the document itself is not yet available. There's
  // no other reliable signal for `readyState` in a child window and thus
  // the best way to check is to see the contents of the body.
  var childDoc = iframe.contentWindow && iframe.contentWindow.document;
  return !!(childDoc && (0, _documentReady.isDocumentReady)(childDoc) && childDoc.body && childDoc.body.firstChild);
}

/**
 * Merges base and fonts into html document.
 * @param {!FriendlyIframeSpec} spec
 */
function mergeHtml(spec) {
  var originalHtml = spec.html;
  var originalHtmlUp = originalHtml.toUpperCase();

  // Find the insertion point.
  var ip = originalHtmlUp.indexOf('<HEAD');
  if (ip != -1) {
    ip = originalHtmlUp.indexOf('>', ip + 1) + 1;
  }
  if (ip == -1) {
    ip = originalHtmlUp.indexOf('<BODY');
  }
  if (ip == -1) {
    ip = originalHtmlUp.indexOf('<HTML');
    if (ip != -1) {
      ip = originalHtmlUp.indexOf('>', ip + 1) + 1;
    }
  }

  var result = [];

  // Preambule.
  if (ip > 0) {
    result.push(originalHtml.substring(0, ip));
  }

  // Add <BASE> tag.
  result.push('<base href="' + (0, _dom.escapeHtml)(spec.url) + '">');

  // Load fonts.
  if (spec.fonts) {
    spec.fonts.forEach(function (font) {
      result.push('<link href="' + (0, _dom.escapeHtml)(font) + '" rel="stylesheet" type="text/css">');
    });
  }

  // Load CSP
  result.push('<meta http-equiv=Content-Security-Policy ' + 'content="script-src \'none\';object-src \'none\';child-src \'none\'">');

  // Postambule.
  if (ip > 0) {
    result.push(originalHtml.substring(ip));
  } else {
    result.push(originalHtml);
  }

  return result.join('');
}

/**
 * Exposes `mergeHtml` for testing purposes.
 * @param {!FriendlyIframeSpec} spec
 * @visibleForTesting
 */
function mergeHtmlForTesting(spec) {
  return mergeHtml(spec);
}

/**
 * A "friendly iframe" embed. This is the iframe that's fully accessible to
 * the AMP runtime. It's similar to Shadow DOM in many respects, but it also
 * provides iframe/viewport measurements and enables the use of `vh`, `vw` and
 * `@media` CSS.
 *
 * The friendly iframe is managed by the top-level AMP Runtime. When it's
 * destroyed, the `destroy` method must be called to free up the shared
 * resources.
 */

var FriendlyIframeEmbed = exports.FriendlyIframeEmbed = function () {

  /**
   * @param {!HTMLIFrameElement} iframe
   * @param {!FriendlyIframeSpec} spec
   * @param {!Promise} loadedPromise
   */
  function FriendlyIframeEmbed(iframe, spec, loadedPromise) {
    _classCallCheck(this, FriendlyIframeEmbed);

    /** @const {!HTMLIFrameElement} */
    this.iframe = iframe;

    /** @const {!Window} */
    this.win = /** @type{!Window} */iframe.contentWindow;

    /** @const {!FriendlyIframeSpec} */
    this.spec = spec;

    /** @const {?AmpElement} */
    this.host = spec.host || null;

    /** @const @private {time} */
    this.startTime_ = Date.now();

    /**
     * Starts out as invisible. The interpretation of this flag is up to
     * the emded parent.
     * @private {boolean}
     */
    this.visible_ = false;

    /** @private {!Observable<boolean>} */
    this.visibilityObservable_ = new _observable.Observable();

    /** @private @const */
    this.signals_ = this.host ? this.host.signals() : new _signals.Signals();

    /** @private @const {!Promise} */
    this.winLoadedPromise_ = Promise.all([loadedPromise, this.whenReady()]);
  }

  /**
   * Ensures that all resources from this iframe have been released.
   */


  _createClass(FriendlyIframeEmbed, [{
    key: 'destroy',
    value: function destroy() {
      _services.Services.resourcesForDoc(this.iframe).removeForChildWindow(this.win);
      (0, _service.disposeServicesForEmbed)(this.win);
    }

    /**
     * @return {time}
     */

  }, {
    key: 'getStartTime',
    value: function getStartTime() {
      return this.startTime_;
    }

    /**
     * Returns the base URL for the embedded document.
     * @return {string}
     */

  }, {
    key: 'getUrl',
    value: function getUrl() {
      return this.spec.url;
    }

    /** @return {!Signals} */

  }, {
    key: 'signals',
    value: function signals() {
      return this.signals_;
    }

    /**
     * Returns a promise that will resolve when the embed document is ready.
     * Notice that this signal coincides with the embed's `render-start`.
     * @return {!Promise}
     */

  }, {
    key: 'whenReady',
    value: function whenReady() {
      return this.signals_.whenSignal(_commonSignals.CommonSignals.RENDER_START);
    }

    /**
     * Returns a promise that will resolve when the child window's `onload` event
     * has been emitted. In friendly iframes this typically only includes font
     * loading.
     * @return {!Promise}
     */

  }, {
    key: 'whenWindowLoaded',
    value: function whenWindowLoaded() {
      return this.winLoadedPromise_;
    }

    /**
     * Returns a promise that will resolve when the initial load  of the embed's
     * content has been completed.
     * @return {!Promise}
     */

  }, {
    key: 'whenIniLoaded',
    value: function whenIniLoaded() {
      return this.signals_.whenSignal(_commonSignals.CommonSignals.INI_LOAD);
    }

    /**
     * @private
     * @restricted
     */

  }, {
    key: 'startRender_',
    value: function startRender_() {
      var _this = this;

      if (this.host) {
        this.host.renderStarted();
      } else {
        this.signals_.signal(_commonSignals.CommonSignals.RENDER_START);
      }
      (0, _style.setStyle)(this.iframe, 'visibility', '');
      if (this.win.document && this.win.document.body) {
        this.win.document.documentElement.classList.add('i-amphtml-fie');
        (0, _style.setStyles)((0, _log.dev)().assertElement(this.win.document.body), {
          opacity: 1,
          visibility: 'visible',
          animation: 'none'
        });
      }

      // Initial load signal signal.
      var rect = void 0;
      if (this.host) {
        rect = this.host.getLayoutBox();
      } else {
        rect = (0, _layoutRect.layoutRectLtwh)(0, 0, this.win. /*OK*/innerWidth, this.win. /*OK*/innerHeight);
      }
      Promise.all([this.whenReady(), whenContentIniLoad(this.iframe, this.win, rect)]).then(function () {
        _this.signals_.signal(_commonSignals.CommonSignals.INI_LOAD);
      });
    }

    /**
     * Whether the embed is currently visible. The interpretation of visibility
     * is up to the embed parent. However, most of typical cases would rely on
     * whether the embed is currently in the viewport.
     * @return {boolean}
     * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.
     */

  }, {
    key: 'isVisible',
    value: function isVisible() {
      return this.visible_;
    }

    /**
     * See `isVisible` for more info.
     * @param {function(boolean)} handler
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onVisibilityChanged',
    value: function onVisibilityChanged(handler) {
      return this.visibilityObservable_.add(handler);
    }

    /**
     * @param {boolean} visible
     * @private
     * @restricted
     */

  }, {
    key: 'setVisible_',
    value: function setVisible_(visible) {
      if (this.visible_ != visible) {
        this.visible_ = visible;
        this.visibilityObservable_.fire(this.visible_);
      }
    }

    /**
     * @return {!HTMLBodyElement}
     * @visibleForTesting
     */

  }, {
    key: 'getBodyElement',
    value: function getBodyElement() {
      return (/** @type {!HTMLBodyElement} */(this.iframe.contentDocument || this.iframe.contentWindow.document).body
      );
    }

    /**
     * @return {!./service/resources-impl.Resources}
     * @private
     */

  }, {
    key: 'getResources_',
    value: function getResources_() {
      return _services.Services.resourcesForDoc(this.iframe);
    }

    /**
     * Runs a measure/mutate cycle ensuring that the iframe change is propagated
     * to the resource manager.
     * @param {{measure: (function()|undefined), mutate: function()}} task
     * @return {!Promise}
     * @private
     */

  }, {
    key: 'measureMutate_',
    value: function measureMutate_(task) {
      return this.getResources_().measureMutateElement(this.iframe, task.measure || null, task.mutate);
    }

    /**
     * @return {!Promise}
     */

  }, {
    key: 'enterFullOverlayMode',
    value: function enterFullOverlayMode() {
      var _this2 = this;

      var ampAdParent = (0, _log.dev)().assertElement(this.iframe.parentNode);

      // Security assertion. Otherwise any 3p frame could request lighbox mode.
      (0, _log.user)().assert(ampAdParent.tagName.toLowerCase() == 'amp-ad', 'Only <amp-ad> is allowed to enter lightbox mode.');

      var bodyStyle = {
        'background': 'transparent',
        'position': 'absolute',
        'bottom': 'auto',
        'right': 'auto',

        // Set for replacing with vsync values.
        'top': '',
        'left': '',
        'width': '',
        'height': ''
      };

      var iframeStyle = {
        'position': 'fixed',
        'left': 0,
        'right': 0,
        'bottom': 0,
        'width': '100vw',
        'top': 0,
        'height': '100vh'
      };

      return this.measureMutate_({
        measure: function measure() {
          var rect = _this2.host ? _this2.host.getLayoutBox() : _this2.iframe. /*OK*/getBoundingClientRect();

          // Offset by scroll top as iframe will be position: fixed.
          var dy = -_services.Services.viewportForDoc(_this2.iframe).getScrollTop();

          var _moveLayoutRect = (0, _layoutRect.moveLayoutRect)(rect, /* dx */0, dy),
              top = _moveLayoutRect.top,
              left = _moveLayoutRect.left,
              width = _moveLayoutRect.width,
              height = _moveLayoutRect.height;

          // Offset body by header height to prevent visual jump.


          Object.assign(bodyStyle, {
            'top': (0, _style.px)(top),
            'left': (0, _style.px)(left),
            'width': (0, _style.px)(width),
            'height': (0, _style.px)(height)
          });
        },
        mutate: function mutate() {
          // !important to prevent abuse e.g. box @ ltwh = 0, 0, 0, 0
          (0, _style.setImportantStyles)(_this2.iframe, iframeStyle);

          // We need to override runtime-level !important rules
          (0, _style.setImportantStyles)(_this2.getBodyElement(), bodyStyle);
        }
      });
    }

    /**
     * @return {!Promise}
     */

  }, {
    key: 'leaveFullOverlayMode',
    value: function leaveFullOverlayMode() {
      var _this3 = this;

      return this.measureMutate_({
        mutate: function mutate() {
          (0, _style.resetStyles)(_this3.iframe, ['position', 'left', 'right', 'top', 'bottom', 'width', 'height']);

          // we're not resetting background here as we need to set it to
          // transparent permanently.
          (0, _style.resetStyles)(_this3.getBodyElement(), ['position', 'top', 'left', 'width', 'height', 'bottom', 'right']);
        }
      });
    }
  }]);

  return FriendlyIframeEmbed;
}();

/**
 * Returns the promise that will be resolved when all content elements
 * have been loaded in the initially visible set.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {!Window} hostWin
 * @param {!./layout-rect.LayoutRectDef} rect
 * @return {!Promise}
 */


function whenContentIniLoad(elementOrAmpDoc, hostWin, rect) {
  return _services.Services.resourcesForDoc(elementOrAmpDoc).getResourcesInRect(hostWin, rect).then(function (resources) {
    var promises = [];
    resources.forEach(function (r) {
      if (!EXCLUDE_INI_LOAD.includes(r.element.tagName)) {
        promises.push(r.loadedOnce());
      }
    });
    return Promise.all(promises);
  });
}

/**
 * @param {!Element} element
 * @return {boolean}
 */
function isInFie(element) {
  return !!(0, _dom.closestBySelector)(element, '.i-amphtml-fie');
}

},{"./common-signals":15,"./document-ready":20,"./dom":22,"./event-helper":27,"./layout-rect":42,"./log":45,"./observable":48,"./service":63,"./services":104,"./style":110,"./types":113,"./utils/signals":127}],36:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubscriptionApi = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.listenFor = listenFor;
exports.listenForOncePromise = listenForOncePromise;
exports.postMessage = postMessage;
exports.postMessageToWindows = postMessageToWindows;
exports.parseIfNeeded = parseIfNeeded;
exports.looksLikeTrackingIframe = looksLikeTrackingIframe;
exports.isAdLike = isAdLike;
exports.disableScrollingOnIframe = disableScrollingOnIframe;

var _dom = require('./dom');

var _pFrameMessaging = require('./3p-frame-messaging');

var _log = require('./log');

var _object = require('./utils/object');

var _array = require('./utils/array');

var _eventHelper = require('./event-helper');

var _url = require('./url');

var _style = require('./style');

var _json = require('./json');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Sentinel used to force unlistening after a iframe is detached.
 * @type {string}
 */
var UNLISTEN_SENTINEL = 'unlisten';

/**
 * @typedef {{
 *   frame: !Element,
 *   events: !Object<string, !Array<function(!JsonObject)>>
 * }}
 */
var WindowEventsDef = void 0;

/**
 * Returns a mapping from a URL's origin to an array of windows and their
 * listenFor listeners.
 * @param {?Window} parentWin the window that created the iframe
 * @param {boolean=} opt_create create the mapping if it does not exist
 * @return {?Object<string, !Array<!WindowEventsDef>>}
 */
function getListenFors(parentWin, opt_create) {
  var listeningFors = parentWin.listeningFors;


  if (!listeningFors && opt_create) {
    listeningFors = parentWin.listeningFors = Object.create(null);
  }
  return listeningFors || null;
}

/**
 * Returns an array of WindowEventsDef that have had any listenFor listeners
 * registered for this sentinel.
 * @param {?Window} parentWin the window that created the iframe
 * @param {string} sentinel the sentinel of the message
 * @param {boolean=} opt_create create the array if it does not exist
 * @return {?Array<!WindowEventsDef>}
 */
function getListenForSentinel(parentWin, sentinel, opt_create) {
  var listeningFors = getListenFors(parentWin, opt_create);
  if (!listeningFors) {
    return listeningFors;
  }

  var listenSentinel = listeningFors[sentinel];
  if (!listenSentinel && opt_create) {
    listenSentinel = listeningFors[sentinel] = [];
  }
  return listenSentinel || null;
}

/**
 * Returns an mapping of event names to listenFor listeners.
 * @param {?Window} parentWin the window that created the iframe
 * @param {!Element} iframe the iframe element who's context will trigger the
 *     event
 * @param {boolean=} opt_is3P set to true if the iframe is 3p.
 * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}
 */
function getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {
  var _parseUrlDeprecated = (0, _url.parseUrlDeprecated)(iframe.src),
      origin = _parseUrlDeprecated.origin;

  var sentinel = getSentinel_(iframe, opt_is3P);
  var listenSentinel = getListenForSentinel(parentWin, sentinel, true);

  var windowEvents = void 0;
  for (var i = 0; i < listenSentinel.length; i++) {
    var we = listenSentinel[i];
    if (we.frame === iframe) {
      windowEvents = we;
      break;
    }
  }

  if (!windowEvents) {
    windowEvents = {
      frame: iframe,
      origin: origin,
      events: Object.create(null)
    };
    listenSentinel.push(windowEvents);
  }

  return windowEvents.events;
}

/**
 * Returns an mapping of event names to listenFor listeners.
 * @param {?Window} parentWin the window that created the iframe
 * @param {string} sentinel the sentinel of the message
 * @param {string} origin the source window's origin
 * @param {?Window} triggerWin the window that triggered the event
 * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}
 */
function getListenForEvents(parentWin, sentinel, origin, triggerWin) {
  var listenSentinel = getListenForSentinel(parentWin, sentinel);

  if (!listenSentinel) {
    return listenSentinel;
  }

  // Find the entry for the frame.
  // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to
  //     speed up this process.
  var windowEvents = void 0;
  for (var i = 0; i < listenSentinel.length; i++) {
    var we = listenSentinel[i];
    var contentWindow = we.frame.contentWindow;

    if (!contentWindow) {
      setTimeout(dropListenSentinel, 0, listenSentinel);
    } else if (sentinel === 'amp') {
      // A non-3P code path, origin must match.
      if (we.origin === origin && contentWindow == triggerWin) {
        windowEvents = we;
        break;
      }
    } else if (triggerWin == contentWindow || isDescendantWindow(contentWindow, triggerWin)) {
      // 3p code path, we may accept messages from nested frames.
      windowEvents = we;
      break;
    }
  }

  return windowEvents ? windowEvents.events : null;
}

/**
 * Checks whether one window is a descendant of another by climbing
 * the parent chain.
 * @param {?Window} ancestor potential ancestor window
 * @param {?Window} descendant potential descendant window
 * @return {boolean}
 */
function isDescendantWindow(ancestor, descendant) {
  for (var win = descendant; win && win != win.parent; win = win.parent) {
    if (win == ancestor) {
      return true;
    }
  }
  return false;
}

/**
 * Removes any listenFors registed on listenSentinel that do not have
 * a contentWindow (the frame was removed from the DOM tree).
 * @param {!Array<!WindowEventsDef>} listenSentinel
 */
function dropListenSentinel(listenSentinel) {
  var noopData = (0, _object.dict)({ 'sentinel': UNLISTEN_SENTINEL });

  for (var i = listenSentinel.length - 1; i >= 0; i--) {
    var windowEvents = listenSentinel[i];

    if (!windowEvents.frame.contentWindow) {
      listenSentinel.splice(i, 1);

      var events = windowEvents.events;

      for (var name in events) {
        // Splice here, so that each unlisten does not shift the array
        events[name].splice(0, Infinity).forEach(function (event) {
          event(noopData);
        });
      }
    }
  }
}

/**
 * Registers the global listenFor event listener if it has yet to be.
 * @param {?Window} parentWin
 */
function registerGlobalListenerIfNeeded(parentWin) {
  if (parentWin.listeningFors) {
    return;
  }
  var listenForListener = function listenForListener(event) {
    if (!(0, _eventHelper.getData)(event)) {
      return;
    }
    var data = parseIfNeeded((0, _eventHelper.getData)(event));
    if (!data || !data['sentinel']) {
      return;
    }

    var listenForEvents = getListenForEvents(parentWin, data['sentinel'], event.origin, event.source);
    if (!listenForEvents) {
      return;
    }

    var listeners = listenForEvents[data['type']];
    if (!listeners) {
      return;
    }

    // We slice to avoid issues with adding another listener or unlistening
    // during iteration. We could move to a Doubly Linked List with
    // backtracking, but that's overly complicated.
    listeners = listeners.slice();
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener(data, event.source, event.origin);
    }
  };

  parentWin.addEventListener('message', listenForListener);
}

/**
 * Allows listening for message from the iframe. Returns an unlisten
 * function to remove the listener.
 *
 * @param {?Element} iframe
 * @param {string} typeOfMessage
 * @param {?function(!JsonObject, !Window, string)} callback Called when a
 *     message of this type arrives for this iframe.
 * @param {boolean=} opt_is3P set to true if the iframe is 3p.
 * @param {boolean=} opt_includingNestedWindows set to true if a messages from
 *     nested frames should also be accepted.
 * @return {!UnlistenDef}
 */
function listenFor(iframe, typeOfMessage, callback, opt_is3P, opt_includingNestedWindows) {
  (0, _log.dev)().assert(iframe.src, 'only iframes with src supported');
  (0, _log.dev)().assert(!iframe.parentNode, 'cannot register events on an attached ' + 'iframe. It will cause hair-pulling bugs like #2942');
  (0, _log.dev)().assert(callback);
  var parentWin = iframe.ownerDocument.defaultView;

  registerGlobalListenerIfNeeded(parentWin);

  var listenForEvents = getOrCreateListenForEvents(parentWin, iframe, opt_is3P);

  var events = listenForEvents[typeOfMessage] || (listenForEvents[typeOfMessage] = []);

  var unlisten = void 0;
  var listener = function listener(data, source, origin) {
    // Exclude nested frames if necessary.
    // Note that the source was already verified to be either the contentWindow
    // of the iframe itself or a descendant window within it.
    if (!opt_includingNestedWindows && source != iframe.contentWindow) {
      return;
    }

    if (data.sentinel == UNLISTEN_SENTINEL) {
      unlisten();
      return;
    }
    callback(data, source, origin);
  };

  events.push(listener);

  return unlisten = function unlisten() {
    if (listener) {
      var index = events.indexOf(listener);
      if (index > -1) {
        events.splice(index, 1);
      }
      // Make sure references to the unlisten function do not keep
      // alive too much.
      listener = null;
      events = null;
      callback = null;
    }
  };
}

/**
 * Returns a promise that resolves when one of given messages has been observed
 * for the first time. And remove listener for all other messages.
 * @param {!Element} iframe
 * @param {string|!Array<string>} typeOfMessages
 * @param {boolean=} opt_is3P
 * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string}>}
 */
function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {
  var unlistenList = [];
  if (typeof typeOfMessages == 'string') {
    typeOfMessages = [typeOfMessages];
  }
  return new Promise(function (resolve) {
    for (var i = 0; i < typeOfMessages.length; i++) {
      var message = typeOfMessages[i];
      var unlisten = listenFor(iframe, message, function (data, source, origin) {
        for (var _i = 0; _i < unlistenList.length; _i++) {
          unlistenList[_i]();
        }
        resolve({ data: data, source: source, origin: origin });
      }, opt_is3P);
      unlistenList.push(unlisten);
    }
  });
}

/**
 * Posts a message to the iframe.
 * @param {!Element} iframe The iframe.
 * @param {string} type Type of the message.
 * @param {!JsonObject} object Message payload.
 * @param {string} targetOrigin origin of the target.
 * @param {boolean=} opt_is3P set to true if the iframe is 3p.
 */
function postMessage(iframe, type, object, targetOrigin, opt_is3P) {
  postMessageToWindows(iframe, [{ win: iframe.contentWindow, origin: targetOrigin }], type, object, opt_is3P);
}

/**
 * Posts an identical message to multiple target windows with the same
 * sentinel.
 * The message is serialized only once.
 * @param {!Element} iframe The iframe.
 * @param {!Array<{win: !Window, origin: string}>} targets to send the message
 *     to, pairs of window and its origin.
 * @param {string} type Type of the message.
 * @param {!JsonObject} object Message payload.
 * @param {boolean=} opt_is3P set to true if the iframe is 3p.
 */
function postMessageToWindows(iframe, targets, type, object, opt_is3P) {
  if (!iframe.contentWindow) {
    return;
  }
  object['type'] = type;
  object['sentinel'] = getSentinel_(iframe, opt_is3P);
  var payload = object;
  if (opt_is3P) {
    // Serialize ourselves because that is much faster in Chrome.
    payload = 'amp-' + JSON.stringify(object);
  }
  for (var i = 0; i < targets.length; i++) {
    var target = targets[i];
    target.win. /*OK*/postMessage(payload, target.origin);
  }
}

/**
 * Gets the sentinel string.
 * @param {!Element} iframe The iframe.
 * @param {boolean=} opt_is3P set to true if the iframe is 3p.
 * @return {string} Sentinel string.
 * @private
 */
function getSentinel_(iframe, opt_is3P) {
  return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';
}

/**
 * JSON parses event.data if it needs to be
 * @param {*} data
 * @return {?JsonObject} object message
 * @private
 * @visibleForTesting
 */
function parseIfNeeded(data) {
  if (typeof data == 'string') {
    if (data.charAt(0) == '{') {
      data = (0, _json.tryParseJson)(data, function (e) {
        (0, _log.dev)().warn('IFRAME-HELPER', 'Postmessage could not be parsed. ' + 'Is it in a valid JSON format?', e);
      }) || null;
    } else if ((0, _pFrameMessaging.isAmpMessage)(data)) {
      data = (0, _pFrameMessaging.deserializeMessage)(data);
    } else {
      data = null;
    }
  }
  return (/** @type {?JsonObject} */data
  );
}

/**
 * Manages a postMessage API for an iframe with a subscription message and
 * a way to broadcast messages to all subscribed windows, which
 * in turn must all be descendants of the contentWindow of the iframe.
 */

var SubscriptionApi = exports.SubscriptionApi = function () {
  /**
   * @param {!Element} iframe The iframe.
   * @param {string} type Type of the subscription message.
   * @param {boolean} is3p set to true if the iframe is 3p.
   * @param {function(!JsonObject, !Window, string)} requestCallback Callback
   *     invoked whenever a new window subscribes.
   */
  function SubscriptionApi(iframe, type, is3p, requestCallback) {
    var _this = this;

    _classCallCheck(this, SubscriptionApi);

    /** @private @const {!Element} */
    this.iframe_ = iframe;
    /** @private @const {boolean} */
    this.is3p_ = is3p;
    /** @private @const {!Array<{win: !Window, origin: string}>} */
    this.clientWindows_ = [];

    /** @private @const {!UnlistenDef} */
    this.unlisten_ = listenFor(this.iframe_, type, function (data, source, origin) {
      // This message might be from any window within the iframe, we need
      // to keep track of which windows want to be sent updates.
      if (!_this.clientWindows_.some(function (entry) {
        return entry.win == source;
      })) {
        _this.clientWindows_.push({ win: source, origin: origin });
      }
      requestCallback(data, source, origin);
    }, this.is3p_,
    // For 3P frames we also allow nested frames within them to subscribe..
    this.is3p_ /* opt_includingNestedWindows */);
  }

  /**
   * Sends a message to all subscribed windows.
   * @param {string} type Type of the message.
   * @param {!JsonObject} data Message payload.
   */


  _createClass(SubscriptionApi, [{
    key: 'send',
    value: function send(type, data) {
      // Remove clients that have been removed from the DOM.
      (0, _array.filterSplice)(this.clientWindows_, function (client) {
        return !!client.win.parent;
      });
      postMessageToWindows(this.iframe_, this.clientWindows_, type, data, this.is3p_);
    }

    /**
     * Destroys iframe.
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.unlisten_();
      this.clientWindows_.length = 0;
    }
  }]);

  return SubscriptionApi;
}();

/**
 * @param {!Element} element
 * @return {boolean}
 */


function looksLikeTrackingIframe(element) {
  var box = element.getLayoutBox();
  // This heuristic is subject to change.
  if (box.width > 10 || box.height > 10) {
    return false;
  }
  // Iframe is not tracking iframe if open with user interaction
  return !(0, _dom.closestBySelector)(element, '.i-amphtml-overlay');
}

// Most common ad sizes
// Array of [width, height] pairs.
var adSizes = [[300, 250], [320, 50], [300, 50], [320, 100]];

/**
 * Guess whether this element might be an ad.
 * @param {!Element} element An amp-iframe element.
 * @return {boolean}
 * @visibleForTesting
 */
function isAdLike(element) {
  var box = element.getLayoutBox();
  var height = box.height,
      width = box.width;

  for (var i = 0; i < adSizes.length; i++) {
    var refWidth = adSizes[i][0];
    var refHeight = adSizes[i][1];
    if (refHeight > height) {
      continue;
    }
    if (refWidth > width) {
      continue;
    }
    // Fuzzy matching to account for padding.
    if (height - refHeight <= 20 && width - refWidth <= 20) {
      return true;
    }
  }
  return false;
}

/**
 * @param {!Element} iframe
 * @private
 */
function disableScrollingOnIframe(iframe) {
  (0, _dom.addAttributesToElement)(iframe, (0, _object.dict)({ 'scrolling': 'no' }));

  // This shouldn't work, but it does on Firefox.
  // https://stackoverflow.com/a/15494969
  (0, _style.setStyle)(iframe, 'overflow', 'hidden');

  return iframe;
}

},{"./3p-frame-messaging":7,"./dom":22,"./event-helper":27,"./json":40,"./log":45,"./style":110,"./url":116,"./utils/array":117,"./utils/object":123}],37:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                               */

exports.getTrackImpressionPromise = getTrackImpressionPromise;
exports.resetTrackImpressionPromiseForTesting = resetTrackImpressionPromiseForTesting;
exports.maybeTrackImpression = maybeTrackImpression;
exports.doNotTrackImpression = doNotTrackImpression;
exports.shouldAppendExtraParams = shouldAppendExtraParams;
exports.getExtraParamsUrl = getExtraParamsUrl;

var _promise = require('./utils/promise');

var _services = require('./services');

var _url = require('./url');

var _log = require('./log');

var _mode = require('./mode');

var _experiments = require('./experiments');

var TIMEOUT_VALUE = 8000;

var trackImpressionPromise = null;

var DEFAULT_APPEND_URL_PARAM = ['gclid', 'gclsrc'];

/**
 * A function to get the trackImpressionPromise;
 * @return {!Promise}
 */
function getTrackImpressionPromise() {
  return (0, _log.dev)().assert(trackImpressionPromise);
}

/**
 * Function that reset the trackImpressionPromise only for testing
 * @visibleForTesting
 */
function resetTrackImpressionPromiseForTesting() {
  trackImpressionPromise = null;
}

/**
 * Emit a HTTP request to a destination defined on the incoming URL.
 * Launched for trusted viewer. Otherwise guarded by experiment.
 * @param {!Window} win
 */
function maybeTrackImpression(win) {
  var deferred = new _promise.Deferred();
  var promise = deferred.promise,
      resolveImpression = deferred.resolve;


  trackImpressionPromise = _services.Services.timerFor(win).timeoutPromise(TIMEOUT_VALUE, promise, 'TrackImpressionPromise timeout').catch(function (error) {
    (0, _log.dev)().warn('IMPRESSION', error);
  });

  var viewer = _services.Services.viewerForDoc(win.document);
  var isTrustedViewerPromise = viewer.isTrustedViewer();
  var isTrustedReferrerPromise = viewer.isTrustedReferrer();
  Promise.all([isTrustedViewerPromise, isTrustedReferrerPromise]).then(function (results) {
    var isTrustedViewer = results[0];
    var isTrustedReferrer = results[1];
    // Currently this feature is launched for trusted viewer and trusted
    // referrer, but still experiment guarded for all AMP docs.
    if (!isTrustedViewer && !isTrustedReferrer && !(0, _experiments.isExperimentOn)(win, 'alp')) {
      resolveImpression();
      return;
    }

    var replaceUrlPromise = handleReplaceUrl(win);
    var clickUrlPromise = handleClickUrl(win);

    Promise.all([replaceUrlPromise, clickUrlPromise]).then(function () {
      resolveImpression();
    }, function () {});
  });
}

/**
 * Signal that impression tracking is not relevant in this environment.
 */
function doNotTrackImpression() {
  trackImpressionPromise = Promise.resolve();
}

/**
 * Handle the getReplaceUrl and return a promise when url is replaced Only
 * handles replaceUrl when viewer indicates AMP to do so. Viewer should indicate
 * by setting the legacy replaceUrl init param and add `replaceUrl` to its
 * capability param. Future plan is to change the type of legacy init replaceUrl
 * param from url string to boolean value. Please NOTE replaceUrl and adLocation
 * will never arrive at same time, so there is no race condition on the order of
 * handling url replacement.
 * @param {!Window} win
 * @return {!Promise}
 */
function handleReplaceUrl(win) {
  var viewer = _services.Services.viewerForDoc(win.document);

  // ReplaceUrl substitution doesn't have to wait until the document is visible
  if (!viewer.getParam('replaceUrl')) {
    // The init replaceUrl param serve as a signal on whether replaceUrl is
    // required for this doc.
    return Promise.resolve();
  }

  if (!viewer.hasCapability('replaceUrl')) {
    // If Viewer is not capability of providing async replaceUrl, use the legacy
    // init replaceUrl param.
    viewer.replaceUrl(viewer.getParam('replaceUrl') || null);
    return Promise.resolve();
  }

  // request async replaceUrl is viewer support getReplaceUrl.
  return viewer.sendMessageAwaitResponse('getReplaceUrl', /* data */undefined).then(function (response) {
    if (!response || (typeof response === 'undefined' ? 'undefined' : _typeof(response)) != 'object') {
      (0, _log.dev)().warn('IMPRESSION', 'get invalid replaceUrl response');
      return;
    }
    viewer.replaceUrl(response['replaceUrl'] || null);
  }, function (err) {
    (0, _log.dev)().warn('IMPRESSION', 'Error request replaceUrl from viewer', err);
  });
}

/**
 * Perform the impression request if it has been provided via
 * the click param in the viewer arguments. Returns a promise.
 * @param {!Window} win
 * @return {!Promise}
 */
function handleClickUrl(win) {
  var viewer = _services.Services.viewerForDoc(win.document);
  /** @const {string|undefined} */
  var clickUrl = viewer.getParam('click');

  if (!clickUrl) {
    return Promise.resolve();
  }

  if (clickUrl.indexOf('https://') != 0) {
    (0, _log.user)().warn('IMPRESSION', 'click fragment param should start with https://. Found ', clickUrl);
    return Promise.resolve();
  }

  if (win.location.hash) {
    // This is typically done using replaceState inside the viewer.
    // If for some reason it failed, get rid of the fragment here to
    // avoid duplicate tracking.
    win.location.hash = '';
  }

  // TODO(@zhouyx) need test with a real response.
  return viewer.whenFirstVisible().then(function () {
    return invoke(win, (0, _log.dev)().assertString(clickUrl));
  }).then(function (response) {
    applyResponse(win, response);
  }).catch(function (err) {
    (0, _log.user)().warn('IMPRESSION', 'Error on request clickUrl: ', err);
  });
}

/**
 * Send the url to ad server and wait for its response
 * @param {!Window} win
 * @param {string} clickUrl
 * @return {!Promise<?JsonObject>}
 */
function invoke(win, clickUrl) {
  if ((0, _mode.getMode)().localDev && !(0, _mode.getMode)().test) {
    clickUrl = 'http://localhost:8000/impression-proxy?url=' + clickUrl;
  }
  return _services.Services.xhrFor(win).fetchJson(clickUrl, {
    credentials: 'include',
    // All origins are allows to send these requests.
    requireAmpResponseSourceOrigin: false
  }).then(function (res) {
    // Treat 204 no content response specially
    if (res.status == 204) {
      return null;
    }
    return res.json();
  });
}

/**
 * parse the response back from ad server
 * Set for analytics purposes
 * @param {!Window} win
 * @param {?JsonObject} response
 */
function applyResponse(win, response) {
  if (!response) {
    return;
  }

  var adLocation = response['location'];
  var adTracking = response['tracking_url'];

  // If there is a tracking_url, need to track it
  // Otherwise track the location
  var trackUrl = adTracking || adLocation;

  if (trackUrl && !(0, _url.isProxyOrigin)(trackUrl)) {
    // To request the provided trackUrl for tracking purposes.
    new Image().src = trackUrl;
  }

  // Replace the location href params with new location params we get (if any).
  if (adLocation) {
    if (!win.history.replaceState) {
      return;
    }

    var viewer = _services.Services.viewerForDoc(win.document);
    var currentHref = win.location.href;
    var url = (0, _url.parseUrlDeprecated)(adLocation);
    var params = (0, _url.parseQueryString)(url.search);
    var newHref = (0, _url.addParamsToUrl)(currentHref, params);
    // TODO: Avoid overwriting the fragment parameter.
    win.history.replaceState(null, '', newHref);
    viewer.maybeUpdateFragmentForCct();
  }
}

/**
 * Return a promise that whether appending extra url params to outgoing link is
 * required.
 * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
 * @return {!Promise<boolean>}
 */
function shouldAppendExtraParams(ampdoc) {
  return ampdoc.whenReady().then(function () {
    return !!ampdoc.getBody().querySelector('amp-analytics[type=googleanalytics]');
  });
}

/**
 * Return the extra url params string that should be appended to outgoing link
 * @param {!Window} win
 * @param {!Element} target
 * @return {string}
 */
function getExtraParamsUrl(win, target) {
  // Get an array with extra params that needs to append.
  var url = (0, _url.parseUrlDeprecated)(win.location.href);
  var params = (0, _url.parseQueryString)(url.search);
  var appendParams = [];
  for (var i = 0; i < DEFAULT_APPEND_URL_PARAM.length; i++) {
    var param = DEFAULT_APPEND_URL_PARAM[i];
    if (typeof params[param] !== 'undefined') {
      appendParams.push(param);
    }
  }

  // Check if the param already exists
  var additionalUrlParams = target.getAttribute('data-amp-addparams');
  var href = target.href;

  if (additionalUrlParams) {
    href = (0, _url.addParamsToUrl)(href, (0, _url.parseQueryString)(additionalUrlParams));
  }
  var loc = (0, _url.parseUrlDeprecated)(href);
  var existParams = (0, _url.parseQueryString)(loc.search);
  for (var _i = appendParams.length - 1; _i >= 0; _i--) {
    var _param = appendParams[_i];
    if (typeof existParams[_param] !== 'undefined') {
      appendParams.splice(_i, 1);
    }
  }
  return getQueryParamUrl(appendParams);
}

/**
 * Helper method to convert an query param array to string
 * @param {!Array<string>} params
 * @return {string}
 */
function getQueryParamUrl(params) {
  var url = '';
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    url += i == 0 ? param + '=QUERY_PARAM(' + param + ')' : '&' + param + '=QUERY_PARAM(' + param + ')';
  }
  return url;
}

},{"./experiments":28,"./log":45,"./mode":47,"./services":104,"./url":116,"./utils/promise":125}],38:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.installInputService = installInputService;

var _observable = require('./observable');

var _services = require('./services');

var _log = require('./log');

var _eventHelper = require('./event-helper');

var _service = require('./service');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TAG_ = 'Input';

var MAX_MOUSE_CONFIRM_ATTEMPS_ = 3;
var CLICK_TIMEOUT_ = 300;

/**
 * Detects and maintains different types of input such as touch, mouse or
 * keyboard.
 */

var Input = exports.Input = function () {
  /**
   * @param {!Window} win
   */
  function Input(win) {
    _classCallCheck(this, Input);

    /** @const {!Window} */
    this.win = win;

    /** @private {!Function} */
    this.boundOnKeyDown_ = this.onKeyDown_.bind(this);

    /** @private {!Function} */
    this.boundOnMouseDown_ = this.onMouseDown_.bind(this);

    /** @private {?function(!Event)} */
    this.boundOnMouseMove_ = null;

    /** @private {?Function} */
    this.boundMouseCanceled_ = null;

    /** @private {?Function} */
    this.boundMouseConfirmed_ = null;

    /** @private {boolean} */
    this.hasTouch_ = 'ontouchstart' in win || win.navigator['maxTouchPoints'] !== undefined && win.navigator['maxTouchPoints'] > 0 || win['DocumentTouch'] !== undefined;
    (0, _log.dev)().fine(TAG_, 'touch detected:', this.hasTouch_);

    /** @private {boolean} */
    this.keyboardActive_ = false;
    this.win.document.addEventListener('keydown', this.boundOnKeyDown_);
    this.win.document.addEventListener('mousedown', this.boundOnMouseDown_);

    /** @private {boolean} */
    this.hasMouse_ = true;

    /** @private {number} */
    this.mouseConfirmAttemptCount_ = 0;

    /** @private {!Observable<boolean>} */
    this.touchDetectedObservable_ = new _observable.Observable();

    /** @private {!Observable<boolean>} */
    this.mouseDetectedObservable_ = new _observable.Observable();

    /** @private {!Observable<boolean>} */
    this.keyboardStateObservable_ = new _observable.Observable();

    // If touch available, temporarily set hasMouse to false and wait for
    // mouse events.
    if (this.hasTouch_) {
      this.hasMouse_ = !this.hasTouch_;
      this.boundOnMouseMove_ =
      /** @private {function(!Event)} */this.onMouseMove_.bind(this);
      (0, _eventHelper.listenOnce)(win.document, 'mousemove', this.boundOnMouseMove_);
    }
  }

  /**
   * Whether the touch input has been detected.
   * @return {boolean}
   */


  _createClass(Input, [{
    key: 'isTouchDetected',
    value: function isTouchDetected() {
      return this.hasTouch_;
    }

    /**
     * Registers an event handle in case if the touch is detected.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onTouchDetected',
    value: function onTouchDetected(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isTouchDetected());
      }
      return this.touchDetectedObservable_.add(handler);
    }

    /**
     * Whether the mouse input has been detected.
     * @return {boolean}
     */

  }, {
    key: 'isMouseDetected',
    value: function isMouseDetected() {
      return this.hasMouse_;
    }

    /**
     * Registers an event handle in case if the mouse is detected.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onMouseDetected',
    value: function onMouseDetected(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isMouseDetected());
      }
      return this.mouseDetectedObservable_.add(handler);
    }

    /**
     * Whether the keyboard input is currently active.
     * @return {boolean}
     */

  }, {
    key: 'isKeyboardActive',
    value: function isKeyboardActive() {
      return this.keyboardActive_;
    }

    /**
     * Registers an event handle for changes in the keyboard input.
     * @param {function(boolean)} handler
     * @param {boolean=} opt_fireImmediately
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onKeyboardStateChanged',
    value: function onKeyboardStateChanged(handler, opt_fireImmediately) {
      if (opt_fireImmediately) {
        handler(this.isKeyboardActive());
      }
      return this.keyboardStateObservable_.add(handler);
    }

    /**
     * @param {!Event} e
     * @private
     */

  }, {
    key: 'onKeyDown_',
    value: function onKeyDown_(e) {
      if (this.keyboardActive_) {
        return;
      }

      if (e.defaultPrevented) {
        return;
      }

      // Ignore inputs.
      var target = e.target;

      if (target && (target.tagName == 'INPUT' || target.tagName == 'TEXTAREA' || target.tagName == 'SELECT' || target.tagName == 'OPTION' || target.hasAttribute('contenteditable'))) {
        return;
      }

      this.keyboardActive_ = true;
      this.keyboardStateObservable_.fire(true);
      (0, _log.dev)().fine(TAG_, 'keyboard activated');
    }

    /** @private */

  }, {
    key: 'onMouseDown_',
    value: function onMouseDown_() {
      if (!this.keyboardActive_) {
        return;
      }
      this.keyboardActive_ = false;
      this.keyboardStateObservable_.fire(false);
      (0, _log.dev)().fine(TAG_, 'keyboard deactivated');
    }

    /**
     * @param {!Event} e
     * @return {!Promise|undefined}
     * @private
     */

  }, {
    key: 'onMouseMove_',
    value: function onMouseMove_(e) {
      var _this = this;

      // The event explicitly states that it's a result of a touch event.
      if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) {
        this.mouseCanceled_();
        return undefined;
      }
      if (!this.boundMouseConfirmed_) {
        this.boundMouseConfirmed_ = this.mouseConfirmed_.bind(this);
        this.boundMouseCanceled_ = this.mouseCanceled_.bind(this);
      }
      // If "click" arrives within a timeout time, this is most likely a
      // touch/mouse emulation. Otherwise, if timeout exceeded, this looks
      // like a legitimate mouse event.
      var unlisten = void 0;
      var listenPromise = (0, _eventHelper.listenOncePromise)(this.win.document, 'click',
      /* capture */undefined, function (unlistener) {
        unlisten = unlistener;
      });
      return _services.Services.timerFor(this.win).timeoutPromise(CLICK_TIMEOUT_, listenPromise).then(this.boundMouseCanceled_, function () {
        if (unlisten) {
          unlisten();
        }
        _this.boundMouseConfirmed_();
      });
    }

    /** @private */

  }, {
    key: 'mouseConfirmed_',
    value: function mouseConfirmed_() {
      this.hasMouse_ = true;
      this.mouseDetectedObservable_.fire(true);
      (0, _log.dev)().fine(TAG_, 'mouse detected');
    }

    /** @private */

  }, {
    key: 'mouseCanceled_',
    value: function mouseCanceled_() {
      // Repeat, if attempts allow.
      this.mouseConfirmAttemptCount_++;
      if (this.mouseConfirmAttemptCount_ <= MAX_MOUSE_CONFIRM_ATTEMPS_) {
        (0, _eventHelper.listenOnce)(this.win.document, 'mousemove',
        /** @type {function(!Event)} */this.boundOnMouseMove_);
      } else {
        (0, _log.dev)().fine(TAG_, 'mouse detection failed');
      }
    }
  }]);

  return Input;
}();

/**
 * @param {!Window} win
 */


function installInputService(win) {
  (0, _service.registerServiceBuilder)(win, 'input', Input);
}

},{"./event-helper":27,"./log":45,"./observable":48,"./service":63,"./services":104}],39:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntersectionObserverPolyfill = exports.IntersectionObserverApi = exports.DEFAULT_THRESHOLD = exports.DOMRect = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.getIntersectionChangeEntry = getIntersectionChangeEntry;
exports.nativeIntersectionObserverSupported = nativeIntersectionObserverSupported;
exports.getThresholdSlot = getThresholdSlot;

var _iframeHelper = require('./iframe-helper');

var _log = require('./log');

var _object = require('./utils/object');

var _types = require('./types');

var _layoutRect = require('./layout-rect');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The structure that defines the rectangle used in intersection observers.
 *
 * @typedef {{
 *   top: number,
 *   bottom: number,
 *   left: number,
 *   right: number,
 *   width: number,
 *   height: number,
 *   x: number,
 *   y: number,
 * }}
 */
var DOMRect = exports.DOMRect = void 0;

var DEFAULT_THRESHOLD = exports.DEFAULT_THRESHOLD = [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1];

/** @typedef {{
 *    element: !Element,
 *    currentThresholdSlot: number,
 *  }}
 */
var ElementIntersectionStateDef = void 0;

/** @const @private */
var TAG = 'INTERSECTION-OBSERVER';

/** @const @private */
var INIT_TIME = Date.now();

/**
 * A function to get the element's current IntersectionObserverEntry
 * regardless of the intersetion ratio. Only available when element is not
 * nested in a container iframe.
 * TODO: support opt_iframe if there's valid use cases.
 * @param {!./layout-rect.LayoutRectDef} element element's rect
 * @param {?./layout-rect.LayoutRectDef} owner element's owner rect
 * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
 * @return {!IntersectionObserverEntry} A change entry.
 */
function getIntersectionChangeEntry(element, owner, hostViewport) {
  var intersection = (0, _layoutRect.rectIntersection)(element, owner, hostViewport) || (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0);
  var ratio = intersectionRatio(intersection, element);
  return calculateChangeEntry(element, hostViewport, intersection, ratio);
}

/**
 * @param {!Window} win
 * @return {boolean}
 */
function nativeIntersectionObserverSupported(win) {
  return 'IntersectionObserver' in win && 'IntersectionObserverEntry' in win && 'intersectionRatio' in win.IntersectionObserverEntry.prototype;
}

/**
 * A class to help amp-iframe and amp-ad nested iframe listen to intersection
 * change.
 */

var IntersectionObserverApi = exports.IntersectionObserverApi = function () {
  /**
   * @param {!AMP.BaseElement} baseElement
   * @param {!Element} iframe
   * @param {boolean=} opt_is3p
   */
  function IntersectionObserverApi(baseElement, iframe, opt_is3p) {
    var _this = this;

    _classCallCheck(this, IntersectionObserverApi);

    /** @private @const {!AMP.BaseElement} */
    this.baseElement_ = baseElement;

    /** @private {?IntersectionObserverPolyfill} */
    this.intersectionObserver_ = null;

    /** @private {boolean} */
    this.shouldObserve_ = false;

    /** @private {boolean} */
    this.isInViewport_ = false;

    /** @private {?function()} */
    this.unlistenOnDestroy_ = null;

    /** @private @const {!./service/viewport/viewport-impl.Viewport} */
    this.viewport_ = baseElement.getViewport();

    /** @private {?SubscriptionApi} */
    this.subscriptionApi_ = new _iframeHelper.SubscriptionApi(iframe, 'send-intersections', opt_is3p || false, function () {
      _this.startSendingIntersection_();
    });

    this.intersectionObserver_ = new IntersectionObserverPolyfill(function (entries) {
      // Remove target info from cross origin iframe.
      for (var i = 0; i < entries.length; i++) {
        delete entries[i]['target'];
      }
      _this.subscriptionApi_.send('intersection', (0, _object.dict)({ 'changes': entries }));
    }, { threshold: DEFAULT_THRESHOLD });
    this.intersectionObserver_.tick(this.viewport_.getRect());

    /** @const {function()} */
    this.fire = function () {
      if (!_this.shouldObserve_ || !_this.isInViewport_) {
        return;
      }
      _this.intersectionObserver_.tick(_this.viewport_.getRect());
    };
  }

  /**
   * Function to start listening to viewport event. and observer intersection
   * change on the element.
   */


  _createClass(IntersectionObserverApi, [{
    key: 'startSendingIntersection_',
    value: function startSendingIntersection_() {
      var _this2 = this;

      this.shouldObserve_ = true;
      this.intersectionObserver_.observe(this.baseElement_.element);
      this.baseElement_.getVsync().measure(function () {
        _this2.isInViewport_ = _this2.baseElement_.isInViewport();
        _this2.fire();
      });

      var unlistenViewportScroll = this.viewport_.onScroll(this.fire);
      var unlistenViewportChange = this.viewport_.onChanged(this.fire);
      this.unlistenOnDestroy_ = function () {
        unlistenViewportScroll();
        unlistenViewportChange();
      };
    }

    /**
     * Enable to the PositionObserver to listen to viewport events
     * @param {boolean} inViewport
     */

  }, {
    key: 'onViewportCallback',
    value: function onViewportCallback(inViewport) {
      this.isInViewport_ = inViewport;
    }

    /**
     * Clean all listenrs
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.shouldObserve_ = false;
      this.intersectionObserver_ = null;
      if (this.unlistenOnDestroy_) {
        this.unlistenOnDestroy_();
        this.unlistenOnDestroy_ = null;
      }
      this.subscriptionApi_.destroy();
      this.subscriptionApi_ = null;
    }
  }]);

  return IntersectionObserverApi;
}();

/**
 * The IntersectionObserverPolyfill class lets any element receive its
 * intersection data with the viewport. It acts like native browser supported
 * IntersectionObserver.
 * The IntersectionObserver receives a callback function and an optional option
 * as params. Whenever the element intersection ratio cross a threshold value,
 * IntersectionObserverPolyfill will call the provided callback function with
 * the change entry.
 * @visibleForTesting
 */


var IntersectionObserverPolyfill = exports.IntersectionObserverPolyfill = function () {
  /**
   * @param {function(!Array<!IntersectionObserverEntry>)} callback
   * @param {Object=} opt_option
   */
  function IntersectionObserverPolyfill(callback, opt_option) {
    _classCallCheck(this, IntersectionObserverPolyfill);

    /** @private @const {function(!Array<!IntersectionObserverEntry>)} */
    this.callback_ = callback;

    // The input threshold can be a number or an array of numbers.
    var threshold = opt_option && opt_option.threshold;
    if (threshold) {
      threshold = (0, _types.isArray)(threshold) ? threshold : [threshold];
    } else {
      threshold = [0];
    }

    for (var i = 0; i < threshold.length; i++) {
      (0, _log.dev)().assert((0, _types.isFiniteNumber)(threshold[i]), 'Threshold should be a ' + 'finite number or an array of finite numbers');
    }

    /**
     * A list of threshold, sorted in increasing numeric order
     * @private @const {!Array}
     */
    this.threshold_ = threshold.sort();
    (0, _log.dev)().assert(this.threshold_[0] >= 0 && this.threshold_[this.threshold_.length - 1] <= 1, 'Threshold should be in the range from "[0, 1]"');

    /** @private {?./layout-rect.LayoutRectDef} */
    this.lastViewportRect_ = null;

    /** @private {./layout-rect.LayoutRectDef|undefined} */
    this.lastIframeRect_ = undefined;

    /**
     * Store a list of observed elements and their current threshold slot which
     * their intersection ratio fills, range from [0, this.threshold_.length]
     * @private {Array<!ElementIntersectionStateDef>}
     */
    this.observeEntries_ = [];
  }

  /**
   */


  _createClass(IntersectionObserverPolyfill, [{
    key: 'disconnect',
    value: function disconnect() {
      this.observeEntries_.length = 0;
    }

    /**
     * Provide a way to observe the intersection change for a specific element
     * Please note IntersectionObserverPolyfill only support AMP element now
     * TODO: Support non AMP element
     * @param {!Element} element
     */

  }, {
    key: 'observe',
    value: function observe(element) {
      // Check the element is an AMP element.
      (0, _log.dev)().assert(element.getLayoutBox);

      // If the element already exists in current observeEntries, do nothing
      for (var i = 0; i < this.observeEntries_.length; i++) {
        if (this.observeEntries_[i].element === element) {
          (0, _log.dev)().warn(TAG, 'should observe same element once');
          return;
        }
      }

      var newState = {
        element: element,
        currentThresholdSlot: 0
      };

      // Get the new observed element's first changeEntry based on last viewport
      if (this.lastViewportRect_) {
        var change = this.getValidIntersectionChangeEntry_(newState, this.lastViewportRect_, this.lastIframeRect_);
        if (change) {
          this.callback_([change]);
        }
      }

      // push new observed element
      this.observeEntries_.push(newState);
    }

    /**
     * Provide a way to unobserve intersection change for a specified element
     * @param {!Element} element
     */

  }, {
    key: 'unobserve',
    value: function unobserve(element) {
      // find the unobserved element in observeEntries
      for (var i = 0; i < this.observeEntries_.length; i++) {
        if (this.observeEntries_[i].element === element) {
          this.observeEntries_.splice(i, 1);
          return;
        }
      }
      (0, _log.dev)().warn(TAG, 'unobserve non-observed element');
    }

    /**
     * Tick function that update the DOMRect of the root of observed elements.
     * Caller needs to make sure to pass in the correct container.
     * Note: the opt_iframe param is the iframe position relative to the host doc,
     * The iframe must be a non-scrollable iframe.
     * @param {!./layout-rect.LayoutRectDef} hostViewport
     * @param {./layout-rect.LayoutRectDef=} opt_iframe
     */

  }, {
    key: 'tick',
    value: function tick(hostViewport, opt_iframe) {

      if (opt_iframe) {
        // If element inside an iframe. Adjust origin to the iframe.left/top.
        hostViewport = (0, _layoutRect.moveLayoutRect)(hostViewport, -opt_iframe.left, -opt_iframe.top);
        opt_iframe = (0, _layoutRect.moveLayoutRect)(opt_iframe, -opt_iframe.left, -opt_iframe.top);
      }

      this.lastViewportRect_ = hostViewport;
      this.lastIframeRect_ = opt_iframe;

      var changes = [];

      for (var i = 0; i < this.observeEntries_.length; i++) {
        var change = this.getValidIntersectionChangeEntry_(this.observeEntries_[i], hostViewport, opt_iframe);
        if (change) {
          changes.push(change);
        }
      }

      if (changes.length) {
        this.callback_(changes);
      }
    }

    /**
     * Return a change entry for one element that should be compatible with
     * IntersectionObserverEntry if it's valid with current config.
     * When the new intersection ratio doesn't cross one of a threshold value,
     * the function will return null.
     *
     * @param {!ElementIntersectionStateDef} state
     * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
     * @param {./layout-rect.LayoutRectDef=} opt_iframe iframe container rect
     * @return {?IntersectionObserverEntry} A valid change entry or null if ratio
     * @private
     */

  }, {
    key: 'getValidIntersectionChangeEntry_',
    value: function getValidIntersectionChangeEntry_(state, hostViewport, opt_iframe) {
      var element = state.element;

      // Normalize container LayoutRect to be relative to page

      var ownerRect = null;

      // If opt_iframe is provided, all LayoutRect has position relative to
      // the iframe.
      // If opt_iframe is not provided, all LayoutRect has position relative to
      // the host document.
      var elementRect = element.getLayoutBox();
      var owner = element.getOwner();
      ownerRect = owner && owner.getLayoutBox();

      // calculate intersectionRect. that the element intersects with hostViewport
      // and intersects with owner element and container iframe if exists.
      var intersectionRect = (0, _layoutRect.rectIntersection)(elementRect, ownerRect, hostViewport, opt_iframe) || (0, _layoutRect.layoutRectLtwh)(0, 0, 0, 0);
      // calculate ratio, call callback based on new ratio value.
      var ratio = intersectionRatio(intersectionRect, elementRect);
      var newThresholdSlot = getThresholdSlot(this.threshold_, ratio);

      if (newThresholdSlot == state.currentThresholdSlot) {
        return null;
      }
      state.currentThresholdSlot = newThresholdSlot;

      // To get same behavior as native IntersectionObserver set hostViewport null
      // if inside an iframe
      var changeEntry = calculateChangeEntry(elementRect, opt_iframe ? null : hostViewport, intersectionRect, ratio);
      changeEntry.target = element;
      return changeEntry;
    }
  }]);

  return IntersectionObserverPolyfill;
}();

/**
 * Returns the ratio of the smaller box's area to the larger box's area.
 * @param {!./layout-rect.LayoutRectDef} smaller
 * @param {!./layout-rect.LayoutRectDef} larger
 * @return {number}
 */


function intersectionRatio(smaller, larger) {
  return smaller.width * smaller.height / (larger.width * larger.height);
}

/**
 * Returns the slot number that the current ratio fills in.
 * @param {!Array} sortedThreshold valid sorted IoB threshold
 * @param {number} ratio Range from [0, 1]
 * @return {number} Range from [0, threshold.length]
 * @visibleForTesting
 */
function getThresholdSlot(sortedThreshold, ratio) {
  var startIdx = 0;
  var endIdx = sortedThreshold.length;
  // 0 is a special case that does not fit into [small, large) range
  if (ratio == 0) {
    return 0;
  }
  var mid = (startIdx + endIdx) / 2 | 0;
  while (startIdx < mid) {
    var midValue = sortedThreshold[mid];
    // In the range of [small, large)
    if (ratio < midValue) {
      endIdx = mid;
    } else {
      startIdx = mid;
    }
    mid = (startIdx + endIdx) / 2 | 0;
  }
  return endIdx;
}

/**
 * Helper function to calculate the IntersectionObserver change entry.
 * @param {!./layout-rect.LayoutRectDef} element element's rect
 * @param {?./layout-rect.LayoutRectDef} hostViewport hostViewport's rect
 * @param {!./layout-rect.LayoutRectDef} intersection
 * @param {number} ratio
 * @return {!IntersectionObserverEntry}}
 */
function calculateChangeEntry(element, hostViewport, intersection, ratio) {
  // If element not in an iframe.
  // adjust all LayoutRect to hostViewport Origin.
  var boundingClientRect = element;
  var rootBounds = hostViewport;
  // If no hostViewport is provided, element is inside an non-scrollable iframe.
  // Every Layoutrect has already adjust their origin according to iframe
  // rect origin. LayoutRect position is relative to iframe origin,
  // thus relative to iframe's viewport origin because the viewport is at the
  // iframe origin. No need to adjust position here.

  if (hostViewport) {
    // If element not in an iframe.
    // adjust all LayoutRect to hostViewport Origin.
    rootBounds = /** @type {!./layout-rect.LayoutRectDef} */rootBounds;
    intersection = (0, _layoutRect.moveLayoutRect)(intersection, -hostViewport.left, -hostViewport.top);
    // The element is relative to (0, 0), while the viewport moves. So, we must
    // adjust.
    boundingClientRect = (0, _layoutRect.moveLayoutRect)(boundingClientRect, -hostViewport.left, -hostViewport.top);
    // Now, move the viewport to (0, 0)
    rootBounds = (0, _layoutRect.moveLayoutRect)(rootBounds, -hostViewport.left, -hostViewport.top);
  }

  return (/** @type {!IntersectionObserverEntry} */{
      time: typeof performance !== 'undefined' && performance.now ? performance.now() : Date.now() - INIT_TIME,
      rootBounds: rootBounds,
      boundingClientRect: boundingClientRect,
      intersectionRect: intersection,
      intersectionRatio: ratio
    }
  );
}

},{"./iframe-helper":36,"./layout-rect":42,"./log":45,"./types":113,"./utils/object":123}],40:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                               * limitations under the License.
                                                                                                                                                                                                                                                                               */

/**
 * @fileoverview This module declares JSON types as defined in the
 * {@link http://json.org/}.
 */

exports.recreateNonProtoObject = recreateNonProtoObject;
exports.getValueForExpr = getValueForExpr;
exports.parseJson = parseJson;
exports.tryParseJson = tryParseJson;
exports.deepEquals = deepEquals;

var _types = require('./types');

// NOTE Type are changed to {*} because of
// https://github.com/google/closure-compiler/issues/1999

/**
 * JSON scalar. It's either string, number or boolean.
 * @typedef {*} should be string|number|boolean
 */
var JSONScalarDef = void 0;

/**
 * JSON object. It's a map with string keys and JSON values.
 * @typedef {*} should be !Object<string, ?JSONValueDef>
 */
var JSONObjectDef = void 0;

/**
 * JSON array. It's an array with JSON values.
 * @typedef {*} should be !Array<?JSONValueDef>
 */
var JSONArrayDef = void 0;

/**
 * JSON value. It's either a scalar, an object or an array.
 * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef
 */
var JSONValueDef = void 0;

/**
 * Recreates objects with prototype-less copies.
 * @param {!JsonObject} obj
 * @return {!JsonObject}
 */
function recreateNonProtoObject(obj) {
  var copy = Object.create(null);
  for (var k in obj) {
    if (!hasOwnProperty(obj, k)) {
      continue;
    }
    var v = obj[k];
    copy[k] = (0, _types.isObject)(v) ? recreateNonProtoObject(v) : v;
  }
  return (/** @type {!JsonObject} */copy
  );
}

/**
 * Returns a value from an object for a field-based expression. The expression
 * is a simple nested dot-notation of fields, such as `field1.field2`. If any
 * field in a chain does not exist or is not an object or array, the returned
 * value will be `undefined`.
 *
 * @param {!JsonObject} obj
 * @param {string} expr
 * @return {*}
 */
function getValueForExpr(obj, expr) {
  // The `.` indicates "the object itself".
  if (expr == '.') {
    return obj;
  }
  // Otherwise, navigate via properties.
  var parts = expr.split('.');
  var value = obj;
  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];
    if (part && value && value[part] !== undefined && hasOwnProperty(value, part)) {
      value = value[part];
      continue;
    }
    value = undefined;
    break;
  }
  return value;
}

/**
 * Simple wrapper around JSON.parse that casts the return value
 * to JsonObject.
 * Create a new wrapper if an array return value is desired.
 * @param {*} json JSON string to parse
 * @return {?JsonObject} May be extend to parse arrays.
 */
function parseJson(json) {
  return (/** @type {?JsonObject} */JSON.parse( /** @type {string} */json)
  );
}

/**
 * Parses the given `json` string without throwing an exception if not valid.
 * Returns `undefined` if parsing fails.
 * Returns the `Object` corresponding to the JSON string when parsing succeeds.
 * @param {*} json JSON string to parse
 * @param {function(!Error)=} opt_onFailed Optional function that will be called
 *     with the error if parsing fails.
 * @return {?JsonObject|undefined} May be extend to parse arrays.
 */
function tryParseJson(json, opt_onFailed) {
  try {
    return parseJson(json);
  } catch (e) {
    if (opt_onFailed) {
      opt_onFailed(e);
    }
    return undefined;
  }
}

/**
 * Deeply checks strict equality of items in nested arrays and objects.
 *
 * @param {JSONValueDef} a
 * @param {JSONValueDef} b
 * @param {number} depth The maximum depth. Must be finite.
 * @return {boolean}
 * @throws {Error} If depth argument is not finite.
 */
function deepEquals(a, b) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;

  if (!isFinite(depth) || depth < 0) {
    throw new Error('Invalid depth: ' + depth);
  }
  if (a === b) {
    return true;
  }
  /** @type {!Array<{a: JSONValueDef, b: JSONValueDef, depth: number}>} */
  var queue = [{ a: a, b: b, depth: depth }];
  while (queue.length > 0) {
    var _queue$shift = queue.shift(),
        _a = _queue$shift.a,
        _b = _queue$shift.b,
        _depth = _queue$shift.depth;
    // Only check deep equality if depth > 0.


    if (_depth > 0) {
      if ((typeof _a === 'undefined' ? 'undefined' : _typeof(_a)) !== (typeof _b === 'undefined' ? 'undefined' : _typeof(_b))) {
        return false;
      } else if (Array.isArray(_a) && Array.isArray(_b)) {
        if (_a.length !== _b.length) {
          return false;
        }
        for (var i = 0; i < _a.length; i++) {
          queue.push({ a: _a[i], b: _b[i], depth: _depth - 1 });
        }
        continue;
      } else if (_a && _b && (typeof _a === 'undefined' ? 'undefined' : _typeof(_a)) === 'object' && (typeof _b === 'undefined' ? 'undefined' : _typeof(_b)) === 'object') {
        var keysA = Object.keys( /** @type {!Object} */_a);
        var keysB = Object.keys( /** @type {!Object} */_b);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var _i = 0; _i < keysA.length; _i++) {
          var k = keysA[_i];
          queue.push({ a: _a[k], b: _b[k], depth: _depth - 1 });
        }
        continue;
      }
    }
    // If we get here, then depth == 0 or (a, b) are primitives.
    if (_a !== _b) {
      return false;
    }
  }
  return true;
}

/**
 * @param {*} obj
 * @param {string} key
 * @return {boolean}
 */
function hasOwnProperty(obj, key) {
  if (obj == null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') {
    return false;
  }
  return Object.prototype.hasOwnProperty.call(
  /** @type {!Object} */obj, key);
}

},{"./types":113}],41:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayoutDelayMeter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2017 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _services = require('./services');

var _log = require('./log');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LABEL_MAP = {
  0: 'cld',
  2: 'adld'
};

/**
 * Measures the time latency between "first time in viewport" and
 * "start to layout" of an element.
 */

var LayoutDelayMeter = exports.LayoutDelayMeter = function () {

  /**
   * @param {!Window} win
   * @param {number} priority
   */
  function LayoutDelayMeter(win, priority) {
    _classCallCheck(this, LayoutDelayMeter);

    /** @private {!Window} */
    this.win_ = win;
    /** @private {?./service/performance-impl.Performance} */
    this.performance_ = _services.Services.performanceForOrNull(win);
    /** @private {?number} */
    this.firstInViewportTime_ = null;
    /** @private {?number} */
    this.firstLayoutTime_ = null;
    /** @private {boolean} */
    this.done_ = false;
    /** @private {?string} */
    this.label_ = LABEL_MAP[priority];
  }

  /**
   *
   */


  _createClass(LayoutDelayMeter, [{
    key: 'enterViewport',
    value: function enterViewport() {
      if (!this.label_ || this.firstInViewportTime_) {
        return;
      }
      this.firstInViewportTime_ = this.win_.Date.now();
      this.tryMeasureDelay_();
    }

    /**
     * starts layout
     */

  }, {
    key: 'startLayout',
    value: function startLayout() {
      if (!this.label_ || this.firstLayoutTime_) {
        return;
      }
      this.firstLayoutTime_ = this.win_.Date.now();
      this.tryMeasureDelay_();
    }

    /**
     * Tries to measure delay
     */

  }, {
    key: 'tryMeasureDelay_',
    value: function tryMeasureDelay_() {
      if (!this.performance_ || !this.performance_.isPerformanceTrackingOn()) {
        return;
      }
      if (this.done_) {
        // Already measured.
        return;
      }
      if (!this.firstInViewportTime_ || !this.firstLayoutTime_) {
        // Not ready yet.
        return;
      }
      var delay = this.win_.Math.max(this.firstLayoutTime_ - this.firstInViewportTime_, 0);
      this.performance_.tickDelta((0, _log.dev)().assertString(this.label_), delay);
      this.performance_.throttledFlush();
      this.done_ = true;
    }
  }]);

  return LayoutDelayMeter;
}();

},{"./log":45,"./services":104}],42:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layoutRectLtwh = layoutRectLtwh;
exports.layoutRectFromDomRect = layoutRectFromDomRect;
exports.layoutRectsOverlap = layoutRectsOverlap;
exports.rectIntersection = rectIntersection;
exports.layoutRectsRelativePos = layoutRectsRelativePos;
exports.expandLayoutRect = expandLayoutRect;
exports.moveLayoutRect = moveLayoutRect;
exports.areMarginsChanged = areMarginsChanged;
exports.layoutRectSizeEquals = layoutRectSizeEquals;
exports.layoutRectEquals = layoutRectEquals;
exports.cloneLayoutMarginsChangeDef = cloneLayoutMarginsChangeDef;
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The structure that combines position and size for an element. The exact
 * interpretation of position and size depends on the use case.
 *
 * @typedef {{
 *   top: number,
 *   bottom: number,
 *   left: number,
 *   right: number,
 *   width: number,
 *   height: number,
 *   x: number,
 *   y: number
 * }}
 */
var LayoutRectDef = exports.LayoutRectDef = void 0;

/**
 * The structure that represents the margins of an Element.
 *
 * @typedef {{
 *   top: number,
 *   right: number,
 *   bottom: number,
 *   left: number
 * }}
 */
var LayoutMarginsDef = exports.LayoutMarginsDef = void 0;

/**
 * The structure that represents a requested change to the margins of an
 * Element. Any new values specified will replace existing ones (rather than
 * being additive).
 *
 * @typedef {{
 *   top: (number|undefined),
 *   right: (number|undefined),
 *   bottom: (number|undefined),
 *   left: (number|undefined)
 * }}
 */
var LayoutMarginsChangeDef = exports.LayoutMarginsChangeDef = void 0;

/**
* RelativePositions
*
* Describes the relative position of an element to another (whether the
* first is inside the second, on top of the second or on the bottom
* @enum {string}
*/
var RelativePositions = exports.RelativePositions = {
  INSIDE: 'inside',
  TOP: 'top',
  BOTTOM: 'bottom'
};

/**
 * Creates a layout rect based on the left, top, width and height parameters
 * in that order.
 * @param {number} left
 * @param {number} top
 * @param {number} width
 * @param {number} height
 * @return {!LayoutRectDef}
 */
function layoutRectLtwh(left, top, width, height) {
  return {
    left: left,
    top: top,
    width: width,
    height: height,
    bottom: top + height,
    right: left + width,
    x: left,
    y: top
  };
}

/**
 * Creates a layout rect based on the DOMRect, e.g. obtained from calling
 * getBoundingClientRect.
 * @param {!ClientRect} rect
 * @return {!LayoutRectDef}
 */
function layoutRectFromDomRect(rect) {
  return layoutRectLtwh(Number(rect.left), Number(rect.top), Number(rect.width), Number(rect.height));
}

/**
 * Returns true if the specified two rects overlap by a single pixel.
 * @param {!LayoutRectDef} r1
 * @param {!LayoutRectDef} r2
 * @return {boolean}
 */
function layoutRectsOverlap(r1, r2) {
  return r1.top <= r2.bottom && r2.top <= r1.bottom && r1.left <= r2.right && r2.left <= r1.right;
}

/**
 * Returns the intersection between a, b or null if there is none.
 * @param {...?LayoutRectDef|undefined} var_args
 * @return {?LayoutRectDef}
 */
function rectIntersection(var_args) {
  var x0 = -Infinity;
  var x1 = Infinity;
  var y0 = -Infinity;
  var y1 = Infinity;
  for (var i = 0; i < arguments.length; i++) {
    var current = arguments[i];
    if (!current) {
      continue;
    }
    x0 = Math.max(x0, current.left);
    x1 = Math.min(x1, current.left + current.width);
    y0 = Math.max(y0, current.top);
    y1 = Math.min(y1, current.top + current.height);
    if (x1 < x0 || y1 < y0) {
      return null;
    }
  }
  if (x1 == Infinity) {
    return null;
  }
  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);
}

/**
 * Returns the position of r2 relative to r1
 * @param {!LayoutRectDef} r1
 * @param {!LayoutRectDef} r2
 * @return {RelativePositions}
 */
function layoutRectsRelativePos(r1, r2) {
  if (r1.top < r2.top) {
    return RelativePositions.TOP;
  } else if (r1.bottom > r2.bottom) {
    return RelativePositions.BOTTOM;
  } else {
    return RelativePositions.INSIDE;
  }
}

/**
 * Expand the layout rect using multiples of width and height.
 * @param {!LayoutRectDef} rect Original rect.
 * @param {number} dw Expansion in width, specified as a multiple of width.
 * @param {number} dh Expansion in height, specified as a multiple of height.
 * @return {!LayoutRectDef}
 */
function expandLayoutRect(rect, dw, dh) {
  return layoutRectLtwh(rect.left - rect.width * dw, rect.top - rect.height * dh, rect.width * (1 + dw * 2), rect.height * (1 + dh * 2));
}

/**
 * Moves the layout rect using dx and dy.
 * @param {!LayoutRectDef} rect Original rect.
 * @param {number} dx Move horizontally with this value.
 * @param {number} dy Move vertically with this value.
 * @return {!LayoutRectDef}
 */
function moveLayoutRect(rect, dx, dy) {
  if (dx == 0 && dy == 0 || rect.width == 0 && rect.height == 0) {
    return rect;
  }
  return layoutRectLtwh(rect.left + dx, rect.top + dy, rect.width, rect.height);
}

/**
 * @param {!LayoutMarginsDef} margins
 * @param {!LayoutMarginsChangeDef} change
 * @return {boolean}
 */
function areMarginsChanged(margins, change) {
  return change.top !== undefined && change.top != margins.top || change.right !== undefined && change.right != margins.right || change.bottom !== undefined && change.bottom != margins.bottom || change.left !== undefined && change.left != margins.left;
}

/**
 * @param {!LayoutRectDef} from
 * @param {!LayoutRectDef} to
 * @return {boolean}
 */
function layoutRectSizeEquals(from, to) {
  return from.width == to.width && from.height === to.height;
}

/**
 * @param {?LayoutRectDef} r1
 * @param {?LayoutRectDef} r2
 * @return {boolean}
 */
function layoutRectEquals(r1, r2) {
  if (!r1 || !r2) {
    return false;
  }
  return r1.left == r2.left && r1.top == r2.top && r1.width == r2.width && r1.height == r2.height;
}

/**
 * @param {LayoutMarginsChangeDef|undefined} marginsChange
 * @return {LayoutMarginsChangeDef|undefined}
 */
function cloneLayoutMarginsChangeDef(marginsChange) {
  if (!marginsChange) {
    return marginsChange;
  }
  return {
    top: marginsChange.top,
    bottom: marginsChange.bottom,
    left: marginsChange.left,
    right: marginsChange.right
  };
}

},{}],43:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOADING_ELEMENTS_ = exports.naturalDimensions_ = exports.LengthDef = exports.LayoutPriority = exports.Layout = undefined;

var _templateObject = _taggedTemplateLiteral(['\n      <i-amphtml-sizer class="i-amphtml-sizer">\n        <img class="i-amphtml-intrinsic-sizer" />\n      </i-amphtml-sizer>'], ['\n      <i-amphtml-sizer class="i-amphtml-sizer">\n        <img class="i-amphtml-intrinsic-sizer" />\n      </i-amphtml-sizer>']);

exports.parseLayout = parseLayout;
exports.getLayoutClass = getLayoutClass;
exports.isLayoutSizeDefined = isLayoutSizeDefined;
exports.isInternalElement = isInternalElement;
exports.parseLength = parseLength;
exports.assertLength = assertLength;
exports.assertLengthOrPercent = assertLengthOrPercent;
exports.getLengthUnits = getLengthUnits;
exports.getLengthNumeral = getLengthNumeral;
exports.hasNaturalDimensions = hasNaturalDimensions;
exports.getNaturalDimensions = getNaturalDimensions;
exports.isLoadingAllowed = isLoadingAllowed;
exports.applyStaticLayout = applyStaticLayout;

var _log = require('./log');

var _staticTemplate = require('./static-template');

var _types = require('./types');

var _style = require('./style');

var _string = require('./string');

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /**
                                                                                                                                                   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                   *
                                                                                                                                                   * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                   * you may not use this file except in compliance with the License.
                                                                                                                                                   * You may obtain a copy of the License at
                                                                                                                                                   *
                                                                                                                                                   *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                   *
                                                                                                                                                   * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                   * distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                   * See the License for the specific language governing permissions and
                                                                                                                                                   * limitations under the License.
                                                                                                                                                   */

/**
 * @fileoverview Implements element layout. See https://goo.gl/9avXuT for
 * details.
 */

/**
 * @enum {string}
 */
var Layout = exports.Layout = {
  NODISPLAY: 'nodisplay',
  FIXED: 'fixed',
  FIXED_HEIGHT: 'fixed-height',
  RESPONSIVE: 'responsive',
  CONTAINER: 'container',
  FILL: 'fill',
  FLEX_ITEM: 'flex-item',
  FLUID: 'fluid',
  INTRINSIC: 'intrinsic'
};

/**
 * Layout priorities to use with BaseElement#getLayoutPriority() and
 * BaseElement#updateLayoutPriority().
 * @enum {number}
 */
var LayoutPriority = exports.LayoutPriority = {
  CONTENT: 0,
  METADATA: 1,
  ADS: 2,
  BACKGROUND: 3
};

/**
 * CSS Length type. E.g. "1px" or "20vh".
 * @typedef {string}
 */
var LengthDef = exports.LengthDef = void 0;

/**
 * @typedef {{
 *   width: string,
 *   height: string
 * }}
 */
var DimensionsDef = void 0;

/**
 * The set of elements with natural dimensions, that is, elements
 * which have a known dimension either based on their value specified here,
 * or, if the value is null, a dimension specific to the browser.
 * `hasNaturalDimensions` checks for membership in this set.
 * `getNaturalDimensions` determines the dimensions for an element in the
 *    set and caches it.
 * @type {!Object<string, ?DimensionsDef>}
 * @private  Visible for testing only!
 */
var naturalDimensions_ = exports.naturalDimensions_ = {
  'AMP-PIXEL': { width: '0px', height: '0px' },
  'AMP-ANALYTICS': { width: '1px', height: '1px' },
  // TODO(dvoytenko): audio should have width:auto.
  'AMP-AUDIO': null,
  'AMP-SOCIAL-SHARE': { width: '60px', height: '44px' }
};

/**
 * Elements that the progess can be shown for. This set has to be externalized
 * since the element's implementation may not be downloaded yet.
 * @enum {boolean}
 * @private  Visible for testing only!
 */
var LOADING_ELEMENTS_ = exports.LOADING_ELEMENTS_ = {
  'AMP-ANIM': true,
  'AMP-BRIGHTCOVE': true,
  'AMP-GOOGLE-DOCUMENT-EMBED': true,
  'AMP-EMBED': true,
  'AMP-FACEBOOK': true,
  'AMP-FACEBOOK-COMMENTS': true,
  'AMP-FACEBOOK-LIKE': true,
  'AMP-FACEBOOK-PAGE': true,
  'AMP-IFRAME': true,
  'AMP-IMG': true,
  'AMP-INSTAGRAM': true,
  'AMP-LIST': true,
  'AMP-OOYALA-PLAYER': true,
  'AMP-PINTEREST': true,
  'AMP-PLAYBUZZ': true,
  'AMP-VIDEO': true,
  'AMP-YOUTUBE': true
};

/**
 * @param {string} s
 * @return {Layout|undefined} Returns undefined in case of failure to parse
 *   the layout string.
 */
function parseLayout(s) {
  for (var k in Layout) {
    if (Layout[k] == s) {
      return Layout[k];
    }
  }
  return undefined;
}

/**
 * @param {!Layout} layout
 * @return {string}
 */
function getLayoutClass(layout) {
  return 'i-amphtml-layout-' + layout;
}

/**
 * Whether an element with this layout inherently defines the size.
 * @param {!Layout} layout
 * @return {boolean}
 */
function isLayoutSizeDefined(layout) {
  return layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT || layout == Layout.RESPONSIVE || layout == Layout.FILL || layout == Layout.FLEX_ITEM || layout == Layout.FLUID || layout == Layout.INTRINSIC;
}

/**
 * Whether the tag is an internal (service) AMP tag.
 * @param {!Node|string} tag
 * @return {boolean}
 */
function isInternalElement(tag) {
  var tagName = typeof tag == 'string' ? tag : tag.tagName;
  return tagName && (0, _string.startsWith)(tagName.toLowerCase(), 'i-');
}

/**
 * Parses the CSS length value. If no units specified, the assumed value is
 * "px". Returns undefined in case of parsing error.
 * @param {string|undefined|null} s
 * @return {!LengthDef|undefined}
 */
function parseLength(s) {
  if (typeof s == 'number') {
    return s + 'px';
  }
  if (!s) {
    return undefined;
  }
  if (!/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {
    return undefined;
  }
  if (/^\d+(\.\d+)?$/.test(s)) {
    return s + 'px';
  }
  return s;
}

/**
 * Asserts that the supplied value is a non-percent CSS Length value.
 * @param {!LengthDef|string|null|undefined} length
 * @return {!LengthDef}
 */
function assertLength(length) {
  (0, _log.user)().assert(/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length), 'Invalid length value: %s', length);
  return (/** @type {!LengthDef} */length
  );
}

/**
 * Asserts that the supplied value is a CSS Length value
 * (including percent unit).
 * @param {!LengthDef|string} length
 * @return {!LengthDef}
 */
function assertLengthOrPercent(length) {
  (0, _log.user)().assert(/^\d+(\.\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length), 'Invalid length or percent value: %s', length);
  return length;
}

/**
 * Returns units from the CSS length value.
 * @param {!LengthDef|string|null|undefined} length
 * @return {string}
 */
function getLengthUnits(length) {
  assertLength(length);
  (0, _log.dev)().assertString(length);
  var m = (0, _log.user)().assert(length.match(/[a-z]+/i), 'Failed to read units from %s', length);
  return m[0];
}

/**
 * Returns the numeric value of a CSS length value.
 * @param {!LengthDef|string|null|undefined} length
 * @return {number|undefined}
 */
function getLengthNumeral(length) {
  var res = parseFloat(length);
  return (0, _types.isFiniteNumber)(res) ? res : undefined;
}

/**
 * Determines whether the tagName is a known element that has natural dimensions
 * in our runtime or the browser.
 * @param {string} tagName The element tag name.
 * @return {boolean}
 */
function hasNaturalDimensions(tagName) {
  tagName = tagName.toUpperCase();
  return naturalDimensions_[tagName] !== undefined;
}

/**
 * Determines the default dimensions for an element which could vary across
 * different browser implementations, like <audio> for instance.
 * This operation can only be completed for an element whitelisted by
 * `hasNaturalDimensions`.
 * @param {!Element} element
 * @return {DimensionsDef}
 */
function getNaturalDimensions(element) {
  var tagName = element.tagName.toUpperCase();
  (0, _log.dev)().assert(naturalDimensions_[tagName] !== undefined);
  if (!naturalDimensions_[tagName]) {
    var doc = element.ownerDocument;
    var naturalTagName = tagName.replace(/^AMP\-/, '');
    var temp = doc.createElement(naturalTagName);
    // For audio, should no-op elsewhere.
    temp.controls = true;
    (0, _style.setStyles)(temp, {
      position: 'absolute',
      visibility: 'hidden'
    });
    doc.body.appendChild(temp);
    naturalDimensions_[tagName] = {
      width: (temp. /*OK*/offsetWidth || 1) + 'px',
      height: (temp. /*OK*/offsetHeight || 1) + 'px'
    };
    doc.body.removeChild(temp);
  }
  return (/** @type {DimensionsDef} */naturalDimensions_[tagName]
  );
}

/**
 * Whether the loading can be shown for the specified elemeent. This set has
 * to be externalized since the element's implementation may not be
 * downloaded yet.
 * @param {!Element} element
 * @return {boolean}
 */
function isLoadingAllowed(element) {
  var tagName = element.tagName.toUpperCase();
  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {
    return true;
  }
  return LOADING_ELEMENTS_[tagName] || false;
}

/**
 * Applies layout to the element. Visible for testing only.
 *
 * \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  / _____|
 *  \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
 *   \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
 *    \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
 *     \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
 *
 * The equivalent of this method is used for server-side rendering (SSR) and
 * any changes made to it must be made in coordination with caches that
 * implement SSR. For more information on SSR see bit.ly/amp-ssr.
 *
 * @param {!Element} element
 * @return {!Layout}
 */
function applyStaticLayout(element) {
  // Check if the layout has already been done by server-side rendering. The
  // document may be visible to the user if the boilerplate was removed so
  // please take care in making changes here.
  var completedLayoutAttr = element.getAttribute('i-amphtml-layout');
  if (completedLayoutAttr) {
    var _layout = /** @type {!Layout} */(0, _log.dev)().assert(parseLayout(completedLayoutAttr));
    if ((_layout == Layout.RESPONSIVE || _layout == Layout.INTRINSIC) && element.firstElementChild) {
      // Find sizer, but assume that it might not have been parsed yet.
      element.sizerElement = element.querySelector('i-amphtml-sizer') || undefined;
    } else if (_layout == Layout.NODISPLAY) {
      applyNoDisplayLayout(element);
    }
    return _layout;
  }

  // If the layout was already done by server-side rendering (SSR), then the
  // code below will not run. Any changes below will necessitate a change to SSR
  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.

  // Parse layout from the element.
  var layoutAttr = element.getAttribute('layout');
  var widthAttr = element.getAttribute('width');
  var heightAttr = element.getAttribute('height');
  var sizesAttr = element.getAttribute('sizes');
  var heightsAttr = element.getAttribute('heights');

  // Input layout attributes.
  var inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;
  (0, _log.user)().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);
  /** @const {string|null|undefined} */
  var inputWidth = widthAttr && widthAttr != 'auto' ? parseLength(widthAttr) : widthAttr;
  (0, _log.user)().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);
  /** @const {string|null|undefined} */
  var inputHeight = heightAttr && heightAttr != 'fluid' ? parseLength(heightAttr) : heightAttr;
  (0, _log.user)().assert(inputHeight !== undefined, 'Invalid height value: %s', heightAttr);

  // Effective layout attributes. These are effectively constants.
  var width = void 0;
  var height = void 0;
  var layout = void 0;

  // Calculate effective width and height.
  if ((!inputLayout || inputLayout == Layout.FIXED || inputLayout == Layout.FIXED_HEIGHT) && (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {
    // Default width and height: handle elements that do not specify a
    // width/height and are defined to have natural browser dimensions.
    var dimensions = getNaturalDimensions(element);
    width = inputWidth || inputLayout == Layout.FIXED_HEIGHT ? inputWidth : dimensions.width;
    height = inputHeight || dimensions.height;
  } else {
    width = inputWidth;
    height = inputHeight;
  }

  // Calculate effective layout.
  if (inputLayout) {
    layout = inputLayout;
  } else if (!width && !height) {
    layout = Layout.CONTAINER;
  } else if (height == 'fluid') {
    layout = Layout.FLUID;
  } else if (height && (!width || width == 'auto')) {
    layout = Layout.FIXED_HEIGHT;
  } else if (height && width && (sizesAttr || heightsAttr)) {
    layout = Layout.RESPONSIVE;
  } else {
    layout = Layout.FIXED;
  }

  // Verify layout attributes.
  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT || layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
    (0, _log.user)().assert(height, 'Expected height to be available: %s', heightAttr);
  }
  if (layout == Layout.FIXED_HEIGHT) {
    (0, _log.user)().assert(!width || width == 'auto', 'Expected width to be either absent or equal "auto" ' + 'for fixed-height layout: %s', widthAttr);
  }
  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
    (0, _log.user)().assert(width && width != 'auto', 'Expected width to be available and not equal to "auto": %s', widthAttr);
  }

  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {
    (0, _log.user)().assert(getLengthUnits(width) == getLengthUnits(height), 'Length units should be the same for width and height: %s, %s', widthAttr, heightAttr);
  } else {
    (0, _log.user)().assert(heightsAttr === null, 'Unexpected "heights" attribute for none-responsive layout');
  }

  // Apply UI.
  element.classList.add(getLayoutClass(layout));
  if (isLayoutSizeDefined(layout)) {
    element.classList.add('i-amphtml-layout-size-defined');
  }
  if (layout == Layout.NODISPLAY) {
    // CSS defines layout=nodisplay automatically with `display:none`. Thus
    // no additional styling is needed.
    applyNoDisplayLayout(element);
  } else if (layout == Layout.FIXED) {
    (0, _style.setStyles)(element, {
      width: (0, _log.dev)().assertString(width),
      height: (0, _log.dev)().assertString(height)
    });
  } else if (layout == Layout.FIXED_HEIGHT) {
    (0, _style.setStyle)(element, 'height', (0, _log.dev)().assertString(height));
  } else if (layout == Layout.RESPONSIVE) {
    var sizer = element.ownerDocument.createElement('i-amphtml-sizer');
    (0, _style.setStyles)(sizer, {
      display: 'block',
      paddingTop: getLengthNumeral(height) / getLengthNumeral(width) * 100 + '%'
    });
    element.insertBefore(sizer, element.firstChild);
    element.sizerElement = sizer;
  } else if (layout == Layout.INTRINSIC) {
    // Intrinsic uses an svg inside the sizer element rather than the padding
    // trick Note a naked svg won't work becasue other thing expect the
    // i-amphtml-sizer element
    var _sizer = (0, _staticTemplate.htmlFor)(element)(_templateObject);
    var intrinsicSizer = _sizer.firstElementChild;
    intrinsicSizer.setAttribute('src', 'data:image/svg+xml;charset=utf-8,<svg height="' + height + '" width="' + width + '" xmlns="http://www.w3.org/2000/svg" version="1.1"/>');
    element.insertBefore(_sizer, element.firstChild);
    // TODO(jpettitt): sizer is leaked and can't be cleaned up.
    element.sizerElement = intrinsicSizer;
  } else if (layout == Layout.FILL) {
    // Do nothing.
  } else if (layout == Layout.CONTAINER) {
    // Do nothing. Elements themselves will check whether the supplied
    // layout value is acceptable. In particular container is only OK
    // sometimes.
  } else if (layout == Layout.FLEX_ITEM) {
    // Set height and width to a flex item if they exist.
    // The size set to a flex item could be overridden by `display: flex` later.
    if (width) {
      (0, _style.setStyle)(element, 'width', width);
    }
    if (height) {
      (0, _style.setStyle)(element, 'height', height);
    }
  } else if (layout == Layout.FLUID) {
    element.classList.add('i-amphtml-layout-awaiting-size');
    if (width) {
      (0, _style.setStyle)(element, 'width', width);
    }
    (0, _style.setStyle)(element, 'height', 0);
  }
  return layout;
}

/**
 * @param {!Element} element
 */
function applyNoDisplayLayout(element) {
  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed
  // everywhere, switch all relevant elements to this API. In the meantime,
  // simply unblock display toggling via `style="display: ..."`.
  (0, _style.setStyle)(element, 'display', 'none');
  element.classList.add('i-amphtml-display');
}

},{"./log":45,"./static-template":107,"./string":108,"./style":110,"./types":113}],44:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['<div class="i-amphtml-loader-line">\n          <div class="i-amphtml-loader-moving-line"></div>\n        </div>'], ['<div class="i-amphtml-loader-line">\n          <div class="i-amphtml-loader-moving-line"></div>\n        </div>']),
    _templateObject2 = _taggedTemplateLiteral(['<div class="i-amphtml-loader">\n        <div class="i-amphtml-loader-dot"></div>\n        <div class="i-amphtml-loader-dot"></div>\n        <div class="i-amphtml-loader-dot"></div>\n      </div>'], ['<div class="i-amphtml-loader">\n        <div class="i-amphtml-loader-dot"></div>\n        <div class="i-amphtml-loader-dot"></div>\n        <div class="i-amphtml-loader-dot"></div>\n      </div>']);

exports.createLoaderElement = createLoaderElement;

var _staticTemplate = require('./static-template');

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /**
                                                                                                                                                   * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                   *
                                                                                                                                                   * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                   * you may not use this file except in compliance with the License.
                                                                                                                                                   * You may obtain a copy of the License at
                                                                                                                                                   *
                                                                                                                                                   *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                   *
                                                                                                                                                   * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                   * distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                   * See the License for the specific language governing permissions and
                                                                                                                                                   * limitations under the License.
                                                                                                                                                   */

/** @private @const */
var LINE_LOADER_ELEMENTS = {
  'AMP-AD': true
};

/**
 * Creates a default "loading indicator" element. This element accepts
 * `amp-active` class in which case it may choose to run an animation.
 * @param {!Document} doc
 * @param {string} elementName
 * @return {!Element}
 */
function createLoaderElement(doc, elementName) {
  if (LINE_LOADER_ELEMENTS[elementName.toUpperCase()]) {
    return (0, _staticTemplate.htmlFor)(doc)(_templateObject);
  }
  return (0, _staticTemplate.htmlFor)(doc)(_templateObject2);
}

},{"./static-template":107}],45:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Log = exports.LogLevel = exports.USER_ERROR_EMBED_SENTINEL = exports.USER_ERROR_SENTINEL = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.


exports.isUserErrorMessage = isUserErrorMessage;
exports.isUserErrorEmbed = isUserErrorEmbed;
exports.setReportError = setReportError;
exports.overrideLogLevel = overrideLogLevel;
exports.duplicateErrorIfNecessary = duplicateErrorIfNecessary;
exports.createErrorVargs = createErrorVargs;
exports.rethrowAsync = rethrowAsync;
exports.initLogConstructor = initLogConstructor;
exports.resetLogConstructorForTesting = resetLogConstructorForTesting;
exports.user = user;
exports.dev = dev;
exports.isFromEmbed = isFromEmbed;

var _mode = require('./mode');

var _modeObject = require('./mode-object');

var _types = require('./types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Triple zero width space.
 *
 * This is added to user error messages, so that we can later identify
 * them, when the only thing that we have is the message. This is the
 * case in many browsers when the global exception handler is invoked.
 *
 * @const {string}
 */
var USER_ERROR_SENTINEL = exports.USER_ERROR_SENTINEL = '\u200B\u200B\u200B';

/**
 * Four zero width space.
 *
 * @const {string}
 */
var USER_ERROR_EMBED_SENTINEL = exports.USER_ERROR_EMBED_SENTINEL = '\u200B\u200B\u200B\u200B';

/**
 * @param {string} message
 * @return {boolean} Whether this message was a user error.
 */
function isUserErrorMessage(message) {
  return message.indexOf(USER_ERROR_SENTINEL) >= 0;
}

/**
 * @param {string} message
 * @return {boolean} Whether this message was a a user error from an iframe embed.
 */
function isUserErrorEmbed(message) {
  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;
}

/**
 * @enum {number}
 * @private Visible for testing only.
 */
var LogLevel = exports.LogLevel = {
  OFF: 0,
  ERROR: 1,
  WARN: 2,
  INFO: 3,
  FINE: 4
};

/**
 * Sets reportError function. Called from error.js to break cyclic
 * dependency.
 * @param {function(*, !Element=)|undefined} fn
 */
function setReportError(fn) {
  self.reportError = fn;
}

/**
 * @type {!LogLevel|undefined}
 * @private
 */
var levelOverride_ = undefined;

/**
 * @param {!LogLevel} level
 */
function overrideLogLevel(level) {
  levelOverride_ = level;
}

/**
 * Logging class. Use of sentinel string instead of a boolean to check user/dev
 * errors because errors could be rethrown by some native code as a new error,
 * and only a message would survive. Also, some browser donâ€™t support a 5th
 * error object argument in window.onerror. List of supporting browser can be
 * found here:
 * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html
 * @final
 * @private Visible for testing only.
 */

var Log = exports.Log = function () {
  /**
   * opt_suffix will be appended to error message to identify the type of the
   * error message. We can't rely on the error object to pass along the type
   * because some browsers do not have this param in its window.onerror API.
   * See:
   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html
   *
   * @param {!Window} win
   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc
   * @param {string=} opt_suffix
   */
  function Log(win, levelFunc, opt_suffix) {
    _classCallCheck(this, Log);

    /**
     * In tests we use the main test window instead of the iframe where
     * the tests runs because only the former is relayed to the console.
     * @const {!Window}
     */
    this.win = (0, _mode.getMode)().test && win.AMP_TEST_IFRAME ? win.parent : win;

    /** @private @const {function(!./mode.ModeDef):!LogLevel} */
    this.levelFunc_ = levelFunc;

    /** @private @const {!LogLevel} */
    this.level_ = this.defaultLevel_();

    /** @private @const {string} */
    this.suffix_ = opt_suffix || '';
  }

  /**
   * @return {!LogLevel}
   * @private
   */


  _createClass(Log, [{
    key: 'getLevel_',
    value: function getLevel_() {
      return levelOverride_ !== undefined ? levelOverride_ : this.level_;
    }

    /**
     * @return {!LogLevel}
     * @private
     */

  }, {
    key: 'defaultLevel_',
    value: function defaultLevel_() {
      // No console - can't enable logging.
      if (!this.win.console || !this.win.console.log) {
        return LogLevel.OFF;
      }

      // Logging has been explicitly disabled.
      if ((0, _mode.getMode)().log == '0') {
        return LogLevel.OFF;
      }

      // Logging is enabled for tests directly.
      if ((0, _mode.getMode)().test && this.win.ENABLE_LOG) {
        return LogLevel.FINE;
      }

      // LocalDev by default allows INFO level, unless overriden by `#log`.
      if ((0, _mode.getMode)().localDev && !(0, _mode.getMode)().log) {
        return LogLevel.INFO;
      }

      // Delegate to the specific resolver.
      return this.levelFunc_((0, _modeObject.getModeObject)());
    }

    /**
     * @param {string} tag
     * @param {string} level
     * @param {!Array} messages
     */

  }, {
    key: 'msg_',
    value: function msg_(tag, level, messages) {
      if (this.getLevel_() != LogLevel.OFF) {
        var fn = this.win.console.log;
        if (level == 'ERROR') {
          fn = this.win.console.error || fn;
        } else if (level == 'INFO') {
          fn = this.win.console.info || fn;
        } else if (level == 'WARN') {
          fn = this.win.console.warn || fn;
        }
        if ((0, _mode.getMode)().localDev) {
          messages.unshift('[' + tag + ']');
        }
        fn.apply(this.win.console, messages);
      }
    }

    /**
     * Whether the logging is enabled.
     * @return {boolean}
     */

  }, {
    key: 'isEnabled',
    value: function isEnabled() {
      return this.getLevel_() != LogLevel.OFF;
    }

    /**
     * Reports a fine-grained message.
     * @param {string} tag
     * @param {...*} var_args
     */

  }, {
    key: 'fine',
    value: function fine(tag, var_args) {
      if (this.getLevel_() >= LogLevel.FINE) {
        this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));
      }
    }

    /**
     * Reports a informational message.
     * @param {string} tag
     * @param {...*} var_args
     */

  }, {
    key: 'info',
    value: function info(tag, var_args) {
      if (this.getLevel_() >= LogLevel.INFO) {
        this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));
      }
    }

    /**
     * Reports a warning message.
     * @param {string} tag
     * @param {...*} var_args
     */

  }, {
    key: 'warn',
    value: function warn(tag, var_args) {
      if (this.getLevel_() >= LogLevel.WARN) {
        this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));
      }
    }

    /**
     * Reports an error message. If the logging is disabled, the error is rethrown
     * asynchronously.
     * @param {string} tag
     * @param {...*} var_args
     * @return {!Error|undefined}
     * @private
     */

  }, {
    key: 'error_',
    value: function error_(tag, var_args) {
      if (this.getLevel_() >= LogLevel.ERROR) {
        this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));
      } else {
        var error = createErrorVargs.apply(null, Array.prototype.slice.call(arguments, 1));
        this.prepareError_(error);
        return error;
      }
    }

    /**
     * Reports an error message.
     * @param {string} tag
     * @param {...*} var_args
     */

  }, {
    key: 'error',
    value: function error(tag, var_args) {
      var error = this.error_.apply(this, arguments);
      if (error) {
        error.name = tag || error.name;
        // reportError is installed globally per window in the entry point.
        self.reportError(error);
      }
    }

    /**
     * Reports an error message and marks with an expected property. If the
     * logging is disabled, the error is rethrown asynchronously.
     * @param {string} unusedTag
     * @param {...*} var_args
     */

  }, {
    key: 'expectedError',
    value: function expectedError(unusedTag, var_args) {
      var error = this.error_.apply(this, arguments);
      if (error) {
        error.expected = true;
        // reportError is installed globally per window in the entry point.
        self.reportError(error);
      }
    }

    /**
     * Creates an error object.
     * @param {...*} var_args
     * @return {!Error}
     */

  }, {
    key: 'createError',
    value: function createError(var_args) {
      var error = createErrorVargs.apply(null, arguments);
      this.prepareError_(error);
      return error;
    }

    /**
     * Creates an error object with its expected property set to true.
     * @param {...*} var_args
     * @return {!Error}
     */

  }, {
    key: 'createExpectedError',
    value: function createExpectedError(var_args) {
      var error = createErrorVargs.apply(null, arguments);
      this.prepareError_(error);
      error.expected = true;
      return error;
    }

    /**
     * Throws an error if the first argument isn't trueish.
     *
     * Supports argument substitution into the message via %s placeholders.
     *
     * Throws an error object that has two extra properties:
     * - associatedElement: This is the first element provided in the var args.
     *   It can be used for improved display of error messages.
     * - messageArray: The elements of the substituted message as non-stringified
     *   elements in an array. When e.g. passed to console.error this yields
     *   native displays of things like HTML elements.
     *
     * @param {T} shouldBeTrueish The value to assert. The assert fails if it does
     *     not evaluate to true.
     * @param {string=} opt_message The assertion message
     * @param {...*} var_args Arguments substituted into %s in the message.
     * @return {T} The value of shouldBeTrueish.
     * @template T
     * eslint "google-camelcase/google-camelcase": 0
     */

  }, {
    key: 'assert',
    value: function assert(shouldBeTrueish, opt_message, var_args) {
      var firstElement = void 0;
      if (!shouldBeTrueish) {
        var message = opt_message || 'Assertion failed';
        var splitMessage = message.split('%s');
        var first = splitMessage.shift();
        var formatted = first;
        var messageArray = [];
        pushIfNonEmpty(messageArray, first);
        for (var i = 2; i < arguments.length; i++) {
          var val = arguments[i];
          if (val && val.tagName) {
            firstElement = val;
          }
          var nextConstant = splitMessage.shift();
          messageArray.push(val);
          pushIfNonEmpty(messageArray, nextConstant.trim());
          formatted += toString(val) + nextConstant;
        }
        var e = new Error(formatted);
        e.fromAssert = true;
        e.associatedElement = firstElement;
        e.messageArray = messageArray;
        this.prepareError_(e);
        // reportError is installed globally per window in the entry point.
        self.reportError(e);
        throw e;
      }
      return shouldBeTrueish;
    }

    /**
     * Throws an error if the first argument isn't an Element
     *
     * Otherwise see `assert` for usage
     *
     * @param {*} shouldBeElement
     * @param {string=} opt_message The assertion message
     * @return {!Element} The value of shouldBeTrueish.
     * @template T
     * eslint "google-camelcase/google-camelcase": 2
     */

  }, {
    key: 'assertElement',
    value: function assertElement(shouldBeElement, opt_message) {
      var shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;
      this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s', shouldBeElement);
      return (/** @type {!Element} */shouldBeElement
      );
    }

    /**
     * Throws an error if the first argument isn't a string. The string can
     * be empty.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeString
     * @param {string=} opt_message The assertion message
     * @return {string} The string value. Can be an empty string.
     * eslint "google-camelcase/google-camelcase": 2
     */

  }, {
    key: 'assertString',
    value: function assertString(shouldBeString, opt_message) {
      this.assert(typeof shouldBeString == 'string', (opt_message || 'String expected') + ': %s', shouldBeString);
      return (/** @type {string} */shouldBeString
      );
    }

    /**
     * Throws an error if the first argument isn't a number. The allowed values
     * include `0` and `NaN`.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeNumber
     * @param {string=} opt_message The assertion message
     * @return {number} The number value. The allowed values include `0`
     *   and `NaN`.
     */

  }, {
    key: 'assertNumber',
    value: function assertNumber(shouldBeNumber, opt_message) {
      this.assert(typeof shouldBeNumber == 'number', (opt_message || 'Number expected') + ': %s', shouldBeNumber);
      return (/** @type {number} */shouldBeNumber
      );
    }

    /**
     * Throws an error if the first argument isn't a boolean.
     *
     * For more details see `assert`.
     *
     * @param {*} shouldBeBoolean
     * @param {string=} opt_message The assertion message
     * @return {boolean} The boolean value.
     */

  }, {
    key: 'assertBoolean',
    value: function assertBoolean(shouldBeBoolean, opt_message) {
      this.assert(!!shouldBeBoolean === shouldBeBoolean, (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);
      return (/** @type {boolean} */shouldBeBoolean
      );
    }

    /**
     * Asserts and returns the enum value. If the enum doesn't contain such a
     * value, the error is thrown.
     *
     * @param {!Object<T>} enumObj
     * @param {string} s
     * @param {string=} opt_enumName
     * @return {T}
     * @template T
     * eslint "google-camelcase/google-camelcase": 2
     */

  }, {
    key: 'assertEnumValue',
    value: function assertEnumValue(enumObj, s, opt_enumName) {
      if ((0, _types.isEnumValue)(enumObj, s)) {
        return s;
      }
      this.assert(false, 'Unknown %s value: "%s"', opt_enumName || 'enum', s);
    }

    /**
     * @param {!Error} error
     * @private
     */

  }, {
    key: 'prepareError_',
    value: function prepareError_(error) {
      error = duplicateErrorIfNecessary(error);
      if (this.suffix_) {
        if (!error.message) {
          error.message = this.suffix_;
        } else if (error.message.indexOf(this.suffix_) == -1) {
          error.message += this.suffix_;
        }
      } else if (isUserErrorMessage(error.message)) {
        error.message = error.message.replace(USER_ERROR_SENTINEL, '');
      }
    }
  }]);

  return Log;
}();

/**
 * @param {string|!Element} val
 * @return {string}
 */


function toString(val) {
  // Do check equivalent to `val instanceof Element` without cross-window bug
  if (val && val.nodeType == 1) {
    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');
  }
  return (/** @type {string} */val
  );
}

/**
 * @param {!Array} array
 * @param {*} val
 */
function pushIfNonEmpty(array, val) {
  if (val != '') {
    array.push(val);
  }
}

/**
 * Some exceptions (DOMException, namely) have read-only message.
 * @param {!Error} error
 * @return {!Error};
 */
function duplicateErrorIfNecessary(error) {
  var message = error.message;

  var test = String(Math.random());
  error.message = test;

  if (error.message === test) {
    error.message = message;
    return error;
  }

  var e = new Error(error.message);
  // Copy all the extraneous things we attach.
  for (var prop in error) {
    e[prop] = error[prop];
  }
  // Ensure these are copied.
  e.stack = error.stack;
  return e;
}

/**
 * @param {...*} var_args
 * @return {!Error}
 * @visibleForTesting
 */
function createErrorVargs(var_args) {
  var error = null;
  var message = '';
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (arg instanceof Error && !error) {
      error = duplicateErrorIfNecessary(arg);
    } else {
      if (message) {
        message += ' ';
      }
      message += arg;
    }
  }

  if (!error) {
    error = new Error(message);
  } else if (message) {
    error.message = message + ': ' + error.message;
  }
  return error;
}

/**
 * Rethrows the error without terminating the current context. This preserves
 * whether the original error designation is a user error or a dev error.
 * @param {...*} var_args
 */
function rethrowAsync(var_args) {
  var error = createErrorVargs.apply(null, arguments);
  setTimeout(function () {
    // reportError is installed globally per window in the entry point.
    self.reportError(error);
    throw error;
  });
}

/**
 * Cache for logs. We do not use a Service since the service module depends
 * on Log and closure literally can't even.
 * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}
 */
self.log = self.log || {
  user: null,
  dev: null,
  userForEmbed: null
};

var logs = self.log;

/**
 * Eventually holds a constructor for Log objects. Lazily initialized, so we
 * can avoid ever referencing the real constructor except in JS binaries
 * that actually want to include the implementation.
 * @type {?Function}
 */
var logConstructor = null;

/**
 * Initializes log contructor.
 */
function initLogConstructor() {
  logConstructor = Log;
  // Initialize instances for use. If a binary (an extension for example) that
  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than
  // the binary that does call `initLogConstructor` (amp.js), the extension will
  // throw an error as that extension will never be able to initialize the log
  // instances and we also don't want it to call `initLogConstructor` either
  // (since that will cause the Log implementation to be bundled into that
  // binary). So we must initialize the instances eagerly so that they are ready
  // for use (stored globally) after the main binary calls `initLogConstructor`.
  dev();
  user();
}

/**
 * Resets log contructor for testing.
 */
function resetLogConstructorForTesting() {
  logConstructor = null;
}

/**
 * Publisher level log.
 *
 * Enabled in the following conditions:
 *  1. Not disabled using `#log=0`.
 *  2. Development mode is enabled via `#development=1` or logging is explicitly
 *     enabled via `#log=D` where D >= 1.
 *  3. AMP.setLogLevel(D) is called, where D >= 1.
 *
 * @param {!Element=} opt_element
 * @return {!Log}
 */
function user(opt_element) {
  if (!logs.user) {
    logs.user = getUserLogger(USER_ERROR_SENTINEL);
  }
  if (!isFromEmbed(logs.user.win, opt_element)) {
    return logs.user;
  } else {
    if (logs.userForEmbed) {
      return logs.userForEmbed;
    }
    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);
  }
}

/**
 * Getter for user logger
 * @param {string=} suffix
 * @return {!Log}
 */
function getUserLogger(suffix) {
  if (!logConstructor) {
    throw new Error('failed to call initLogConstructor');
  }
  return new logConstructor(self, function (mode) {
    var logNum = parseInt(mode.log, 10);
    if (mode.development || logNum >= 1) {
      return LogLevel.FINE;
    }
    return LogLevel.WARN;
  }, suffix);
}

/**
 * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped
 * in the PROD binary. However, `devLog().assert` result is preserved in either
 * case.
 *
 * Enabled in the following conditions:
 *  1. Not disabled using `#log=0`.
 *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.
 *  3. AMP.setLogLevel(D) is called, where D >= 2.
 *
 * @return {!Log}
 */
function dev() {
  if (logs.dev) {
    return logs.dev;
  }
  if (!logConstructor) {
    throw new Error('failed to call initLogConstructor');
  }
  return logs.dev = new logConstructor(self, function (mode) {
    var logNum = parseInt(mode.log, 10);
    if (logNum >= 3) {
      return LogLevel.FINE;
    }
    if (logNum >= 2) {
      return LogLevel.INFO;
    }
    return LogLevel.OFF;
  });
}

/**
 * @param {!Window} win
 * @param {!Element=} opt_element
 * @return {boolean} isEmbed
 */
function isFromEmbed(win, opt_element) {
  if (!opt_element) {
    return false;
  }
  return opt_element.ownerDocument.defaultView != win;
}

},{"./mode":47,"./mode-object":46,"./types":113}],46:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getModeObject = getModeObject;

var _mode = require('./mode');

/**
 * Provides info about the current app. This return value may be cached and
 * passed around as it will always be DCE'd.
 * @param {?Window=} opt_win
 * @return {!./mode.ModeDef}
 */
function getModeObject(opt_win) {
  return {
    localDev: (0, _mode.getMode)(opt_win).localDev,
    development: (0, _mode.getMode)(opt_win).development,
    filter: (0, _mode.getMode)(opt_win).filter,
    minified: (0, _mode.getMode)(opt_win).minified,
    lite: (0, _mode.getMode)(opt_win).lite,
    test: (0, _mode.getMode)(opt_win).test,
    log: (0, _mode.getMode)(opt_win).log,
    version: (0, _mode.getMode)(opt_win).version,
    rtvVersion: (0, _mode.getMode)(opt_win).rtvVersion
  };
} /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

},{"./mode":47}],47:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModeDef = undefined;
exports.getMode = getMode;
exports.getRtvVersionForTesting = getRtvVersionForTesting;
exports.resetRtvVersionForTesting = resetRtvVersionForTesting;

var _urlParseQueryString = require('./url-parse-query-string');

/**
 * @typedef {{
 *   localDev: boolean,
 *   development: boolean,
 *   filter: (string|undefined),
 *   minified: boolean,
 *   lite: boolean,
 *   test: boolean,
 *   log: (string|undefined),
 *   version: string,
 *   rtvVersion: string,
 * }}
 */
var ModeDef = exports.ModeDef = void 0;

/** @type {string} */
/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var version = '1535016172047';

/**
 * `rtvVersion` is the prefixed version we serve off of the cdn.
 * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).
 * @type {string}
 */
var rtvVersion = '';

/**
 * Provides info about the current app.
 * @param {?Window=} opt_win
 * @return {!ModeDef}
 */
function getMode(opt_win) {
  var win = opt_win || self;
  if (win.AMP_MODE) {
    return win.AMP_MODE;
  }
  return win.AMP_MODE = getMode_(win);
}

/**
 * Provides info about the current app.
 * @param {!Window} win
 * @return {!ModeDef}
 */
function getMode_(win) {
  // Magic constants that are replaced by closure compiler.
  // IS_MINIFIED is always replaced with true when closure compiler is used
  // while IS_DEV is only replaced when `gulp dist` is called without the
  // --fortesting flag.
  var IS_DEV = true;
  var IS_MINIFIED = false;

  var localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);
  var runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);
  var isLocalDev = IS_DEV && (localDevEnabled || runningTests);
  var hashQuery = (0, _urlParseQueryString.parseQueryString_)(
  // location.originalHash is set by the viewer when it removes the fragment
  // from the URL.
  win.location.originalHash || win.location.hash);

  var searchQuery = (0, _urlParseQueryString.parseQueryString_)(win.location.search);

  if (!rtvVersion) {
    rtvVersion = getRtvVersion(win, isLocalDev);
  }

  // The `minified`, `test` and `localDev` properties are replaced
  // as boolean literals when we run `gulp dist` without the `--fortesting`
  // flags. This improved DCE on the production file we deploy as the code
  // paths for localhost/testing/development are eliminated.
  return {
    localDev: isLocalDev,
    // Triggers validation or enable pub level logging. Validation can be
    // bypassed via #validate=0.
    // Note that AMP_DEV_MODE flag is used for testing purposes.
    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),
    examiner: hashQuery['development'] == '2',
    // Allows filtering validation errors by error category. For the
    // available categories, see ErrorCategory in validator/validator.proto.
    filter: hashQuery['filter'],
    // amp-geo override
    geoOverride: hashQuery['amp-geo'],
    minified: IS_MINIFIED,
    // Whether document is in an amp-lite viewer. It signal that the user
    // would prefer to use less bandwidth.
    lite: searchQuery['amp_lite'] != undefined,
    test: runningTests,
    log: hashQuery['log'],
    version: version,
    rtvVersion: rtvVersion
  };
}

/**
 * Retrieve the `rtvVersion` which will have a numeric prefix
 * denoting canary/prod/experiment (unless `isLocalDev` is true).
 *
 * @param {!Window} win
 * @param {boolean} isLocalDev
 * @return {string}
 */
function getRtvVersion(win, isLocalDev) {
  // If it's local dev then we won't actually have a full version so
  // just use the version.
  if (isLocalDev) {
    return version;
  }

  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {
    return win.AMP_CONFIG.v;
  }

  // Currently `1535016172047` and thus `mode.version` contain only
  // major version. The full version however must also carry the minor version.
  // We will default to production default `01` minor version for now.
  // TODO(erwinmombay): decide whether 1535016172047 should contain
  // minor version.
  return '01' + version;
}

/**
 * @param {!Window} win
 * @param {boolean} isLocalDev
 * @return {string}
 * @visibleForTesting
 */
function getRtvVersionForTesting(win, isLocalDev) {
  return getRtvVersion(win, isLocalDev);
}

/** @visibleForTesting */
function resetRtvVersionForTesting() {
  rtvVersion = '';
}

},{"./url-parse-query-string":114}],48:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class helps to manage observers. Observers can be added, removed or
 * fired through and instance of this class.
 * @template TYPE
 */
var Observable = exports.Observable = function () {

  /**
   * Creates an instance of Observable.
   */
  function Observable() {
    _classCallCheck(this, Observable);

    /** @type {?Array<function(TYPE)>} */
    this.handlers_ = null;
  }

  /**
   * Adds the observer to this instance.
   * @param {function(TYPE)} handler Observer's handler.
   * @return {!UnlistenDef}
   */


  _createClass(Observable, [{
    key: "add",
    value: function add(handler) {
      var _this = this;

      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
      return function () {
        _this.remove(handler);
      };
    }

    /**
     * Removes the observer from this instance.
     * @param {function(TYPE)} handler Observer's instance.
     */

  }, {
    key: "remove",
    value: function remove(handler) {
      if (!this.handlers_) {
        return;
      }
      var index = this.handlers_.indexOf(handler);
      if (index > -1) {
        this.handlers_.splice(index, 1);
      }
    }

    /**
     * Removes all observers.
     */

  }, {
    key: "removeAll",
    value: function removeAll() {
      if (!this.handlers_) {
        return;
      }
      this.handlers_.length = 0;
    }

    /**
     * Fires an event. All observers are called.
     * @param {TYPE=} opt_event
     */

  }, {
    key: "fire",
    value: function fire(opt_event) {
      if (!this.handlers_) {
        return;
      }
      var handlers = this.handlers_;
      for (var i = 0; i < handlers.length; i++) {
        var handler = handlers[i];
        handler(opt_event);
      }
    }

    /**
     * Returns number of handlers. Mostly needed for tests.
     * @return {number}
     */

  }, {
    key: "getHandlerCount",
    value: function getHandlerCount() {
      if (!this.handlers_) {
        return 0;
      }
      return this.handlers_.length;
    }
  }]);

  return Observable;
}();

},{}],49:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pass = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _services = require('./services');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Pass class helps to manage single-pass process. A pass is scheduled using
 * delay method. Only one pass can be pending at a time. If no pass is pending
 * the process is considered to be "idle".
 */
var Pass = exports.Pass = function () {

  /**
   * Creates a new Pass instance.
   * @param {!Window} win
   * @param {function()} handler Handler to be executed when pass is triggered.
   * @param {number=} opt_defaultDelay Default delay to be used when schedule
   *   is called without one.
   */
  function Pass(win, handler, opt_defaultDelay) {
    var _this = this;

    _classCallCheck(this, Pass);

    this.timer_ = _services.Services.timerFor(win);

    /** @private @const {function()} */
    this.handler_ = handler;

    /** @private @const {number} */
    this.defaultDelay_ = opt_defaultDelay || 0;

    /** @private {number|string} */
    this.scheduled_ = -1;

    /** @private {number} */
    this.nextTime_ = 0;

    /** @private {boolean} */
    this.running_ = false;

    /** @private @const {!Function} */
    this.boundPass_ = function () {
      return _this.pass_();
    };
  }

  /**
   * Whether or not a pass is currently pending.
   * @return {boolean}
   */


  _createClass(Pass, [{
    key: 'isPending',
    value: function isPending() {
      return this.scheduled_ != -1;
    }

    /**
     * Tries to schedule a new pass optionally with specified delay. If the new
     * requested pass is requested before the pending pass, the pending pass is
     * canceled. If the new pass is requested after the pending pass, the newly
     * requested pass is ignored.
     *
     * Returns {@code true} if the pass has been scheduled and {@code false} if
     * ignored.
     *
     * @param {number=} opt_delay Delay to schedule the pass. If not specified
     *   the default delay is used, falling back to 0.
     * @return {boolean}
     */

  }, {
    key: 'schedule',
    value: function schedule(opt_delay) {
      var delay = opt_delay || this.defaultDelay_;
      if (this.running_ && delay < 10) {
        // If we get called recursively, wait at least 10ms for the next
        // execution.
        delay = 10;
      }

      var nextTime = Date.now() + delay;
      // Schedule anew if nothing is scheduled currently or if the new time is
      // sooner then previously requested.
      if (!this.isPending() || nextTime - this.nextTime_ < -10) {
        this.cancel();
        this.nextTime_ = nextTime;
        this.scheduled_ = this.timer_.delay(this.boundPass_, delay);

        return true;
      }

      return false;
    }

    /**
     *
     */

  }, {
    key: 'pass_',
    value: function pass_() {
      this.scheduled_ = -1;
      this.nextTime_ = 0;
      this.running_ = true;
      this.handler_();
      this.running_ = false;
    }

    /**
     * Cancels the pending pass if any.
     */

  }, {
    key: 'cancel',
    value: function cancel() {
      if (this.isPending()) {
        this.timer_.cancel(this.scheduled_);
        this.scheduled_ = -1;
      }
    }
  }]);

  return Pass;
}();

},{"./services":104}],50:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPixel = createPixel;

var _dom = require('../src/dom');

var _object = require('../src/utils/object');

var _log = require('../src/log');

/** @const {string} */
var TAG = 'pixel';

/**
 * @param {!Window} win
 * @param {string} src
 * @param {?string=} referrerPolicy
 * @return {!Element}
 */
/**
 * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createPixel(win, src, referrerPolicy) {
  if (referrerPolicy && referrerPolicy !== 'no-referrer') {
    (0, _log.user)().error(TAG, 'Unsupported referrerPolicy: ' + referrerPolicy);
  }

  return referrerPolicy === 'no-referrer' ? createNoReferrerPixel(win, src) : createImagePixel(win, src);
}

/**
 * @param {!Window} win
 * @param {string} src
 * @return {!Element}
 */
function createNoReferrerPixel(win, src) {
  if (isReferrerPolicySupported()) {
    return createImagePixel(win, src, true);
  } else {
    // if "referrerPolicy" is not supported, use iframe wrapper
    // to scrub the referrer.
    var iframe = (0, _dom.createElementWithAttributes)(
    /** @type {!Document} */win.document, 'iframe', (0, _object.dict)({
      'src': 'about:blank',
      'style': 'display:none'
    }));
    win.document.body.appendChild(iframe);
    createImagePixel(iframe.contentWindow, src);
    return iframe;
  }
}

/**
 * @param {!Window} win
 * @param {string} src
 * @param {boolean=} noReferrer
 * @return {!Image}
 */
function createImagePixel(win, src) {
  var noReferrer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var image = new win.Image();
  if (noReferrer) {
    image.referrerPolicy = 'no-referrer';
  }
  image.src = src;
  return image;
}

/**
 * Check if element attribute "referrerPolicy" is supported by the browser.
 * Safari 11.1 does not support it yet.
 *
 * @return {boolean}
 */
function isReferrerPolicySupported() {
  return 'referrerPolicy' in Image.prototype;
}

},{"../src/dom":22,"../src/log":45,"../src/utils/object":123}],51:[function(require,module,exports){
var _mode = require('./mode');

var _arrayIncludes = require('./polyfills/array-includes');

var _customElements = require('./polyfills/custom-elements');

var _domtokenlistToggle = require('./polyfills/domtokenlist-toggle');

var _documentContains = require('./polyfills/document-contains');

var _mathSign = require('./polyfills/math-sign');

var _objectAssign = require('./polyfills/object-assign');

var _promise = require('./polyfills/promise');

var _documentRegisterElement = require('document-register-element/build/document-register-element.patched');

var _experiments = require('./experiments');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright 2015 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                           *
                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                           * you may not use this file except in compliance with the License.
                                                                                                                                                           * You may obtain a copy of the License at
                                                                                                                                                           *
                                                                                                                                                           *      http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                           *
                                                                                                                                                           * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                           * distributed under the License is distributed on an "AS-IS" BASIS,
                                                                                                                                                           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                           * See the License for the specific language governing permissions and
                                                                                                                                                           * limitations under the License.
                                                                                                                                                           */

(0, _domtokenlistToggle.install)(self);
(0, _mathSign.install)(self);
(0, _objectAssign.install)(self);
(0, _promise.install)(self);
(0, _documentContains.install)(self);
(0, _arrayIncludes.install)(self);
// isExperimentOn() must be called after Object.assign polyfill is installed.
if ((0, _experiments.isExperimentOn)(self, 'custom-elements-v1') || (0, _mode.getMode)().test) {
  (0, _customElements.install)(self, function () {
    function _class() {
      _classCallCheck(this, _class);
    }

    return _class;
  }());
} else {
  (0, _documentRegisterElement.installCustomElements)(self, 'auto');
}

},{"./experiments":28,"./mode":47,"./polyfills/array-includes":52,"./polyfills/custom-elements":53,"./polyfills/document-contains":54,"./polyfills/domtokenlist-toggle":55,"./polyfills/math-sign":56,"./polyfills/object-assign":57,"./polyfills/promise":58,"document-register-element/build/document-register-element.patched":5}],52:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the element is in the array and false otherwise.
 *
 * @param {*} value
 * @param {number=} opt_fromIndex
 * @return {boolean}
 * @this {Array}
 */
function includes(value, opt_fromIndex) {
  var fromIndex = opt_fromIndex || 0;
  var len = this.length;
  var i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);
  for (; i < len; i++) {
    var other = this[i];
    // If value has been found OR (value is NaN AND other is NaN)
    /*eslint "no-self-compare": 0*/
    if (other === value || value !== value && other !== other) {
      return true;
    }
  }
  return false;
}

/**
* Sets the Array.contains polyfill if it does not exist.
* @param {!Window} win
*/
function install(win) {
  if (!win.Array.prototype.includes) {
    win.Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: includes
    });
  }
}

},{}],53:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.install = install;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   promise: !Promise<undefined>,
 *   resolve: function(),
 * }}
 */
var DeferredDef = void 0;

/**
 * @typedef {!Function}
 */
var CustomElementConstructorDef = void 0;

/**
 * @typedef {{
 *  name: string,
 *  ctor: !CustomElementConstructorDef,
 * }}
 */
var CustomElementDef = void 0;

/**
 * Validates the custom element's name.
 * This intentionally ignores "valid" higher Unicode Code Points.
 * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
 */
var VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;
var INVALID_NAMES = ['annotation-xml', 'color-profile', 'font-face', 'font-face-src', 'font-face-uri', 'font-face-format', 'font-face-name', 'missing-glyph'];

/**
 * Asserts that the custom element name conforms to the spec.
 *
 * @param {!Function} SyntaxError
 * @param {string} name
 */
function assertValidName(SyntaxError, name) {
  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {
    throw new SyntaxError('invalid custom element name "' + name + '"');
  }
}

/**
 * Does win have a full Custom Elements registry?
 *
 * @param {!Window} win
 * @return {boolean}
 */
function hasCustomElements(win) {
  var customElements = win.customElements;


  return !!(customElements && customElements.define && customElements.get && customElements.whenDefined);
}

/**
 * Was HTMLElement already patched for this window?
 *
 * @param {!Window} win
 * @return {boolean}
 */
function isPatched(win) {
  var tag = win.HTMLElement.toString();
  return tag.indexOf('[native code]') === -1;
}

/**
 * The public Custom Elements API.
 */

var CustomElementRegistry = function () {
  /**
   * @param {!Window} win
   * @param {!Registry} registry
   */
  function CustomElementRegistry(win, registry) {
    _classCallCheck(this, CustomElementRegistry);

    /**
     * @const @private
     */
    this.win_ = win;

    /**
     * @const @private
     */
    this.registry_ = registry;

    /**
     * @type {!Object<string, DeferredDef>}
     * @private
     * @const
     */
    this.pendingDefines_ = this.win_.Object.create(null);
  }

  /**
   * Register the custom element.
   *
   * @param {string} name
   * @param {!CustomElementConstructorDef} ctor
   * @param {!Object=} options
   */


  _createClass(CustomElementRegistry, [{
    key: 'define',
    value: function define(name, ctor, options) {
      this.registry_.define(name, ctor, options);

      // If anyone is waiting for this custom element to be defined, resolve
      // their promise.
      var pending = this.pendingDefines_;
      var deferred = pending[name];
      if (deferred) {
        deferred.resolve();
        delete pending[name];
      }
    }

    /**
     * Get the constructor of the (already defined) custom element.
     *
     * @param {string} name
     * @return {!CustomElementConstructorDef|undefined}
     */

  }, {
    key: 'get',
    value: function get(name) {
      var def = this.registry_.getByName(name);
      if (def) {
        return def.ctor;
      }
    }

    /**
     * Returns a promise that waits until the custom element is defined.
     * If the custom element is already defined, returns a resolved promise.
     *
     * @param {string} name
     * @return {!Promise<undefined>}
     */

  }, {
    key: 'whenDefined',
    value: function whenDefined(name) {
      var _win_ = this.win_,
          Promise = _win_.Promise,
          SyntaxError = _win_.SyntaxError;

      assertValidName(SyntaxError, name);

      if (this.registry_.getByName(name)) {
        return Promise.resolve();
      }

      var pending = this.pendingDefines_;
      var deferred = pending[name];
      if (deferred) {
        return deferred.promise;
      }

      var resolve = void 0;
      var promise = new /*OK*/Promise(function (res) {
        return resolve = res;
      });
      pending[name] = {
        promise: promise,
        resolve: resolve
      };

      return promise;
    }

    /**
     * Upgrade all custom elements inside root.
     *
     * @param {!Node} root
     */

  }, {
    key: 'upgrade',
    value: function upgrade(root) {
      this.registry_.upgrade(root);
    }
  }]);

  return CustomElementRegistry;
}();

/**
 * This internal APIs necessary to run the CustomElementRegistry.
 * Since Registry is never exposed externally, all methods are actually
 * available on the instance.
 */


var Registry = function () {
  /**
   * @param {!Window} win
   */
  function Registry(win) {
    _classCallCheck(this, Registry);

    /**
     * @private @const
     */
    this.win_ = win;

    /**
     * @private @const
     */
    this.doc_ = win.document;

    /**
     * @type {!Object<string, !CustomElementDef>}
     * @private
     * @const
     */
    this.definitions_ = win.Object.create(null);

    /**
     * A up-to-date DOM selector for all custom elements.
     * @type {string}
     */
    this.query_ = '';

    /**
     * The currently upgrading element.
     * @private {Element}
     */
    this.current_ = null;
  }

  /**
   * The currently-being-upgraded custom element.
   *
   * When an already created (through the DOM parsing APIs, or innerHTML)
   * custom element node is being upgraded, we can't just create a new node
   * (it's illegal in the spec). But we still need to run the custom element's
   * constructor code on the node. We avoid this conundrum by running the
   * constructor while returning this current node in the HTMLElement
   * class constructor (the base class of all custom elements).
   *
   * @return {Element}
   */


  _createClass(Registry, [{
    key: 'current',
    value: function current() {
      var current = this.current_;
      this.current_ = null;
      return current;
    }

    /**
     * Finds the custom element definition by name.
     *
     * @param {string} name
     * @return {CustomElementDef|undefined}
     */

  }, {
    key: 'getByName',
    value: function getByName(name) {
      var definition = this.definitions_[name];
      if (definition) {
        return definition;
      }
    }

    /**
     * Finds the custom element definition by constructor instance.
     *
     * @param {CustomElementConstructorDef} ctor
     * @return {CustomElementDef|undefined}
     */

  }, {
    key: 'getByConstructor',
    value: function getByConstructor(ctor) {
      var definitions = this.definitions_;

      for (var name in definitions) {
        var def = definitions[name];
        if (def.ctor === ctor) {
          return def;
        }
      }
    }

    /**
     * Registers the custom element definition, and upgrades all elements by that
     * name in the root document.
     *
     * @param {string} name
     * @param {!CustomElementConstructorDef} ctor
     * @param {!Object|undefined} options
     */

  }, {
    key: 'define',
    value: function define(name, ctor, options) {
      var _win_2 = this.win_,
          Error = _win_2.Error,
          SyntaxError = _win_2.SyntaxError;


      if (options) {
        throw new Error('Extending native custom elements is not supported');
      }

      assertValidName(SyntaxError, name);

      if (this.getByName(name) || this.getByConstructor(ctor)) {
        throw new Error('duplicate definition "' + name + '"');
      }

      // TODO(jridgewell): Record connectedCallback, disconnectedCallback,
      // adoptedCallback, attributeChangedCallback, and observedAttributes.
      // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes
      this.definitions_[name] = {
        name: name,
        ctor: ctor
      };

      this.observe_(name);
      this.upgrade(this.doc_, name);
    }

    /**
     * Upgrades custom elements descendants of root (but not including root).
     *
     * When called with an opt_query, it both upgrades and connects the custom
     * elements (this is used during the custom element define algorithm).
     *
     * @param {!Node} root
     * @param {string=} opt_query
     */

  }, {
    key: 'upgrade',
    value: function upgrade(root, opt_query) {
      // Only CustomElementRegistry.p.define provides a query (the newly defined
      // custom element). In this case, we are both upgrading _and_ connecting
      // the custom elements.
      var newlyDefined = !!opt_query;
      var query = opt_query || this.query_;
      var upgradeCandidates = this.queryAll_(root, query);

      for (var i = 0; i < upgradeCandidates.length; i++) {
        var candidate = upgradeCandidates[i];
        if (newlyDefined) {
          this.connectedCallback_(candidate);
        } else {
          this.upgradeSelf(candidate);
        }
      }
    }

    /**
     * Upgrades the custom element node, if a custom element has been registered
     * by this name.
     *
     * @param {!Node} node
     */

  }, {
    key: 'upgradeSelf',
    value: function upgradeSelf(node) {
      var def = this.getByName(node.localName);
      if (!def) {
        return;
      }

      this.upgradeSelf_( /** @type {!Element} */node, def);
    }

    /**
     * @param {!Node} root
     * @param {string} query
     * @return {!Array|!NodeList}
     */

  }, {
    key: 'queryAll_',
    value: function queryAll_(root, query) {
      if (!query || !root.querySelectorAll) {
        // Nothing to do...
        return [];
      }

      return root.querySelectorAll(query);
    }

    /**
     * Upgrades the (already created via DOM parsing) custom element.
     *
     * @param {!Element} node
     * @param {!CustomElementDef} def
     */

  }, {
    key: 'upgradeSelf_',
    value: function upgradeSelf_(node, def) {
      var ctor = def.ctor;

      if (node instanceof ctor) {
        return;
      }

      // Despite how it looks, this is not a useless construction.
      // HTMLElementPolyfill (the base class of all custom elements) will return
      // the current node, allowing the custom element's subclass constructor to
      // run on the node. The node itself is already constructed, so the return
      // value is just the node.
      this.current_ = node;
      var el = new ctor();

      if (el !== node) {
        throw new this.win_.Error('Constructor illegally returned a different instance.');
      }
    }

    /**
     * Fires connectedCallback on the custom element, if it has one.
     * This also upgrades the custom element, since it may not have been
     * accessible via the root document before (a detached DOM tree).
     *
     * @param {!Node} node
     */

  }, {
    key: 'connectedCallback_',
    value: function connectedCallback_(node) {
      var def = this.getByName(node.localName);
      if (!def) {
        return;
      }
      this.upgradeSelf_( /** @type {!Element} */node, def);
      // TODO(jridgewell): It may be appropriate to adoptCallback, if the node
      // used to be in another doc.
      // TODO(jridgewell): I should be calling the definitions connectedCallback
      // with node as the context.
      if (node.connectedCallback) {
        node.connectedCallback();
      }
    }

    /**
     * Fires disconnectedCallback on the custom element, if it has one.
     *
     * @param {!Node} node
     */

  }, {
    key: 'disconnectedCallback_',
    value: function disconnectedCallback_(node) {
      // TODO(jridgewell): I should be calling the definitions connectedCallback
      // with node as the context.
      if (node.disconnectedCallback) {
        node.disconnectedCallback();
      }
    }

    /**
     * Records name as a registered custom element to observe.
     *
     * Starts the Mutation Observer if this is the first registered custom
     * element. This is deferred until the first custom element is defined to
     * speed up initial rendering of the page.
     *
     * Mutation Observers are conveniently available in every browser we care
     * about. When a node is connected to the root document, all custom
     * elements (including that node iteself) will be upgraded and call
     * connectedCallback. When a node is disconnectedCallback from the root
     * document, all custom elements will call disconnectedCallback.
     *
     * @param {string} name
     */

  }, {
    key: 'observe_',
    value: function observe_(name) {
      var _this = this;

      if (this.query_) {
        this.query_ += ',' + name;
        return;
      }

      this.query_ = name;

      // The first registered name starts the mutation observer.
      var observer = new this.win_.MutationObserver(function (records) {
        if (records) {
          _this.handleRecords_(records);
        }
      });
      observer.observe(this.doc_, {
        childList: true,
        subtree: true
      });
    }

    /**
     * Handle all the Mutation Observer's Mutation Records.
     * All added custom elements will be upgraded (if not already) and call
     * connectedCallback. All removed custom elements will call
     * disconnectedCallback.
     *
     * @param {!Array<!MutationRecord>} records
     */

  }, {
    key: 'handleRecords_',
    value: function handleRecords_(records) {
      for (var i = 0; i < records.length; i++) {
        var record = records[i];
        if (!record) {
          continue;
        }

        var addedNodes = record.addedNodes,
            removedNodes = record.removedNodes;

        for (var _i = 0; _i < addedNodes.length; _i++) {
          var node = addedNodes[_i];
          var connectedCandidates = this.queryAll_(node, this.query_);
          this.connectedCallback_(node);
          for (var _i2 = 0; _i2 < connectedCandidates.length; _i2++) {
            this.connectedCallback_(connectedCandidates[_i2]);
          }
        }

        for (var _i3 = 0; _i3 < removedNodes.length; _i3++) {
          var _node = removedNodes[_i3];
          var disconnectedCandidates = this.queryAll_(_node, this.query_);
          this.disconnectedCallback_(_node);
          for (var _i4 = 0; _i4 < disconnectedCandidates.length; _i4++) {
            this.disconnectedCallback_(disconnectedCandidates[_i4]);
          }
        }
      }
    }
  }]);

  return Registry;
}();

/**
 * Does the polyfilling.
 * @param {!Window} win
 */


function polyfill(win) {
  var HTMLElement = win.HTMLElement,
      Element = win.Element,
      Node = win.Node,
      Document = win.Document,
      Object = win.Object,
      document = win.document;
  var createElement = document.createElement,
      cloneNode = document.cloneNode,
      importNode = document.importNode;


  var registry = new Registry(win);
  var customElements = new CustomElementRegistry(win, registry);

  // Expose the custom element registry.
  // Object.getOwnPropertyDescriptor(window, 'customElements')
  // {get: Æ’, set: undefined, enumerable: true, configurable: true}
  Object.defineProperty(win, 'customElements', {
    enumerable: true,
    configurable: true,
    // writable: false,
    value: customElements
  });

  // Patch createElement to immediately upgrade the custom element.
  // This has the added benefit that it avoids the "already created but needs
  // constructor code run" chicken-and-egg problem.
  Document.prototype.createElement = function createElementPolyfill(name) {
    var def = registry.getByName(name);
    if (def) {
      return new def.ctor();
    }
    return createElement.apply(this, arguments);
  };

  // Patch importNode to immediately upgrade custom elements.
  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.
  Document.prototype.importNode = function importNodePolyfill() {
    var imported = importNode.apply(this, arguments);
    if (imported) {
      registry.upgradeSelf(imported);
      registry.upgrade(imported);
    }
    return imported;
  };

  // Patch cloneNode to immediately upgrade custom elements.
  Node.prototype.cloneNode = function cloneNodePolyfill() {
    var cloned = cloneNode.apply(this, arguments);
    registry.upgradeSelf(cloned);
    registry.upgrade(cloned);
    return cloned;
  };

  // Patch the innerHTML setter to immediately upgrade custom elements.
  // Note, this could technically fire connectedCallbacks if this node was
  // connected, but we leave that to the Mutation Observer.
  var innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
  var innerHTMLSetter = innerHTMLDesc.set;
  innerHTMLDesc.set = function (html) {
    innerHTMLSetter.call(this, html);
    registry.upgrade(this);
  };
  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);

  /**
   * You can't use the real HTMLElement constructor, because you can't subclass
   * it without using native classes. So, mock its approximation using
   * createElement.
   */
  function HTMLElementPolyfill() {
    var constructor = this.constructor;

    // If we're upgrading an already created custom element, we can't create
    // another new node (by the spec, it must be the same node).

    var el = registry.current();

    // If there's not a already created custom element, we're being invoked via
    // `new`ing the constructor.
    //
    // Technically, we could get here via createElement, but we patched that.
    // If it the custom element was registered, the patch turned it into a
    // `new` call.
    // If it was not registered, the native createElement is used. And if
    // native createElement is being used and we got to this code, we're really
    // in an infinite loop (a native createElement call just below) so we've
    // got bigger problems.
    //
    // So just take my word we got here via `new`.
    if (!el) {
      // The custom element definition is an invariant. If the custom element
      // is registered, everything works. If it's not, it throws in the member
      // property access (only defined custom elements can be directly
      // constructed via `new`).
      var def = registry.getByConstructor(constructor);
      el = createElement.call(document, def.name);
    }

    // Finally, if the node was already constructed, we need to reset it's
    // prototype to the custom element prototype. And if it wasn't already
    // constructed, we created a new node via native createElement, and we need
    // to reset it's prototype. Basically always reset the prototype.
    Object.setPrototypeOf(el, constructor.prototype);
    return el;
  }
  subClass(Object, HTMLElement, HTMLElementPolyfill);

  // Expose the polyfilled HTMLElement constructor for everyone to extend from.
  win.HTMLElement = HTMLElementPolyfill;
}

/**
 * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled
 * classes can `_this = superClass.call(this)` during their construction.
 *
 * This is only used when Custom Elements v1 is already available _and_ we're
 * using transpiled classes (which use ES5 construction idioms).
 *
 * @param {!Window} win
 */
function wrapHTMLElement(win) {
  var HTMLElement = win.HTMLElement,
      Reflect = win.Reflect,
      Object = win.Object;
  /**
   */

  function HTMLElementWrapper() {
    var ctor = /** @type {function(...?):?|undefined} */
    /** @type {!HTMLElement} */this.constructor;

    // Reflect.construct allows us to construct a new HTMLElement without using
    // `new` (which will always fail because native HTMLElement is a restricted
    // constructor).
    return Reflect.construct(HTMLElement, [], ctor);
  }
  subClass(Object, HTMLElement, HTMLElementWrapper);

  // Expose the wrapped HTMLElement constructor for everyone to extend from.
  win.HTMLElement = HTMLElementWrapper;
}

/**
 * Setups up prototype inheritance
 *
 * @param {!Object} Object
 * @param {!Function} superClass
 * @param {!Function} subClass
 */
function subClass(Object, superClass, subClass) {
  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')
  // {value: Æ’, writable: true, enumerable: false, configurable: true}
  subClass.prototype = Object.create(superClass.prototype, {
    constructor: {
      // enumerable: false,
      configurable: true,
      writable: true,
      value: subClass
    }
  });
}

/**
 * Polyfills Custom Elements v1 API. This has 4 modes:
 *
 * 1. Custom elements v1 already supported, using native classes
 * 2. Custom elements v1 already supported, using transpiled classes
 * 3. Custom elements v1 not supported, using native classes
 * 4. Custom elements v1 not supported, using transpiled classes
 *
 * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support
 * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is
 * done.
 *
 * @param {!Window} win
 * @param {!Function} ctor
 */
function install(win, ctor) {
  if (isPatched(win)) {
    return;
  }

  var install = true;
  var installWrapper = false;

  if (hasCustomElements(win)) {
    // If ctor is constructable without new, it's a function. That means it was
    // compiled down, and we need to do the minimal polyfill because all you
    // cannot extend HTMLElement without native classes.
    try {
      var _Object = win.Object,
          _Reflect = win.Reflect;

      // "Construct" ctor using ES5 idioms

      var instance = _Object.create(ctor.prototype);
      ctor.call(instance);

      // If that succeeded, we're in a transpiled environment
      // Let's find out if we can wrap HTMLElement and avoid a full patch.
      installWrapper = !!(_Reflect && _Reflect.construct);
    } catch (e) {

      // The ctor threw when we constructed is via ES5, so it's a real class.
      // We're ok to not install the polyfill.
      install = false;
    }
  }

  if (installWrapper) {
    wrapHTMLElement(win);
  } else if (install) {
    polyfill(win);
  }
}

},{}],54:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Polyfill for `document.contains()` method. Notice that according to spec
 * `document.contains` is inclusionary.
 * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains
 * @param {?Node} node
 * @return {boolean}
 * @this {Node}
 */
function documentContainsPolyfill(node) {
  // Per spec, "contains" method is inclusionary
  // i.e. `node.contains(node) == true`. However, we still need to test
  // equality to the document itself.
  return node == this || this.documentElement.contains(node);
}

/**
 * Polyfills `HTMLDocument.contains` API.
 * @param {!Window} win
 */
function install(win) {
  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,
  // so we use that as a fallback.
  var documentClass = win.HTMLDocument || win.Document;
  if (!documentClass.prototype.contains) {
    win.Object.defineProperty(documentClass.prototype, 'contains', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: documentContainsPolyfill
    });
  }
}

},{}],55:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This
 * is specially important because IE does not support `opt_force` attribute. See
 * https://goo.gl/hgKNYY for details.
 * @param {string} token
 * @param {boolean=} opt_force
 * @this {DOMTokenList}
 * @return {boolean}
 */
function domTokenListTogglePolyfill(token, opt_force) {
  var remove = opt_force === undefined ? this.contains(token) : !opt_force;
  if (remove) {
    this.remove(token);
    return false;
  } else {
    this.add(token);
    return true;
  }
}

/**
 * Polyfills `DOMTokenList.prototype.toggle` API in IE.
 * @param {!Window} win
 */
function install(win) {
  if (isIe(win) && win.DOMTokenList) {
    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: domTokenListTogglePolyfill
    });
  }
}

/**
 * Whether the current browser is a IE browser.
 * @param {!Window} win
 * @return {boolean}
 */
function isIe(win) {
  return (/Trident|MSIE|IEMobile/i.test(win.navigator.userAgent)
  );
}

},{}],56:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = sign;
exports.install = install;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parses the number x and returns its sign. For positive x returns 1, for
 * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number
 * that parses to NaN, returns NaN.
 *
 * @param {number} x
 * @return {number}
 */
function sign(x) {
  x = Number(x);

  // If x is 0, -0, or NaN, return it.
  if (!x) {
    return x;
  }

  return x > 0 ? 1 : -1;
}

/**
 * Sets the Math.sign polyfill if it does not exist.
 * @param {!Window} win
 */
function install(win) {
  if (!win.Math.sign) {
    win.Object.defineProperty(win.Math, 'sign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: sign
    });
  }
}

},{}],57:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assign = assign;
exports.install = install;
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Copies values of all enumerable own properties from one or more source
 * objects (provided as extended arguments to the function) to a target object.
 *
 * @param {!Object} target
 * @param {...Object} var_args
 * @return {!Object}
 */

function assign(target, var_args) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    if (source != null) {
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          output[key] = source[key];
        }
      }
    }
  }
  return output;
}

/**
 * Sets the Object.assign polyfill if it does not exist.
 * @param {!Window} win
 */
function install(win) {
  if (!win.Object.assign) {
    win.Object.defineProperty(win.Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

},{}],58:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;

var _promise = require('promise-pjs/promise');

var Promise = _interopRequireWildcard(_promise);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Sets the Promise polyfill if it does not exist.
 * @param {!Window} win
 */
function install(win) {
  if (!win.Promise) {
    win.Promise = /** @type {?} */Promise;
    // In babel the * export is an Object with a default property.
    // In closure compiler it is the Promise function itself.
    if (Promise.default) {
      win.Promise = Promise.default;
    }
    // We copy the individual static methods, because closure
    // compiler flattens the polyfill namespace.
    win.Promise.resolve = Promise.resolve;
    win.Promise.reject = Promise.reject;
    win.Promise.all = Promise.all;
    win.Promise.race = Promise.race;
  }
} /**
   * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS-IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

},{"promise-pjs/promise":6}],59:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Preconnect = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


/**
 * @fileoverview Provides a services to preconnect to a url to warm up the
 * connection before the real request can be made.
 */

var _templateObject = _taggedTemplateLiteral(['\n        <link rel="preload" referrerpolicy="origin" />'], ['\n        <link rel="preload" referrerpolicy="origin" />']);

exports.setPreconnectFeaturesForTesting = setPreconnectFeaturesForTesting;
exports.preconnectForElement = preconnectForElement;

var _services = require('./services');

var _log = require('./log');

var _service = require('./service');

var _staticTemplate = require('./static-template');

var _url3 = require('./url');

var _string = require('./string');

var _types = require('./types');

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ACTIVE_CONNECTION_TIMEOUT_MS = 180 * 1000;
var PRECONNECT_TIMEOUT_MS = 10 * 1000;

/**
 * @typedef {{
 *   preload: (boolean|undefined),
 *   preconnect: (boolean|undefined)
 * }}
 */
var PreconnectFeaturesDef = void 0;

/** @private {?PreconnectFeaturesDef} */
var preconnectFeatures = null;

/**
 * Detect related features if feature detection is supported by the
 * browser. Even if this fails, the browser may support the feature.
 * @param {!Window} win
 * @return {!PreconnectFeaturesDef}
 */
function getPreconnectFeatures(win) {
  if (!preconnectFeatures) {
    var linkTag = win.document.createElement('link');
    var tokenList = linkTag['relList'];
    linkTag.as = 'invalid-value';
    if (!tokenList || !tokenList.supports) {
      return {};
    }
    preconnectFeatures = {
      preconnect: tokenList.supports('preconnect'),
      preload: tokenList.supports('preload'),
      onlyValidAs: linkTag.as != 'invalid-value'
    };
  }
  return preconnectFeatures;
}

/**
 * @param {?PreconnectFeaturesDef} features
 */
function setPreconnectFeaturesForTesting(features) {
  preconnectFeatures = features;
}

var PreconnectService = function () {

  /**
   * @param {!Window} win
   */
  function PreconnectService(win) {
    _classCallCheck(this, PreconnectService);

    /** @private @const {!Document} */
    this.document_ = win.document;

    /** @private @const {!Element} */
    this.head_ = (0, _log.dev)().assertElement(win.document.head);
    /**
     * Origin we've preconnected to and when that connection
     * expires as a timestamp in MS.
     * @private @const {!Object<string, number>}
     */
    this.origins_ = {};
    /**
     * Urls we've prefetched.
     * @private @const {!Object<string, boolean>}
     */
    this.urls_ = {};
    /** @private @const {!./service/platform-impl.Platform}  */
    this.platform_ = _services.Services.platformFor(win);
    // Mark current origin as preconnected.
    this.origins_[(0, _url3.parseUrlDeprecated)(win.location.href).origin] = true;

    /**
     * Detect support for the given resource hints.
     * Unfortunately not all browsers support this, so this can only
     * be used as an affirmative signal.
     * @private @const {!PreconnectFeaturesDef}
     */
    this.features_ = getPreconnectFeatures(win);

    /** @private @const {!./service/timer-impl.Timer} */
    this.timer_ = _services.Services.timerFor(win);
  }

  /**
   * Preconnects to a URL. Always also does a dns-prefetch because
   * browser support for that is better.
   * @param {!./service/viewer-impl.Viewer} viewer
   * @param {string} url
   * @param {boolean=} opt_alsoConnecting Set this flag if you also just
   *    did or are about to connect to this host. This is for the case
   *    where preconnect is issued immediate before or after actual connect
   *    and preconnect is used to flatten a deep HTTP request chain.
   *    E.g. when you preconnect to a host that an embed will connect to
   *    when it is more fully rendered, you already know that the connection
   *    will be used very soon.
   */


  _createClass(PreconnectService, [{
    key: 'url',
    value: function url(viewer, _url, opt_alsoConnecting) {
      var _this = this;

      viewer.whenFirstVisible().then(function () {
        _this.url_(viewer, _url, opt_alsoConnecting);
      });
    }

    /**
     * Preconnects to a URL. Always also does a dns-prefetch because
     * browser support for that is better.
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} url
     * @param {boolean=} opt_alsoConnecting Set this flag if you also just
     *    did or are about to connect to this host. This is for the case
     *    where preconnect is issued immediate before or after actual connect
     *    and preconnect is used to flatten a deep HTTP request chain.
     *    E.g. when you preconnect to a host that an embed will connect to
     *    when it is more fully rendered, you already know that the connection
     *    will be used very soon.
     */

  }, {
    key: 'url_',
    value: function url_(viewer, url, opt_alsoConnecting) {
      if (!this.isInterestingUrl_(url)) {
        return;
      }

      var _parseUrlDeprecated = (0, _url3.parseUrlDeprecated)(url),
          origin = _parseUrlDeprecated.origin;

      var now = Date.now();
      var lastPreconnectTimeout = this.origins_[origin];
      if (lastPreconnectTimeout && now < lastPreconnectTimeout) {
        if (opt_alsoConnecting) {
          this.origins_[origin] = now + ACTIVE_CONNECTION_TIMEOUT_MS;
        }
        return;
      }
      // If we are about to use the connection, don't re-preconnect for
      // 180 seconds.
      var timeout = opt_alsoConnecting ? ACTIVE_CONNECTION_TIMEOUT_MS : PRECONNECT_TIMEOUT_MS;
      this.origins_[origin] = now + timeout;
      // If we know that preconnect is supported, there is no need to do
      // dedicated dns-prefetch.
      var dns = void 0;
      if (!this.features_.preconnect) {
        dns = this.document_.createElement('link');
        dns.setAttribute('rel', 'dns-prefetch');
        dns.setAttribute('href', origin);
        this.head_.appendChild(dns);
      }
      var preconnect = this.document_.createElement('link');
      preconnect.setAttribute('rel', 'preconnect');
      preconnect.setAttribute('href', origin);
      preconnect.setAttribute('referrerpolicy', 'origin');
      this.head_.appendChild(preconnect);

      // Remove the tags eventually to free up memory.
      this.timer_.delay(function () {
        if (dns && dns.parentNode) {
          dns.parentNode.removeChild(dns);
        }
        if (preconnect.parentNode) {
          preconnect.parentNode.removeChild(preconnect);
        }
      }, 10000);

      this.preconnectPolyfill_(viewer, origin);
    }

    /**
     * Asks the browser to preload a URL. Always also does a preconnect
     * because browser support for that is better.
     *
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} url
     * @param {string=} opt_preloadAs
     */

  }, {
    key: 'preload',
    value: function preload(viewer, url, opt_preloadAs) {
      var _this2 = this;

      if (!this.isInterestingUrl_(url)) {
        return;
      }
      if (this.urls_[url]) {
        return;
      }
      this.urls_[url] = true;
      this.url(viewer, url, /* opt_alsoConnecting */true);
      if (!this.features_.preload) {
        return;
      }
      if (opt_preloadAs == 'document' && this.platform_.isSafari()) {
        // Preloading documents currently does not work in Safari,
        // because it
        // - does not support preloading iframes
        // - and uses a different cache for iframes (when loaded without
        //   as attribute).
        return;
      }
      viewer.whenFirstVisible().then(function () {
        _this2.performPreload_(url);
      });
    }

    /**
     * Performs a preload using `<link rel="preload">`.
     * @param {string} url
     * @private
     */

  }, {
    key: 'performPreload_',
    value: function performPreload_(url) {
      var preload = (0, _staticTemplate.htmlFor)(this.document_)(_templateObject);
      preload.setAttribute('href', url);
      // Do not set 'as' attribute to correct value for now, for 2 reasons
      // - document value is not yet supported and dropped
      // - script is blocked due to CSP.
      // Due to spec change we now have to also preload with the "as"
      // being set to `fetch` when it would previously would be empty.
      // See https://github.com/w3c/preload/issues/80
      // for details.
      if (this.features_.onlyValidAs) {
        preload.as = 'fetch';
      } else {
        preload.as = '';
      }
      this.head_.appendChild(preload);
      // As opposed to preconnect we do not clean this tag up, because there is
      // no expectation as to it having an immediate effect.
    }

    /**
     * Skips over non HTTP/HTTPS URL.
     * @param {string} url
     * @return {boolean}
     */

  }, {
    key: 'isInterestingUrl_',
    value: function isInterestingUrl_(url) {
      if ((0, _string.startsWith)(url, 'https:') || (0, _string.startsWith)(url, 'http:')) {
        return true;
      }
      return false;
    }

    /**
     * Safari does not support preconnecting, but due to its significant
     * performance benefits we implement this crude polyfill.
     *
     * We make an image connection to a "well-known" file on the origin adding
     * a random query string to bust the cache (no caching because we do want to
     * actually open the connection).
     *
     * This should get us an open SSL connection to these hosts and significantly
     * speed up the next connections.
     *
     * The actual URL is expected to 404. If you see errors for
     * amp_preconnect_polyfill in your DevTools console or server log:
     * This is expected and fine to leave as is. Its fine to send a non 404
     * response, but please make it small :)
     *
     * @param {!./service/viewer-impl.Viewer} viewer
     * @param {string} origin
     * @private
     */

  }, {
    key: 'preconnectPolyfill_',
    value: function preconnectPolyfill_(viewer, origin) {
      // Unfortunately there is no reliable way to feature detect whether
      // preconnect is supported, so we do this only in Safari, which is
      // the most important browser without support for it.
      if (this.features_.preconnect || !(this.platform_.isSafari() || this.platform_.isIos())) {
        return;
      }

      // Don't attempt to preconnect for ACTIVE_CONNECTION_TIMEOUT_MS since
      // we effectively create an active connection.
      // TODO(@cramforce): Confirm actual http2 timeout in Safari.
      var now = Date.now();
      this.origins_[origin] = now + ACTIVE_CONNECTION_TIMEOUT_MS;
      // Make the URL change whenever we want to make a new request,
      // but make it stay stable in between. While a given page
      // would not actually make a new request, another page might
      // and with this it has the same URL. If (and that is a big if)
      // the server responds with a cacheable response, this reduces
      // requests we make. More importantly, though, it reduces URL
      // entropy as seen by servers and thus allows reverse proxies
      // (read CDNs) to respond more efficiently.
      var cacheBust = now - now % ACTIVE_CONNECTION_TIMEOUT_MS;
      var url = origin + '/amp_preconnect_polyfill_404_or_other_error_expected.' + '_Do_not_worry_about_it?' + cacheBust;
      var xhr = new XMLHttpRequest();
      xhr.open('HEAD', url, true);
      // We only support credentialed preconnect for now.
      xhr.withCredentials = true;

      xhr.send();
    }
  }]);

  return PreconnectService;
}();

var Preconnect = function () {
  /**
   * @param {!PreconnectService} preconnectService
   * @param {!Element} element
   */
  function Preconnect(preconnectService, element) {
    _classCallCheck(this, Preconnect);

    /** @const @private {!PreconnectService} */
    this.preconnectService_ = preconnectService;

    /** @const @private {!Element} */
    this.element_ = element;

    /** @private {?./service/viewer-impl.Viewer} */
    this.viewer_ = null;
  }

  /**
   * @return {!./service/viewer-impl.Viewer}
   * @private
   */


  _createClass(Preconnect, [{
    key: 'getViewer_',
    value: function getViewer_() {
      if (!this.viewer_) {
        this.viewer_ = _services.Services.viewerForDoc(this.element_);
      }
      return this.viewer_;
    }

    /**
     * Preconnects to a URL. Always also does a dns-prefetch because
     * browser support for that is better.
     * @param {string} url
     * @param {boolean=} opt_alsoConnecting Set this flag if you also just
     *    did or are about to connect to this host. This is for the case
     *    where preconnect is issued immediate before or after actual connect
     *    and preconnect is used to flatten a deep HTTP request chain.
     *    E.g. when you preconnect to a host that an embed will connect to
     *    when it is more fully rendered, you already know that the connection
     *    will be used very soon.
     */

  }, {
    key: 'url',
    value: function url(_url2, opt_alsoConnecting) {
      this.preconnectService_.url(this.getViewer_(), _url2, opt_alsoConnecting);
    }

    /**
     * Asks the browser to preload a URL. Always also does a preconnect
     * because browser support for that is better.
     *
     * @param {string} url
     * @param {string=} opt_preloadAs
     */

  }, {
    key: 'preload',
    value: function preload(url, opt_preloadAs) {
      this.preconnectService_.preload(this.getViewer_(), url, opt_preloadAs);
    }
  }]);

  return Preconnect;
}();

/**
 * @param {!Element} element
 * @return {!Preconnect}
 */


exports.Preconnect = Preconnect;
function preconnectForElement(element) {
  var serviceHolder = (0, _types.toWin)(element.ownerDocument.defaultView);
  (0, _service.registerServiceBuilder)(serviceHolder, 'preconnect', PreconnectService);
  var preconnectService = (0, _service.getService)(serviceHolder, 'preconnect');
  return new Preconnect(preconnectService, element);
}

},{"./log":45,"./service":63,"./services":104,"./static-template":107,"./string":108,"./types":113,"./url":116}],60:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PullToRefreshBlocker = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.installPullToRefreshBlocker = installPullToRefreshBlocker;

var _services = require('./services');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Installs "pull-to-refresh" (P2R) blocker if viewer has requested. P2R can
 * be very disruptive for different viewer scenarios. This is currently only
 * done on Chrome (both Android and iOS).
 * @param {!Window} win
 */
function installPullToRefreshBlocker(win) {
  // Only do when requested and don't even try it on Safari!
  // This mode is only executed in the single-doc mode.
  if (_services.Services.viewerForDoc(win.document).getParam('p2r') == '0' && _services.Services.platformFor(win).isChrome()) {
    new PullToRefreshBlocker(win.document, _services.Services.viewportForDoc(win.document));
  }
}

/**
 * Visible for testing only.
 * @private
 */

var PullToRefreshBlocker = exports.PullToRefreshBlocker = function () {
  /**
   * @param {!Document} doc
   * @param {!./service/viewport/viewport-impl.Viewport} viewport
   */
  function PullToRefreshBlocker(doc, viewport) {
    _classCallCheck(this, PullToRefreshBlocker);

    /** @private {!Document} */
    this.doc_ = doc;

    /** @private @const */
    this.viewport_ = viewport;

    /** @private {boolean} */
    this.tracking_ = false;

    /** @private {number} */
    this.startPos_ = 0;

    /** @private {!Function} */
    this.boundTouchStart_ = this.onTouchStart_.bind(this);
    /** @private {!Function} */
    this.boundTouchMove_ = this.onTouchMove_.bind(this);
    /** @private {!Function} */
    this.boundTouchEnd_ = this.onTouchEnd_.bind(this);
    /** @private {!Function} */
    this.boundTouchCancel_ = this.onTouchCancel_.bind(this);

    this.doc_.addEventListener('touchstart', this.boundTouchStart_, true);
  }

  /** */


  _createClass(PullToRefreshBlocker, [{
    key: 'cleanup',
    value: function cleanup() {
      this.stopTracking_();
      this.doc_.removeEventListener('touchstart', this.boundTouchStart_, true);
    }

    /**
     * @param {!Event} event
     * @private
     */

  }, {
    key: 'onTouchStart_',
    value: function onTouchStart_(event) {
      // P2R won't trigger when document is scrolled. Also can ignore when we are
      // already tracking this touch and for non-single-touch events.
      if (this.tracking_ || !(event.touches && event.touches.length == 1) || this.viewport_.getScrollTop() > 0) {
        return;
      }

      this.startTracking_(event.touches[0].clientY);
    }

    /**
     * @param {number} startPos
     * @private
     */

  }, {
    key: 'startTracking_',
    value: function startTracking_(startPos) {
      this.tracking_ = true;
      this.startPos_ = startPos;
      this.doc_.addEventListener('touchmove', this.boundTouchMove_, true);
      this.doc_.addEventListener('touchend', this.boundTouchEnd_, true);
      this.doc_.addEventListener('touchcancel', this.boundTouchCancel_, true);
    }

    /** @private */

  }, {
    key: 'stopTracking_',
    value: function stopTracking_() {
      this.tracking_ = false;
      this.startPos_ = 0;
      this.doc_.removeEventListener('touchmove', this.boundTouchMove_, true);
      this.doc_.removeEventListener('touchend', this.boundTouchEnd_, true);
      this.doc_.removeEventListener('touchcancel', this.boundTouchCancel_, true);
    }

    /**
     * @param {!Event} event
     * @private
     */

  }, {
    key: 'onTouchMove_',
    value: function onTouchMove_(event) {
      if (!this.tracking_) {
        return;
      }

      var dy = event.touches[0].clientY - this.startPos_;

      // Immediately cancel the P2R if dragging down.
      if (dy > 0) {
        event.preventDefault();
      }

      // Stop tracking if there was any motion at all.
      if (dy != 0) {
        this.stopTracking_();
      }
    }

    /**
     * @param {!Event} unusedEvent
     * @private
     */

  }, {
    key: 'onTouchEnd_',
    value: function onTouchEnd_(unusedEvent) {
      this.stopTracking_();
    }

    /**
     * @param {!Event} unusedEvent
     * @private
     */

  }, {
    key: 'onTouchCancel_',
    value: function onTouchCancel_(unusedEvent) {
      this.stopTracking_();
    }
  }]);

  return PullToRefreshBlocker;
}();

},{"./services":104}],61:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForServices = waitForServices;
exports.hasRenderDelayingServices = hasRenderDelayingServices;
exports.includedServices = includedServices;

var _services = require('./services');

var _log = require('./log');

var _service = require('./service');

/**
 * A map of services that delay rendering. The key is the name of the service
 * and the value is a DOM query which is used to check if the service is needed
 * in the current document.
 * Do not add a service unless absolutely necessary.
 *
 * \   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  / _____|
 *  \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __
 *   \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |
 *    \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |
 *     \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______|
 *
 * The equivalent of this list is used for server-side rendering (SSR) and any
 * changes made to it must be made in coordination with caches that implement
 * SSR. For more information on SSR see bit.ly/amp-ssr.
 *
 * @const {!Object<string, string>}
 */
var SERVICES = {
  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',
  'variant': 'amp-experiment',
  'amp-story': 'amp-story[standalone]'
};

/**
 * Maximum milliseconds to wait for all extensions to load before erroring.
 * @const
 */
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var LOAD_TIMEOUT = 3000;

/**
 * Detects any render delaying services that are required on the page, and
 * returns a promise with a timeout.
 * @param {!Window} win
 * @return {!Promise<!Array<*>>} resolves to an Array that has the same length
 *     as the detected render delaying services
 */
function waitForServices(win) {
  var promises = includedServices(win).map(function (service) {
    return _services.Services.timerFor(win).timeoutPromise(LOAD_TIMEOUT, (0, _service.getServicePromise)(win, service), 'Render timeout waiting for service ' + service + ' to be ready.');
  });
  return Promise.all(promises);
}

/**
 * Returns true if the page has a render delaying service.
 * @param {!Window} win
 * @return {boolean}
 */
function hasRenderDelayingServices(win) {
  return includedServices(win).length > 0;
}

/**
 * Detects which, if any, render-delaying extensions are included on the page.
 * @param {!Window} win
 * @return {!Array<string>}
 */
function includedServices(win) {
  /** @const {!Document} */
  var doc = win.document;
  (0, _log.dev)().assert(doc.body);

  return Object.keys(SERVICES).filter(function (service) {
    return doc.querySelector(SERVICES[service]);
  });
}

},{"./log":45,"./service":63,"./services":104}],62:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultidocManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


// eslint-disable-line no-unused-vars


exports.installRuntimeServices = installRuntimeServices;
exports.installAmpdocServices = installAmpdocServices;
exports.installBuiltins = installBuiltins;
exports.adopt = adopt;
exports.adoptShadowMode = adoptShadowMode;

var _baseElement = require('./base-element');

var _templateImpl = require('./service/template-impl');

var _commonSignals = require('./common-signals');

var _log = require('./log');

var _services = require('./services');

var _visibilityState = require('./visibility-state');

var _dom = require('./dom');

var _config = require('./config');

var _shadowEmbed = require('./shadow-embed');

var _css = require('../build/css');

var _service = require('./service');

var _mode = require('./mode');

var _renderDelayingServices = require('./render-delaying-services');

var _actionImpl = require('./service/action-impl');

var _batchedXhrImpl = require('./service/batched-xhr-impl');

var _extensionsImpl = require('./service/extensions-impl');

var _cidImpl = require('./service/cid-impl');

var _cryptoImpl = require('./service/crypto-impl');

var _documentInfoImpl = require('./service/document-info-impl');

var _documentState = require('./service/document-state');

var _navigation = require('./service/navigation');

var _documentSubmit = require('./document-submit');

var _historyImpl = require('./service/history-impl');

var _input = require('./input');

var _platformImpl = require('./service/platform-impl');

var _resourcesImpl = require('./service/resources-impl');

var _standardActionsImpl = require('./service/standard-actions-impl');

var _storageImpl = require('./service/storage-impl');

var _styleInstaller = require('./style-installer');

var _timerImpl = require('./service/timer-impl');

var _urlImpl = require('./service/url-impl');

var _urlReplacementsImpl = require('./service/url-replacements-impl');

var _viewerImpl = require('./service/viewer-impl');

var _viewportImpl = require('./service/viewport/viewport-impl');

var _vsyncImpl = require('./service/vsync-impl');

var _xhrImpl = require('./service/xhr-impl');

var _experiments = require('./experiments');

var _url = require('./url');

var _error = require('./error');

var _style = require('./style');

var _chunk = require('./chunk');

var _customElementRegistry = require('./service/custom-element-registry');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(0, _log.initLogConstructor)();
(0, _log.setReportError)(_error.reportErrorForWin.bind(null, self));

/** @const @private {string} */
var TAG = 'runtime';

/**
 * Install runtime-level services.
 * @param {!Window} global Global scope to adopt.
 */
function installRuntimeServices(global) {
  (0, _cryptoImpl.installCryptoService)(global);
  (0, _batchedXhrImpl.installBatchedXhrService)(global);
  (0, _documentState.installDocumentStateService)(global);
  (0, _platformImpl.installPlatformService)(global);
  (0, _templateImpl.installTemplatesService)(global);
  (0, _timerImpl.installTimerService)(global);
  (0, _vsyncImpl.installVsyncService)(global);
  (0, _xhrImpl.installXhrService)(global);
  (0, _input.installInputService)(global);
}

/**
 * Install ampdoc-level services.
 * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
 * @param {!Object<string, string>=} opt_initParams
 */
function installAmpdocServices(ampdoc, opt_initParams) {
  (0, _urlImpl.installUrlForDoc)(ampdoc);
  (0, _cidImpl.installCidService)(ampdoc);
  (0, _documentInfoImpl.installDocumentInfoServiceForDoc)(ampdoc);
  (0, _viewerImpl.installViewerServiceForDoc)(ampdoc, opt_initParams);
  (0, _viewportImpl.installViewportServiceForDoc)(ampdoc);
  (0, _historyImpl.installHistoryServiceForDoc)(ampdoc);
  (0, _resourcesImpl.installResourcesServiceForDoc)(ampdoc);
  (0, _urlReplacementsImpl.installUrlReplacementsServiceForDoc)(ampdoc);
  (0, _actionImpl.installActionServiceForDoc)(ampdoc);
  (0, _standardActionsImpl.installStandardActionsForDoc)(ampdoc);
  (0, _storageImpl.installStorageServiceForDoc)(ampdoc);
  (0, _navigation.installGlobalNavigationHandlerForDoc)(ampdoc);
  (0, _documentSubmit.installGlobalSubmitListenerForDoc)(ampdoc);
}

/**
 * Install builtins.
 * @param {!Window} global Global scope to adopt.
 */
function installBuiltins(global) {
  (0, _extensionsImpl.installBuiltinElements)(global);
}

/**
 * Applies the runtime to a given global scope for a single-doc mode. Multi
 * frame support is currently incomplete.
 * @param {!Window} global Global scope to adopt.
 * @param {function(!Window, !./service/extensions-impl.Extensions):!Promise} callback
 * @return {!Promise}
 */
function adoptShared(global, callback) {

  // Tests can adopt the same window twice. sigh.
  if (global.AMP_TAG) {
    return Promise.resolve();
  }
  global.AMP_TAG = true;
  // If there is already a global AMP object we assume it is an array
  // of functions
  /** @const {!Array<function(!Object)|!ExtensionPayload>} */
  var preregisteredExtensions = global.AMP || [];

  (0, _extensionsImpl.installExtensionsService)(global);
  /** @const {!./service/extensions-impl.Extensions} */
  var extensions = _services.Services.extensionsFor(global);
  installRuntimeServices(global);
  (0, _extensionsImpl.stubLegacyElements)(global);

  global.AMP = {
    win: global,
    // Might not be available in tests.
    '_': global.AMP ? global.AMP['_'] : undefined
  };

  // `AMP.extension()` function is only installed in a non-minified mode.
  // This function is meant to play the same role for development and testing
  // as `AMP.push()` in production.
  if (!(0, _mode.getMode)().minified) {
    /**
     * @param {string} unusedName
     * @param {string} unusedVersion
     * @param {function(!Object)} installer
     * @const
     */
    global.AMP.extension = function (unusedName, unusedVersion, installer) {
      installer(global.AMP);
    };
  }

  /** @const */
  global.AMP.config = _config.config;

  global.AMP.BaseElement = _baseElement.BaseElement;

  global.AMP.BaseTemplate = _templateImpl.BaseTemplate;

  /**
   * Registers an extended element and installs its styles.
   * @param {string} name
   * @param {function(new:BaseElement, !Element)} implementationClass
   * @param {?string|undefined} css
   */
  global.AMP.registerElement = extensions.addElement.bind(extensions);

  /**
   * Registers an extended template.
   * @param {string} name
   * @param {function(new:BaseTemplate)} implementationClass
   */
  global.AMP.registerTemplate = function (name, implementationClass) {
    (0, _templateImpl.registerExtendedTemplate)(global, name, implementationClass);
  };

  /**
   * Registers an ampdoc service.
   * @param {string} name
   * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} implementationClass
   */
  global.AMP.registerServiceForDoc = extensions.addService.bind(extensions);

  // Experiments.
  /**
   * @param {string} experimentId
   * @return {boolean}
   */
  global.AMP.isExperimentOn = _experiments.isExperimentOn.bind(null, global);

  /**
   * @param {string} experimentId
   * @param {boolean=} opt_on
   * @return {boolean}
   */
  global.AMP.toggleExperiment = _experiments.toggleExperiment.bind(null, global);

  /**
   * @param {!LogLevel} level
   */
  global.AMP.setLogLevel = _log.overrideLogLevel.bind(null);

  /**
   * Sets the function to forward tick events to.
   * @param {function(string,?string=,number=)} unusedFn
   * @param {function()=} opt_flush
   * @deprecated
   * @export
   */
  global.AMP.setTickFunction = function (unusedFn, opt_flush) {};

  // Run specific setup for a single-doc or shadow-doc mode.
  var iniPromise = callback(global, extensions);

  /**
   * @param {function(!Object,!Object)|!ExtensionPayload} fnOrStruct
   */
  function installExtension(fnOrStruct) {
    var register = function register() {
      iniPromise.then(function () {
        if (typeof fnOrStruct == 'function') {
          fnOrStruct(global.AMP, global.AMP._);
        } else {
          extensions.registerExtension(fnOrStruct.n, fnOrStruct.f, global.AMP);
        }
      });
    };

    // We support extension declarations which declare they have an
    // "intermediate" dependency that needs to be loaded before they
    // can execute.
    if (!(typeof fnOrStruct == 'function') && fnOrStruct.i) {
      preloadDeps(extensions, fnOrStruct).then(function () {
        return startRegisterOrChunk(global, fnOrStruct, register);
      });
    } else {
      startRegisterOrChunk(global, fnOrStruct, register);
    }
  }

  // Handle high priority extensions now, and if necessary issue
  // requests for new extensions (used for experimental version
  // locking).
  for (var i = 0; i < preregisteredExtensions.length; i++) {
    var fnOrStruct = preregisteredExtensions[i];
    if (maybeLoadCorrectVersion(global, fnOrStruct)) {
      preregisteredExtensions.splice(i--, 1);
    } else if (typeof fnOrStruct == 'function' || fnOrStruct.p == 'high') {
      try {
        installExtension(fnOrStruct);
      } catch (e) {
        // Throw errors outside of loop in its own micro task to
        // avoid on error stopping other extensions from loading.
        (0, _log.dev)().error(TAG, 'Extension failed: ', e, fnOrStruct.n);
      }
      // We handled the entry. Remove from set for future execution.
      preregisteredExtensions.splice(i--, 1);
    }
  }

  maybePumpEarlyFrame(global, function () {
    /**
     * Registers a new custom element.
     * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
     */
    global.AMP.push = function (fnOrStruct) {
      if (maybeLoadCorrectVersion(global, fnOrStruct)) {
        return;
      }
      installExtension(fnOrStruct);
    };
    // Execute asynchronously scheduled elements.
    for (var _i = 0; _i < preregisteredExtensions.length; _i++) {
      var _fnOrStruct = preregisteredExtensions[_i];
      if (maybeLoadCorrectVersion(global, _fnOrStruct)) {
        continue;
      }
      try {
        installExtension(_fnOrStruct);
      } catch (e) {
        // Throw errors outside of loop in its own micro task to
        // avoid on error stopping other extensions from loading.
        (0, _log.dev)().error(TAG, 'Extension failed: ', e, _fnOrStruct.n);
      }
    }
    // Make sure we empty the array of preregistered extensions.
    // Technically this is only needed for testing, as everything should
    // go out of scope here, but just making sure.
    preregisteredExtensions.length = 0;
  });
  // If the closure passed to maybePumpEarlyFrame didn't execute
  // immediately we need to keep pushing onto preregisteredExtensions
  if (!global.AMP.push) {
    global.AMP.push = preregisteredExtensions.push.bind(preregisteredExtensions);
  }

  // For iOS we need to set `cursor:pointer` to ensure that click events are
  // delivered.
  if (_services.Services.platformFor(global).isIos()) {
    (0, _style.setStyle)(global.document.documentElement, 'cursor', 'pointer');
  }

  return iniPromise;
}

/**
 * @param {!./service/extensions-impl.Extensions} extensions
 * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
 * @return {!Promise}
 */
function preloadDeps(extensions, fnOrStruct) {
  // Allow a single string as the intermediate dependency OR allow
  // for an array if intermediate dependencies that needs to be
  // resolved first before executing this current extension.
  if (Array.isArray(fnOrStruct.i)) {
    var promises = fnOrStruct.i.map(function (dep) {
      return extensions.preloadExtension(dep);
    });
    return Promise.all(promises);
  } else if (typeof fnOrStruct.i == 'string') {
    return extensions.preloadExtension(fnOrStruct.i);
  }
  (0, _log.dev)().error('RUNTIME', 'dependency is neither an array or a string', fnOrStruct.i);
  return Promise.resolve();
}

/**
 * @param {!Window} global Global scope to adopt.
 * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
 * @param {function()} register
 */
function startRegisterOrChunk(global, fnOrStruct, register) {
  if (typeof fnOrStruct == 'function' || fnOrStruct.p == 'high') {
    // "High priority" extensions do not go through chunking.
    // This should be used for extensions that need to run early.
    // One example would be viewer communication that is required
    // to transition document from pre-render to visible (which
    // affects chunking itself).
    // We consider functions as high priority, because
    // - if in doubt, that is a better default
    // - the only actual  user is a viewer integration that should
    //   be high priority.
    Promise.resolve().then(register);
  } else {
    register.displayName = fnOrStruct.n;
    (0, _chunk.startupChunk)(global.document, register);
  }
}

/**
 * Applies the runtime to a given global scope for a single-doc mode.
 * Multi frame support is currently incomplete.
 * @param {!Window} global Global scope to adopt.
 * @return {!Promise}
 */
function adopt(global) {
  return adoptShared(global, function (global) {
    var ampdocService = _services.Services.ampdocServiceFor(global);
    var ampdoc = ampdocService.getAmpDoc();
    global.AMP.ampdoc = ampdoc;

    var viewer = _services.Services.viewerForDoc(global.document);
    global.AMP.viewer = viewer;

    if ((0, _mode.getMode)().development) {
      global.AMP.toggleRuntime = viewer.toggleRuntime.bind(viewer);
      global.AMP.resources = _services.Services.resourcesForDoc(global.document);
    }

    var viewport = _services.Services.viewportForDoc(global.document);

    global.AMP.viewport = {};
    global.AMP.viewport.getScrollLeft = viewport.getScrollLeft.bind(viewport);
    global.AMP.viewport.getScrollWidth = viewport.getScrollWidth.bind(viewport);
    global.AMP.viewport.getWidth = viewport.getWidth.bind(viewport);

    return (0, _dom.waitForBodyPromise)(global.document).then(function () {
      // Ensure that all declared extensions are marked and stubbed.
      (0, _customElementRegistry.stubElementsForDoc)(ampdoc);
    });
  });
}

/**
 * Applies the runtime to a given global scope for shadow mode.
 * @param {!Window} global Global scope to adopt.
 * @return {!Promise}
 */
function adoptShadowMode(global) {
  return adoptShared(global, function (global, extensions) {

    var manager = new MultidocManager(global, _services.Services.ampdocServiceFor(global), extensions, _services.Services.timerFor(global));

    /**
     * Registers a shadow root document via a fully fetched document.
     * @param {!Element} hostElement
     * @param {!Document} doc
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */
    global.AMP.attachShadowDoc = manager.attachShadowDoc.bind(manager);

    /**
     * Registers a shadow root document via a stream.
     * @param {!Element} hostElement
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */
    global.AMP.attachShadowDocAsStream = manager.attachShadowDocAsStream.bind(manager);

    return (0, _dom.waitForBodyPromise)(global.document);
  });
}

/**
 * A manager for documents in the multi-doc environment.
 */

var MultidocManager = exports.MultidocManager = function () {

  /**
   * @param {!Window} win
   * @param {!./service/ampdoc-impl.AmpDocService} ampdocService
   * @param {!./service/extensions-impl.Extensions} extensions
   * @param {!./service/timer-impl.Timer} timer
   */
  function MultidocManager(win, ampdocService, extensions, timer) {
    _classCallCheck(this, MultidocManager);

    /** @const */
    this.win = win;
    /** @private @const */
    this.ampdocService_ = ampdocService;
    /** @private @const */
    this.extensions_ = extensions;
    /** @private @const */
    this.timer_ = timer;

    /** @private @const {!Array<!ShadowRoot>} */
    this.shadowRoots_ = [];
  }

  /**
   * Attaches the shadow root and calls the supplied DOM builder.
   * @param {!Element} hostElement
   * @param {string} url
   * @param {!Object<string, string>|undefined} initParams
   * @param {function(!Object, !ShadowRoot,
   * !./service/ampdoc-impl.AmpDocShadow):!Promise} builder
   * @return {!Object}
   * @private
   */


  _createClass(MultidocManager, [{
    key: 'attachShadowDoc_',
    value: function attachShadowDoc_(hostElement, url, initParams, builder) {
      var _this = this;

      this.purgeShadowRoots_();

      (0, _style.setStyle)(hostElement, 'visibility', 'hidden');
      var shadowRoot = (0, _shadowEmbed.createShadowRoot)(hostElement);

      if (shadowRoot.AMP) {
        (0, _log.user)().warn(TAG, 'Shadow doc wasn\'t previously closed');
        this.closeShadowRoot_(shadowRoot);
      }

      var amp = {};
      shadowRoot.AMP = amp;
      amp.url = url;

      var _parseUrlDeprecated = (0, _url.parseUrlDeprecated)(url),
          origin = _parseUrlDeprecated.origin;

      var ampdoc = this.ampdocService_.installShadowDoc(url, shadowRoot);
      /** @const {!./service/ampdoc-impl.AmpDocShadow} */
      amp.ampdoc = ampdoc;
      (0, _log.dev)().fine(TAG, 'Attach to shadow root:', shadowRoot, ampdoc);

      // Install runtime CSS.
      (0, _styleInstaller.installStylesForDoc)(ampdoc, _css.cssText, /* callback */null,
      /* opt_isRuntimeCss */true);
      // Instal doc services.
      installAmpdocServices(ampdoc, initParams || Object.create(null));

      var viewer = _services.Services.viewerForDoc(ampdoc);

      /**
       * Sets the document's visibility state.
       * @param {!VisibilityState} state
       */
      amp.setVisibilityState = function (state) {
        (0, _viewerImpl.setViewerVisibilityState)(viewer, state);
      };

      // Messaging pipe.
      /**
       * Posts message to the ampdoc.
       * @param {string} eventType
       * @param {!JsonObject} data
       * @param {boolean} unusedAwaitResponse
       * @return {(!Promise<*>|undefined)}
       */
      amp.postMessage = viewer.receiveMessage.bind(viewer);

      /** @type {function(string, *, boolean):(!Promise<*>|undefined)} */
      var onMessage = void 0;

      /**
       * Provides a message delivery mechanism by which AMP document can send
       * messages to the viewer.
       * @param {function(string, *, boolean):(!Promise<*>|undefined)} callback
       */
      amp.onMessage = function (callback) {
        onMessage = callback;
      };

      viewer.setMessageDeliverer(function (eventType, data, awaitResponse) {
        // Special messages.
        if (eventType == 'broadcast') {
          _this.broadcast_(data, shadowRoot);
          return awaitResponse ? Promise.resolve() : undefined;
        }

        // All other messages.
        if (onMessage) {
          return onMessage(eventType, data, awaitResponse);
        }
      }, origin);

      /**
       * Closes the document. The document can no longer be activated again.
       */
      amp.close = function () {
        _this.closeShadowRoot_(shadowRoot);
      };

      if ((0, _mode.getMode)().development) {
        amp.toggleRuntime = viewer.toggleRuntime.bind(viewer);
        amp.resources = _services.Services.resourcesForDoc(ampdoc);
      }

      // Start building the shadow doc DOM.
      builder(amp, shadowRoot, ampdoc).then(function () {
        // Document is ready.
        ampdoc.setReady();
        ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
        (0, _style.setStyle)(hostElement, 'visibility', 'visible');
      });

      // Store reference.
      if (!this.shadowRoots_.includes(shadowRoot)) {
        this.shadowRoots_.push(shadowRoot);
      }

      (0, _log.dev)().fine(TAG, 'Shadow root initialization is done:', shadowRoot, ampdoc);
      return amp;
    }

    /**
     * Implementation for `attachShadowDoc` function. Attaches the shadow doc and
     * configures ampdoc for it.
     * @param {!Element} hostElement
     * @param {!Document} doc
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */

  }, {
    key: 'attachShadowDoc',
    value: function attachShadowDoc(hostElement, doc, url, opt_initParams) {
      var _this2 = this;

      (0, _log.dev)().fine(TAG, 'Attach shadow doc:', doc);
      // TODO(dvoytenko, #9490): once stable, port full document case to emulated
      // stream.
      return this.attachShadowDoc_(hostElement, url, opt_initParams, function (amp, shadowRoot, ampdoc) {
        // Install extensions.
        var extensionIds = _this2.mergeShadowHead_(ampdoc, shadowRoot, doc);
        _this2.extensions_.installExtensionsInDoc(ampdoc, extensionIds);

        // Append body.
        if (doc.body) {
          var body = (0, _shadowEmbed.importShadowBody)(shadowRoot, doc.body, /* deep */true);
          body.classList.add('amp-shadow');
          ampdoc.setBody(body);
        }

        // TODO(dvoytenko): find a better and more stable way to make content
        // visible. E.g. integrate with dynamic classes. In shadow case
        // specifically, we have to wait for stubbing to complete, which may
        // take awhile due to importNode.
        setTimeout(function () {
          ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
          (0, _style.setStyle)(hostElement, 'visibility', 'visible');
        }, 50);

        return Promise.resolve();
      });
    }

    /**
     * Implementation for `attachShadowDocAsStream` function. Attaches the shadow
     * doc and configures ampdoc for it.
     * @param {!Element} hostElement
     * @param {string} url
     * @param {!Object<string, string>=} opt_initParams
     * @return {!Object}
     */

  }, {
    key: 'attachShadowDocAsStream',
    value: function attachShadowDocAsStream(hostElement, url, opt_initParams) {
      var _this3 = this;

      (0, _log.dev)().fine(TAG, 'Attach shadow doc as stream');
      return this.attachShadowDoc_(hostElement, url, opt_initParams, function (amp, shadowRoot, ampdoc) {
        // Start streaming.
        var renderStarted = false;
        var writer = (0, _shadowEmbed.createShadowDomWriter)(_this3.win);
        amp.writer = writer;
        writer.onBody(function (doc) {
          // Install extensions.
          var extensionIds = _this3.mergeShadowHead_(ampdoc, shadowRoot, doc);
          // Apply all doc extensions.
          _this3.extensions_.installExtensionsInDoc(ampdoc, extensionIds);

          // Append shallow body.
          var body = (0, _shadowEmbed.importShadowBody)(shadowRoot, (0, _log.dev)().assertElement(doc.body),
          /* deep */false);
          body.classList.add('amp-shadow');
          ampdoc.setBody(body);
          return body;
        });
        writer.onBodyChunk(function () {
          // TODO(dvoytenko): find a better and more stable way to make
          // content visible. E.g. integrate with dynamic classes. In shadow
          // case specifically, we have to wait for stubbing to complete,
          // which may take awhile due to node importing.
          if (!renderStarted) {
            renderStarted = true;
            setTimeout(function () {
              ampdoc.signals().signal(_commonSignals.CommonSignals.RENDER_START);
              (0, _style.setStyle)(hostElement, 'visibility', 'visible');
            }, 50);
          }
        });
        return new Promise(function (resolve) {
          writer.onEnd(function () {
            resolve();
            amp.writer = null;
          });
        });
      });
    }

    /**
     * Processes the contents of the shadow document's head.
     * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
     * @param {!ShadowRoot} shadowRoot
     * @param {!Document} doc
     * @return {!Array<string>}
     * @private
     */

  }, {
    key: 'mergeShadowHead_',
    value: function mergeShadowHead_(ampdoc, shadowRoot, doc) {
      var extensionIds = [];
      if (doc.head) {
        var parentLinks = {};
        var links = (0, _dom.childElementsByTag)((0, _log.dev)().assertElement(this.win.document.head), 'link');
        for (var i = 0; i < links.length; i++) {
          var href = links[i].getAttribute('href');
          if (href) {
            parentLinks[href] = true;
          }
        }

        for (var n = doc.head.firstElementChild; n; n = n.nextElementSibling) {
          var _n = n,
              tagName = _n.tagName;

          var name = n.getAttribute('name');
          var rel = n.getAttribute('rel');
          switch (tagName) {
            case 'TITLE':
              shadowRoot.AMP.title = n.textContent;
              (0, _log.dev)().fine(TAG, '- set title: ', shadowRoot.AMP.title);
              break;
            case 'META':
              if (n.hasAttribute('charset')) {
                // Ignore.
              } else if (name == 'viewport') {
                // Ignore.
              } else {
                // TODO(dvoytenko): copy other meta tags.
                (0, _log.dev)().warn(TAG, 'meta ignored: ', n);
              }
              break;
            case 'LINK':
              /** @const {string} */
              var _href = n.getAttribute('href');
              if (rel == 'canonical') {
                shadowRoot.AMP.canonicalUrl = _href;
                (0, _log.dev)().fine(TAG, '- set canonical: ', shadowRoot.AMP.canonicalUrl);
              } else if (rel == 'stylesheet') {
                // Must be a font definition: no other stylesheets are allowed.
                if (parentLinks[_href]) {
                  (0, _log.dev)().fine(TAG, '- stylesheet already included: ', _href);
                } else {
                  parentLinks[_href] = true;
                  var el = this.win.document.createElement('link');
                  el.setAttribute('rel', 'stylesheet');
                  el.setAttribute('type', 'text/css');
                  el.setAttribute('href', _href);
                  this.win.document.head.appendChild(el);
                  (0, _log.dev)().fine(TAG, '- import font to parent: ', _href, el);
                }
              } else {
                (0, _log.dev)().fine(TAG, '- ignore link rel=', rel);
              }
              break;
            case 'STYLE':
              if (n.hasAttribute('amp-boilerplate')) {
                // Ignore.
                (0, _log.dev)().fine(TAG, '- ignore boilerplate style: ', n);
              } else if (n.hasAttribute('amp-custom')) {
                (0, _styleInstaller.installStylesForDoc)(ampdoc, n.textContent,
                /* callback */null,
                /* isRuntimeCss */false, 'amp-custom');
                (0, _log.dev)().fine(TAG, '- import style: ', n);
              } else if (n.hasAttribute('amp-keyframes')) {
                (0, _styleInstaller.installStylesForDoc)(ampdoc, n.textContent,
                /* callback */null,
                /* isRuntimeCss */false, 'amp-keyframes');
                (0, _log.dev)().fine(TAG, '- import style: ', n);
              }
              break;
            case 'SCRIPT':
              if (n.hasAttribute('src')) {
                (0, _log.dev)().fine(TAG, '- src script: ', n);
                var src = n.getAttribute('src');
                var isRuntime = src.indexOf('/amp.js') != -1 || src.indexOf('/v0.js') != -1;
                var customElement = n.getAttribute('custom-element');
                var customTemplate = n.getAttribute('custom-template');
                var versionRe = /-(\d+.\d+)(.max)?\.js$/;
                var match = versionRe.exec(src);
                var version = match ? match[1] : '0.1';
                if (isRuntime) {
                  (0, _log.dev)().fine(TAG, '- ignore runtime script: ', src);
                } else if (customElement || customTemplate) {
                  // This is an extension.
                  this.extensions_.installExtensionForDoc(ampdoc, customElement || customTemplate, version);
                  (0, _log.dev)().fine(TAG, '- load extension: ', customElement || customTemplate, ' ', version);
                  if (customElement) {
                    extensionIds.push(customElement);
                  }
                } else if (!n.hasAttribute('data-amp-report-test')) {
                  (0, _log.user)().error(TAG, '- unknown script: ', n, src);
                }
              } else {
                // Non-src version of script.
                var type = n.getAttribute('type') || 'application/javascript';
                if (type.indexOf('javascript') == -1) {
                  shadowRoot.appendChild(this.win.document.importNode(n, true));
                  (0, _log.dev)().fine(TAG, '- non-src script: ', n);
                } else {
                  (0, _log.user)().error(TAG, '- unallowed inline javascript: ', n);
                }
              }
              break;
            case 'NOSCRIPT':
              // Ignore.
              break;
            default:
              (0, _log.user)().error(TAG, '- UNKNOWN head element:', n);
              break;

          }
        }
      }
      return extensionIds;
    }

    /**
     * @param {*} data
     * @param {!ShadowRoot} sender
     * @private
     */

  }, {
    key: 'broadcast_',
    value: function broadcast_(data, sender) {
      var _this4 = this;

      this.purgeShadowRoots_();
      this.shadowRoots_.forEach(function (shadowRoot) {
        if (shadowRoot == sender) {
          // Don't broadcast to the sender.
          return;
        }
        // Broadcast message asynchronously.
        var viewer = _services.Services.viewerForDoc(shadowRoot.AMP.ampdoc);
        _this4.timer_.delay(function () {
          viewer.receiveMessage('broadcast',
          /** @type {!JsonObject} */data,
          /* awaitResponse */false);
        }, 0);
      });
    }

    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */

  }, {
    key: 'closeShadowRoot_',
    value: function closeShadowRoot_(shadowRoot) {
      this.removeShadowRoot_(shadowRoot);
      var amp = shadowRoot.AMP;
      delete shadowRoot.AMP;
      var ampdoc = amp.ampdoc;

      (0, _viewerImpl.setViewerVisibilityState)(_services.Services.viewerForDoc(ampdoc), _visibilityState.VisibilityState.INACTIVE);
      (0, _service.disposeServicesForDoc)(ampdoc);
    }

    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */

  }, {
    key: 'removeShadowRoot_',
    value: function removeShadowRoot_(shadowRoot) {
      var index = this.shadowRoots_.indexOf(shadowRoot);
      if (index != -1) {
        this.shadowRoots_.splice(index, 1);
      }
    }

    /**
     * @param {!ShadowRoot} shadowRoot
     * @private
     */

  }, {
    key: 'closeShadowRootAsync_',
    value: function closeShadowRootAsync_(shadowRoot) {
      var _this5 = this;

      this.timer_.delay(function () {
        _this5.closeShadowRoot_(shadowRoot);
      }, 0);
    }

    /** @private */

  }, {
    key: 'purgeShadowRoots_',
    value: function purgeShadowRoots_() {
      var _this6 = this;

      this.shadowRoots_.forEach(function (shadowRoot) {
        // The shadow root has been disconnected. Force it closed.
        if (!shadowRoot.host || !(0, _dom.isConnectedNode)(shadowRoot.host)) {
          (0, _log.user)().warn(TAG, 'Shadow doc wasn\'t previously closed');
          _this6.removeShadowRoot_(shadowRoot);
          _this6.closeShadowRootAsync_(shadowRoot);
        }
      });
    }
  }]);

  return MultidocManager;
}();

/**
 * For a given extension, checks that its version is the same
 * as the version of the main AMP binary.
 * If yes, returns false and does nothing else.
 * If they are different, returns false, and initiates a load
 * of the respective extension via a versioned URL.
 *
 * This is currently guarded by the 'version-locking' experiment.
 * With this active, all scripts in a given page are guaranteed
 * to have the same AMP release version.
 *
 * @param {!Window} win
 * @param {function(!Object, !Object)|!ExtensionPayload} fnOrStruct
 * @return {boolean}
 */


function maybeLoadCorrectVersion(win, fnOrStruct) {
  if (!(0, _experiments.isExperimentOn)(win, 'version-locking')) {
    return false;
  }
  if (typeof fnOrStruct == 'function') {
    return false;
  }
  var version = fnOrStruct.v;
  // This is non-obvious, but we only care about the release version,
  // not about the full rtv version, because these only differ
  // in the config that is fully determined by the primary binary.
  if ('1535016172047' == version) {
    return false;
  }
  // The :not is an extra prevention of recursion because it will be
  // added to script tags that go into the code path below.
  var scriptInHead = win.document.head. /*OK*/querySelector('[custom-element="' + fnOrStruct.n + '"]:not([i-amphtml-inserted])');
  (0, _log.dev)().assert(scriptInHead, 'Expected to find script for extension: %s', fnOrStruct.n);
  if (!scriptInHead) {
    return false;
  }
  // Mark the element as being replaced, so that the installExtension code
  // assumes it as not-present.
  _services.Services.extensionsFor(win).reloadExtension(fnOrStruct.n, scriptInHead);
  return true;
}

/**
 * If it makes sense, let the browser paint the current frame before
 * executing the callback.
 * @param {!Window} win
 * @param {function()} cb Callback that should run after a frame was
 *     pumped.
 */
function maybePumpEarlyFrame(win, cb) {
  if (!(0, _experiments.isExperimentOn)(win, 'pump-early-frame')) {
    cb();
    return;
  }
  // There is definitely nothing to draw yet, so we might as well
  // proceed.
  if (!win.document.body) {
    cb();
    return;
  }
  if ((0, _renderDelayingServices.hasRenderDelayingServices)(win)) {
    cb();
    return;
  }
  _services.Services.timerFor(win).delay(cb, 1);
}

},{"../build/css":1,"./base-element":13,"./chunk":14,"./common-signals":15,"./config":16,"./document-submit":21,"./dom":22,"./error":25,"./experiments":28,"./input":38,"./log":45,"./mode":47,"./render-delaying-services":61,"./service":63,"./service/action-impl":64,"./service/batched-xhr-impl":66,"./service/cid-impl":69,"./service/crypto-impl":70,"./service/custom-element-registry":71,"./service/document-info-impl":72,"./service/document-state":73,"./service/extensions-impl":75,"./service/history-impl":77,"./service/navigation":81,"./service/platform-impl":83,"./service/resources-impl":85,"./service/standard-actions-impl":86,"./service/storage-impl":87,"./service/template-impl":89,"./service/timer-impl":90,"./service/url-impl":92,"./service/url-replacements-impl":93,"./service/viewer-impl":96,"./service/viewport/viewport-impl":101,"./service/vsync-impl":102,"./service/xhr-impl":103,"./services":104,"./shadow-embed":105,"./style":110,"./style-installer":109,"./url":116,"./visibility-state":130}],63:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmbeddableService = exports.Disposable = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *      http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.


/**
 * @fileoverview Registration and getter functions for AMP services.
 *
 * Invariant: Service getters never return null for registered services.
 */

// src/polyfills.js must be the first import.
// eslint-disable-line sort-imports-es6-autofix/sort-imports-es6

exports.getExistingServiceInEmbedScope = getExistingServiceInEmbedScope;
exports.getExistingServiceForDocInEmbedScope = getExistingServiceForDocInEmbedScope;
exports.installServiceInEmbedScope = installServiceInEmbedScope;
exports.registerServiceBuilder = registerServiceBuilder;
exports.registerServiceBuilderForDoc = registerServiceBuilderForDoc;
exports.getService = getService;
exports.getServicePromise = getServicePromise;
exports.getExistingServiceOrNull = getExistingServiceOrNull;
exports.getServicePromiseOrNull = getServicePromiseOrNull;
exports.getServiceForDoc = getServiceForDoc;
exports.getServiceForDocDeprecated = getServiceForDocDeprecated;
exports.getServicePromiseForDoc = getServicePromiseForDoc;
exports.getServicePromiseOrNullForDoc = getServicePromiseOrNullForDoc;
exports.setParentWindow = setParentWindow;
exports.getParentWindow = getParentWindow;
exports.getTopWindow = getTopWindow;
exports.getParentWindowFrameElement = getParentWindowFrameElement;
exports.getAmpdoc = getAmpdoc;
exports.isDisposable = isDisposable;
exports.assertDisposable = assertDisposable;
exports.disposeServicesForDoc = disposeServicesForDoc;
exports.disposeServicesForEmbed = disposeServicesForEmbed;
exports.isEmbeddable = isEmbeddable;
exports.adoptServiceForEmbed = adoptServiceForEmbed;
exports.adoptServiceForEmbedIfEmbeddable = adoptServiceForEmbedIfEmbeddable;
exports.resetServiceForTesting = resetServiceForTesting;

require('./polyfills');

var _promise = require('./utils/promise');

var _log = require('./log');

var _types = require('./types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds info about a service.
 * - obj: Actual service implementation when available.
 * - promise: Promise for the obj.
 * - resolve: Function to resolve the promise with the object.
 * - context: Argument for ctor, either a window or an ampdoc.
 * - ctor: Function that constructs and returns the service.
 * @typedef {{
 *   obj: (?Object),
 *   promise: (?Promise),
 *   resolve: (?function(!Object)),
 *   context: (?Window|?./service/ampdoc-impl.AmpDoc),
 *   ctor: (?function(new:Object, !Window)|
 *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),
 * }}
 */
var ServiceHolderDef = void 0;

/**
 * This interface provides a `dispose` method that will be called by
 * runtime when a service needs to be disposed of.
 * @interface
 */

var Disposable = exports.Disposable = function () {
  function Disposable() {
    _classCallCheck(this, Disposable);
  }

  _createClass(Disposable, [{
    key: 'dispose',


    /**
     * Instructs the service to release any resources it might be holding. Can
     * be called only once in the lifecycle of a service.
     */
    value: function dispose() {}
  }]);

  return Disposable;
}();

/**
 * This interface provides a `adoptEmbedWindow` method that will be called by
 * runtime for a new embed window.
 * @interface
 */


var EmbeddableService = exports.EmbeddableService = function () {
  function EmbeddableService() {
    _classCallCheck(this, EmbeddableService);
  }

  _createClass(EmbeddableService, [{
    key: 'adoptEmbedWindow',


    /**
     * Instructs the service to adopt the embed window and add any necessary
     * listeners and resources.
     * @param {!Window} unusedEmbedWin
     */
    value: function adoptEmbedWindow(unusedEmbedWin) {}
  }]);

  return EmbeddableService;
}();

/**
 * Returns a service with the given id. Assumes that it has been registered
 * already.
 * @param {!Window} win
 * @param {string} id
 * @param {boolean=} opt_fallbackToTopWin
 * @return {Object} The service.
 */


function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {
  // First, try to resolve via local (embed) window.
  var local = getLocalExistingServiceForEmbedWinOrNull(win, id);
  if (local) {
    return local;
  }
  if (opt_fallbackToTopWin) {
    return getService(win, id);
  }
  return null;
}

/**
 * Returns a service with the given id. Assumes that it has been constructed
 * already.
 *
 * Unlike most service getters, passing `Node` is necessary for some FIE-scope
 * services since sometimes we only have the FIE Document for context.
 *
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
 * @param {string} id
 * @param {boolean=} opt_fallbackToTopWin
 * @return {Object} The service.
 */
function getExistingServiceForDocInEmbedScope(nodeOrDoc, id, opt_fallbackToTopWin) {
  // First, try to resolve via local (embed) window.
  if (nodeOrDoc.nodeType) {
    // If a node is passed, try to resolve via this node.
    var win = (0, _types.toWin)( /** @type {!Document} */(nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);
    var local = getLocalExistingServiceForEmbedWinOrNull(win, id);
    if (local) {
      return local;
    }
  }
  // If an ampdoc is passed or fallback is allowed, continue resolving.
  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {
    return getServiceForDocDeprecated(nodeOrDoc, id);
  }
  return null;
}

/**
 * Installs a service override on amp-doc level.
 * @param {!Window} embedWin
 * @param {string} id
 * @param {!Object} service The service.
 */
function installServiceInEmbedScope(embedWin, id, service) {
  var topWin = getTopWindow(embedWin);
  (0, _log.dev)().assert(embedWin != topWin, 'Service override can only be installed in embed window: %s', id);
  (0, _log.dev)().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id), 'Service override has already been installed: %s', id);
  registerServiceInternal(embedWin, embedWin, id, function () {
    return service;
  });
  getServiceInternal(embedWin, id); // Force service to build.
}

/**
 * @param {!Window} embedWin
 * @param {string} id
 * @return {?Object}
 */
function getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {
  // Note that this method currently only resolves against the given window.
  // It does not try to go all the way up the parent window chain. We can change
  // this in the future, but for now this gives us a better performance.
  var topWin = getTopWindow(embedWin);
  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {
    return getServiceInternal(embedWin, id);
  } else {
    return null;
  }
}

/**
 * Registers a service given a class to be used as implementation.
 * @param {!Window} win
 * @param {string} id of the service.
 * @param {function(new:Object, !Window)} constructor
 * @param {boolean=} opt_instantiate Whether to immediately create the service
 */
function registerServiceBuilder(win, id, constructor, opt_instantiate) {
  win = getTopWindow(win);
  registerServiceInternal(win, win, id, constructor);
  if (opt_instantiate) {
    getServiceInternal(win, id);
  }
}

/**
 * Returns a service and registers it given a class to be used as
 * implementation.
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
 * @param {string} id of the service.
 * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor
 * @param {boolean=} opt_instantiate Whether to immediately create the service
 */
function registerServiceBuilderForDoc(nodeOrDoc, id, constructor, opt_instantiate) {
  var ampdoc = getAmpdoc(nodeOrDoc);
  var holder = getAmpdocServiceHolder(ampdoc);
  registerServiceInternal(holder, ampdoc, id, constructor);
  if (opt_instantiate) {
    getServiceInternal(holder, id);
  }
}

/**
 * Returns a service for the given id and window (a per-window singleton). Users
 * should typically wrap this as a special purpose function (e.g.
 * `Services.vsyncFor(win)`) for type safety and because the factory should not
 * be passed around.
 * @param {!Window} win
 * @param {string} id of the service.
 * @template T
 * @return {T}
 */
function getService(win, id) {
  win = getTopWindow(win);
  return getServiceInternal(win, id);
}

/**
 * Returns a promise for a service for the given id and window. Also expects an
 * element that has the actual implementation. The promise resolves when the
 * implementation loaded. Users should typically wrap this as a special purpose
 * function (e.g. `Services.vsyncFor(win)`) for type safety and because the
 * factory should not be passed around.
 * @param {!Window} win
 * @param {string} id of the service.
 * @return {!Promise<!Object>}
 */
function getServicePromise(win, id) {
  return getServicePromiseInternal(win, id);
}

/**
 * Returns a service or null with the given id.
 * @param {!Window} win
 * @param {string} id
 * @return {?Object} The service.
 */
function getExistingServiceOrNull(win, id) {
  win = getTopWindow(win);
  if (isServiceRegistered(win, id)) {
    return getServiceInternal(win, id);
  } else {
    return null;
  }
}

/**
 * Like getServicePromise but returns null if the service was never registered.
 * @param {!Window} win
 * @param {string} id
 * @return {?Promise<!Object>}
 */
function getServicePromiseOrNull(win, id) {
  return getServicePromiseOrNullInternal(win, id);
}

/**
 * Returns a service for the given id and ampdoc (a per-ampdoc singleton).
 * Expects service `id` to be registered.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id
 * @return {T}
 * @template T
 */
function getServiceForDoc(elementOrAmpDoc, id) {
  var ampdoc = getAmpdoc(elementOrAmpDoc);
  var holder = getAmpdocServiceHolder(ampdoc);
  return getServiceInternal(holder, id);
}

/**
 * tl;dr -- Use getServiceForDoc() instead of this.
 *
 * Privileged variant of getServiceForDoc() that accepts non-element params,
 * e.g. window.document. This is currently necessary for doc-level services
 * used in startup, e.g. Chunks. Eventually we want to remove this function
 * and have callers find the appropriate AmpDoc and use getServiceForDoc().
 *
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
 * @param {string} id
 * @return {T}
 * @template T
 */
function getServiceForDocDeprecated(nodeOrDoc, id) {
  var ampdoc = getAmpdoc(nodeOrDoc);
  var holder = getAmpdocServiceHolder(ampdoc);
  return getServiceInternal(holder, id);
}

/**
 * Returns a promise for a service for the given id and ampdoc. Also expects
 * a service that has the actual implementation. The promise resolves when
 * the implementation loaded.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id
 * @return {!Promise<!Object>}
 */
function getServicePromiseForDoc(elementOrAmpDoc, id) {
  return getServicePromiseInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);
}

/**
 * Like getServicePromiseForDoc but returns null if the service was never
 * registered for this ampdoc.
 * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc
 * @param {string} id
 * @return {?Promise<!Object>}
 */
function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {
  return getServicePromiseOrNullInternal(getAmpdocServiceHolder(elementOrAmpDoc), id);
}

/**
 * Set the parent and top windows on a child window (friendly iframe).
 * @param {!Window} win
 * @param {!Window} parentWin
 */
function setParentWindow(win, parentWin) {
  win.__AMP_PARENT = parentWin;
  win.__AMP_TOP = getTopWindow(parentWin);
}

/**
 * Returns the parent window for a child window (friendly iframe).
 * @param {!Window} win
 * @return {!Window}
 */
function getParentWindow(win) {
  return win.__AMP_PARENT || win;
}

/**
 * Returns the top window where AMP Runtime is installed for a child window
 * (friendly iframe).
 * @param {!Window} win
 * @return {!Window}
 */
function getTopWindow(win) {
  return win.__AMP_TOP || win;
}

/**
 * Returns the parent "friendly" iframe if the node belongs to a child window.
 * @param {!Node} node
 * @param {!Window} topWin
 * @return {?HTMLIFrameElement}
 */
function getParentWindowFrameElement(node, topWin) {
  var childWin = (node.ownerDocument || node).defaultView;
  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {
    try {
      return (/** @type {?HTMLIFrameElement} */childWin.frameElement
      );
    } catch (e) {
      // Ignore the error.
    }
  }
  return null;
}

/**
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
 * @return {!./service/ampdoc-impl.AmpDoc}
 */
function getAmpdoc(nodeOrDoc) {
  if (nodeOrDoc.nodeType) {
    var win = (0, _types.toWin)( /** @type {!Document} */(nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);
    return getAmpdocService(win).getAmpDoc( /** @type {!Node} */nodeOrDoc);
  }
  return (/** @type {!./service/ampdoc-impl.AmpDoc} */nodeOrDoc
  );
}

/**
 * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc
 * @return {!./service/ampdoc-impl.AmpDoc|!Window}
 */
function getAmpdocServiceHolder(nodeOrDoc) {
  var ampdoc = getAmpdoc(nodeOrDoc);
  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;
}

/**
 * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid
 * circular dependencies.
 * @param {!Window} win
 * @return {!./service/ampdoc-impl.AmpDocService}
 */
function getAmpdocService(win) {
  return (/** @type {!./service/ampdoc-impl.AmpDocService} */getService(win, 'ampdoc')
  );
}

/**
 * Get service `id` from `holder`. Assumes the service
 * has already been registered.
 * @param {!Object} holder Object holding the service instance.
 * @param {string} id of the service.
 * @return {Object}
 * @template T
 */
function getServiceInternal(holder, id) {
  (0, _log.dev)().assert(isServiceRegistered(holder, id), 'Expected service ' + id + ' to be registered');
  var services = getServices(holder);
  var s = services[id];
  if (!s.obj) {
    (0, _log.dev)().assert(s.ctor, 'Service ' + id + ' registered without ctor nor impl.');
    (0, _log.dev)().assert(s.context, 'Service ' + id + ' registered without context.');
    s.obj = new s.ctor(s.context);
    (0, _log.dev)().assert(s.obj, 'Service ' + id + ' constructed to null.');
    s.ctor = null;
    s.context = null;
    // The service may have been requested already, in which case we have a
    // pending promise we need to fulfill.
    if (s.resolve) {
      s.resolve(s.obj);
    }
  }
  return s.obj;
}

/**
 * @param {!Object} holder Object holding the service instance.
 * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.
 * @param {string} id of the service.
 * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.
 */
function registerServiceInternal(holder, context, id, ctor) {
  var services = getServices(holder);
  var s = services[id];

  if (!s) {
    s = services[id] = {
      obj: null,
      promise: null,
      resolve: null,
      context: null,
      ctor: null
    };
  }

  if (s.ctor || s.obj) {
    // Service already registered.
    return;
  }

  s.ctor = ctor;
  s.context = context;

  // The service may have been requested already, in which case there is a
  // pending promise that needs to fulfilled.
  if (s.resolve) {
    // getServiceInternal will resolve the promise.
    getServiceInternal(holder, id);
  }
}

/**
 * @param {!Object} holder
 * @param {string} id of the service.
 * @return {!Promise<!Object>}
 */
function getServicePromiseInternal(holder, id) {
  var cached = getServicePromiseOrNullInternal(holder, id);
  if (cached) {
    return cached;
  }
  // Service is not registered.

  // TODO(@cramforce): Add a check that if the element is eventually registered
  // that the service is actually provided and this promise resolves.
  var deferred = new _promise.Deferred();
  var promise = deferred.promise,
      resolve = deferred.resolve;


  var services = getServices(holder);
  services[id] = {
    obj: null,
    promise: promise,
    resolve: resolve,
    context: null,
    ctor: null
  };
  return promise;
}

/**
 * Returns a promise for service `id` if the service has been registered
 * on `holder`.
 * @param {!Object} holder
 * @param {string} id of the service.
 * @return {?Promise<!Object>}
 */
function getServicePromiseOrNullInternal(holder, id) {
  var services = getServices(holder);
  var s = services[id];
  if (s) {
    if (s.promise) {
      return s.promise;
    } else {
      // Instantiate service if not already instantiated.
      getServiceInternal(holder, id);
      return s.promise = Promise.resolve( /** @type {!Object} */s.obj);
    }
  }
  return null;
}

/**
 * Returns the object that holds the services registered in a holder.
 * @param {!Object} holder
 * @return {!Object<string,!ServiceHolderDef>}
 */
function getServices(holder) {
  var services = holder.services;

  if (!services) {
    services = holder.services = {};
  }
  return services;
}

/**
 * Whether the specified service implements `Disposable` interface.
 * @param {!Object} service
 * @return {boolean}
 */
function isDisposable(service) {
  return typeof service.dispose == 'function';
}

/**
 * Asserts that the specified service implements `Disposable` interface and
 * typecasts the instance to `Disposable`.
 * @param {!Object} service
 * @return {!Disposable}
 */
function assertDisposable(service) {
  (0, _log.dev)().assert(isDisposable(service), 'required to implement Disposable');
  return (/** @type {!Disposable} */service
  );
}

/**
 * Disposes all disposable (implements `Disposable` interface) services in
 * ampdoc scope.
 * @param {!./service/ampdoc-impl.AmpDoc} ampdoc
 */
function disposeServicesForDoc(ampdoc) {
  disposeServicesInternal(ampdoc);
}

/**
 * Disposes all disposable (implements `Disposable` interface) services in
 * embed scope.
 * @param {!Window} embedWin
 */
function disposeServicesForEmbed(embedWin) {
  disposeServicesInternal(embedWin);
}

/**
 * @param {!Object} holder Object holding the service instances.
 */
function disposeServicesInternal(holder) {
  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving
  // service to be canceled automatically.
  var services = getServices(holder);

  var _loop = function _loop(id) {
    if (!Object.prototype.hasOwnProperty.call(services, id)) {
      return 'continue';
    }
    var serviceHolder = services[id];
    if (serviceHolder.obj) {
      disposeServiceInternal(id, serviceHolder.obj);
    } else if (serviceHolder.promise) {
      serviceHolder.promise.then(function (instance) {
        return disposeServiceInternal(id, instance);
      });
    }
  };

  for (var id in services) {
    var _ret = _loop(id);

    if (_ret === 'continue') continue;
  }
}

/**
 * @param {string} id
 * @param {!Object} service
 */
function disposeServiceInternal(id, service) {
  if (!isDisposable(service)) {
    return;
  }
  try {
    assertDisposable(service).dispose();
  } catch (e) {
    // Ensure that a failure to dispose a service does not disrupt other
    // services.
    (0, _log.dev)().error('SERVICE', 'failed to dispose service', id, e);
  }
}

/**
 * Whether the specified service implements `EmbeddableService` interface.
 * @param {!Object} service
 * @return {boolean}
 */
function isEmbeddable(service) {
  return typeof service.adoptEmbedWindow == 'function';
}

/**
 * Adopts an embeddable (implements `EmbeddableService` interface) service
 * in embed scope.
 * @param {!Window} embedWin
 * @param {string} serviceId
 */
function adoptServiceForEmbed(embedWin, serviceId) {
  var adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);
  (0, _log.dev)().assert(adopted, 'Service ' + serviceId + ' not found on parent ' + 'or doesn\'t implement EmbeddableService.');
}

/**
 * Adopts an embeddable (implements `EmbeddableService` interface) service
 * in embed scope.
 * @param {!Window} embedWin
 * @param {string} serviceId
 * @return {boolean}
 */
function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {
  var frameElement = /** @type {!Node} */(0, _log.dev)().assert(embedWin.frameElement, 'frameElement not found for embed');
  var ampdoc = getAmpdoc(frameElement);
  var holder = getAmpdocServiceHolder(ampdoc);
  if (!isServiceRegistered(holder, serviceId)) {
    return false;
  }
  var service = getServiceForDocDeprecated(frameElement, serviceId);
  if (!isEmbeddable(service)) {
    return false;
  }
  service.adoptEmbedWindow(embedWin);
  return true;
}

/**
 * Resets a single service, so it gets recreated on next getService invocation.
 * @param {!Object} holder
 * @param {string} id of the service.
 */
function resetServiceForTesting(holder, id) {
  if (holder.services) {
    holder.services[id] = null;
  }
}

/**
 * @param {!Object} holder Object holding the service instance.
 * @param {string} id of the service.
 * @return {boolean}
 */
function isServiceRegistered(holder, id) {
  var service = holder.services && holder.services[id];
  // All registered services must have an implementation or a constructor.
  return !!(service && (service.ctor || service.obj));
}

},{"./log":45,"./polyfills":51,"./types":113,"./utils/promise":125}],64:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeferredEvent = exports.ActionService = exports.ActionInvocation = exports.ActionEventDef = exports.ActionInfoDef = exports.TAPPABLE_ARIA_ROLES = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.parseActionMap = parseActionMap;
exports.dereferenceExprsInArgs = dereferenceExprsInArgs;
exports.installActionServiceForDoc = installActionServiceForDoc;

var _actionConstants = require('../action-constants');

var _keyCodes = require('../utils/key-codes');

var _services = require('../services');

var _rateLimit = require('../utils/rate-limit');

var _log = require('../log');

var _object = require('../utils/object');

var _eventHelper = require('../event-helper');

var _mode = require('../mode');

var _json = require('../json');

var _service = require('../service');

var _types = require('../types');

var _dom = require('../dom');

var _error = require('../error');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @const {string} */
var TAG_ = 'Action';

/** @const {string} */
var ACTION_MAP_ = '__AMP_ACTION_MAP__' + Math.random();

/** @const {string} */
var ACTION_QUEUE_ = '__AMP_ACTION_QUEUE__';

/** @const {string} */
var ACTION_HANDLER_ = '__AMP_ACTION_HANDLER__';

/** @const {string} */
var DEFAULT_METHOD_ = 'activate';

/** @const {number} */
var DEFAULT_DEBOUNCE_WAIT = 300; // ms

/** @const {number} */
var DEFAULT_THROTTLE_INTERVAL = 100; // ms

/** @const {!Object<string,!Array<string>>} */
var ELEMENTS_ACTIONS_MAP_ = {
  'form': ['submit', 'clear']
};

/**
 * Interactable widgets which should trigger tap events when the user clicks
 * or activates via the keyboard. Not all are here, e.g. progressbar, tabpanel,
 * since they are text inputs, readonly, or composite widgets that shouldn't
 * need to trigger tap events from spacebar or enter on their own.
 * See https://www.w3.org/TR/wai-aria-1.1/#widget_roles
 * @const {!Object<boolean>}
 */
var TAPPABLE_ARIA_ROLES = exports.TAPPABLE_ARIA_ROLES = {
  'button': true,
  'checkbox': true,
  'link': true,
  'listbox': true,
  'menuitem': true,
  'menuitemcheckbox': true,
  'menuitemradio': true,
  'option': true,
  'radio': true,
  'scrollbar': true,
  'slider': true,
  'spinbutton': true,
  'switch': true,
  'tab': true,
  'treeitem': true
};

/**
 * An expression arg value, e.g. `foo.bar` in `e:t.m(arg=foo.bar)`.
 * @typedef {{expression: string}}
 */
var ActionInfoArgExpressionDef = void 0;

/**
 * An arg value.
 * @typedef {(boolean|number|string|ActionInfoArgExpressionDef)}
 */
var ActionInfoArgValueDef = void 0;

/**
 * Map of arg names to their values, e.g. {arg: 123} in `e:t.m(arg=123)`.
 * @typedef {Object<string, ActionInfoArgValueDef>}
 */
var ActionInfoArgsDef = void 0;

/**
 * @typedef {{
 *   event: string,
 *   target: string,
 *   method: string,
 *   args: ?ActionInfoArgsDef,
 *   str: string
 * }}
 */
var ActionInfoDef = exports.ActionInfoDef = void 0;

/**
 * Function called when an action is invoked.
 *
 * Optionally, takes this action's position within all actions triggered by
 * the same event, as well as said action array, as params.
 *
 * If the action is chainable, returns a Promise which resolves when the
 * action is complete. Otherwise, returns null.
 *
 * @typedef {function(!ActionInvocation, number=, !Array<!ActionInfoDef>=):?Promise}
 */
var ActionHandlerDef = void 0;

/**
 * @typedef {Event|DeferredEvent}
 */
var ActionEventDef = exports.ActionEventDef = void 0;

/**
 * The structure that contains all details of the action method invocation.
 * @struct @const @package For type.
 */

var ActionInvocation = exports.ActionInvocation = function () {
  /**
   * For example:
   *
   *   <div id="div" on="tap:myForm.submit(foo=bar)">
   *     <button id="btn">Submit</button>
   *   </div>
   *
   * `node` is #myForm.
   * `method` is "submit".
   * `args` is {'foo': 'bar'}.
   * `source` is #btn.
   * `caller` is #div.
   * `event` is a "click" Event object.
   * `actionEventType` is "tap".
   * `trust` depends on whether this action was a result of a user gesture.
   * `tagOrTarget` is "amp-form".
   * `sequenceId` is a pseudo-UUID.
   *
   * @param {!Node} node Element whose action is being invoked.
   * @param {string} method Name of the action being invoked.
   * @param {?JsonObject} args Named action arguments.
   * @param {?Element} source Element that generated the `event`.
   * @param {?Element} caller Element containing the on="..." action handler.
   * @param {?ActionEventDef} event The event object that triggered this action.
   * @param {ActionTrust} trust The trust level of this invocation's trigger.
   * @param {?string} actionEventType The AMP event name that triggered this.
   * @param {?string} tagOrTarget The global target name or the element tagName.
   * @param {number} sequenceId An identifier for this action's sequence (all
   *   actions triggered by one event e.g. "tap:form1.submit, form2.submit").
   */
  function ActionInvocation(node, method, args, source, caller, event, trust) {
    var actionEventType = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '?';
    var tagOrTarget = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
    var sequenceId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : Math.random();

    _classCallCheck(this, ActionInvocation);

    /** @const {!Node} */
    this.node = node;
    /** @const {string} */
    this.method = method;
    /** @const {?JsonObject} */
    this.args = args;
    /** @const {?Element} */
    this.source = source;
    /** @const {?Element} */
    this.caller = caller;
    /** @const {?ActionEventDef} */
    this.event = event;
    /** @const {ActionTrust} */
    this.trust = trust;
    /** @const {?string} */
    this.actionEventType = actionEventType;
    /** @const {string} */
    this.tagOrTarget = tagOrTarget || node.tagName;
    /** @const {number} */
    this.sequenceId = sequenceId;
  }

  /**
   * Returns true if the trigger event has a trust equal to or greater than
   * `minimumTrust`. Otherwise, logs a user error and returns false.
   * @param {ActionTrust} minimumTrust
   * @return {boolean}
   */


  _createClass(ActionInvocation, [{
    key: 'satisfiesTrust',
    value: function satisfiesTrust(minimumTrust) {
      // Sanity check.
      if (!(0, _types.isFiniteNumber)(this.trust)) {
        (0, _log.dev)().error(TAG_, 'Invalid trust for \'' + this.method + '\': ' + this.trust);
        return false;
      }
      if (this.trust < minimumTrust) {
        (0, _log.user)().error(TAG_, '"' + this.actionEventType + '" is not allowed to invoke ' + ('"' + this.tagOrTarget + '.' + this.method + '".'));
        return false;
      }
      return true;
    }
  }]);

  return ActionInvocation;
}();

/**
 * TODO(dvoytenko): consider splitting this class into two:
 * 1. A class that has a method "trigger(element, eventType, data)" and
 *    simply can search target in DOM and trigger methods on it.
 * 2. A class that configures event recognizers and rules and then
 *    simply calls action.trigger.
 * @implements {../service.EmbeddableService}
 */


var ActionService = exports.ActionService = function () {
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {(!Document|!ShadowRoot)=} opt_root
   */
  function ActionService(ampdoc, opt_root) {
    _classCallCheck(this, ActionService);

    /** @const {!./ampdoc-impl.AmpDoc} */
    this.ampdoc = ampdoc;

    /** @const {!Document|!ShadowRoot} */
    this.root_ = opt_root || ampdoc.getRootNode();

    /**
     * Optional whitelist of actions e.g. ["AMP.navigateTo", "amp-form.submit"].
     * If not null, any actions that are not in the whitelist will be ignored
     * and throw a user error at invocation time.
     * @private {?Array<string>}
     */
    this.whitelist_ = this.queryWhitelist_();

    /** @const @private {!Object<string, ActionHandlerDef>} */
    this.globalTargets_ = (0, _object.map)();

    /**
     * @const @private {!Object<string, {handler: ActionHandlerDef, minTrust: ActionTrust}>}
     */
    this.globalMethodHandlers_ = (0, _object.map)();
    // Add core events.
    this.addEvent('tap');
    this.addEvent('submit');
    this.addEvent('change');
    this.addEvent('input-debounced');
    this.addEvent('input-throttled');
    this.addEvent('valid');
    this.addEvent('invalid');
  }

  /** @override */


  _createClass(ActionService, [{
    key: 'adoptEmbedWindow',
    value: function adoptEmbedWindow(embedWin) {
      (0, _service.installServiceInEmbedScope)(embedWin, 'action', new ActionService(this.ampdoc, embedWin.document));
    }

    /**
     * @param {string} name
     * TODO(dvoytenko): switch to a system where the event recognizers are
     * registered with Action instead, e.g. "doubletap", "tap to zoom".
     */

  }, {
    key: 'addEvent',
    value: function addEvent(name) {
      var _this = this;

      if (name == 'tap') {
        // TODO(dvoytenko): if needed, also configure touch-based tap, e.g. for
        // fast-click.
        this.root_.addEventListener('click', function (event) {
          if (!event.defaultPrevented) {
            var element = (0, _log.dev)().assertElement(event.target);
            _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
          }
        });
        this.root_.addEventListener('keydown', function (event) {
          var element = (0, _log.dev)().assertElement(event.target);
          var keyCode = event.keyCode;

          if (keyCode == _keyCodes.KeyCodes.ENTER || keyCode == _keyCodes.KeyCodes.SPACE) {
            var role = element.getAttribute('role');
            var isTapEventRole = role && (0, _object.hasOwn)(TAPPABLE_ARIA_ROLES, role.toLowerCase());
            if (!event.defaultPrevented && isTapEventRole) {
              event.preventDefault();
              _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
            }
          }
        });
      } else if (name == 'submit') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target);
          // For get requests, the delegating to the viewer needs to happen
          // before this.
          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      } else if (name == 'change') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target);
          _this.addTargetPropertiesAsDetail_(event);
          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      } else if (name == 'input-debounced') {
        var debouncedInput = (0, _rateLimit.debounce)(this.ampdoc.win, function (event) {
          var target = (0, _log.dev)().assertElement(event.target);
          _this.trigger(target, name, /** @type {!ActionEventDef} */event, _actionConstants.ActionTrust.HIGH);
        }, DEFAULT_DEBOUNCE_WAIT);

        this.root_.addEventListener('input', function (event) {
          // Create a DeferredEvent to avoid races where the browser cleans up
          // the event object before the async debounced function is called.
          var deferredEvent = new DeferredEvent(event);
          _this.addTargetPropertiesAsDetail_(deferredEvent);
          debouncedInput(deferredEvent);
        });
      } else if (name == 'input-throttled') {
        var throttledInput = (0, _rateLimit.throttle)(this.ampdoc.win, function (event) {
          var target = (0, _log.dev)().assertElement(event.target);
          _this.trigger(target, name, /** @type {!ActionEventDef} */event, _actionConstants.ActionTrust.HIGH);
        }, DEFAULT_THROTTLE_INTERVAL);

        this.root_.addEventListener('input', function (event) {
          var deferredEvent = new DeferredEvent(event);
          _this.addTargetPropertiesAsDetail_(deferredEvent);
          throttledInput(deferredEvent);
        });
      } else if (name == 'valid' || name == 'invalid') {
        this.root_.addEventListener(name, function (event) {
          var element = (0, _log.dev)().assertElement(event.target);
          _this.trigger(element, name, event, _actionConstants.ActionTrust.HIGH);
        });
      }
    }

    /**
     * Registers the action target that will receive all designated actions.
     * @param {string} name
     * @param {ActionHandlerDef} handler
     */

  }, {
    key: 'addGlobalTarget',
    value: function addGlobalTarget(name, handler) {
      this.globalTargets_[name] = handler;
    }

    /**
     * Registers the action handler for a common method.
     * @param {string} name
     * @param {ActionHandlerDef} handler
     * @param {ActionTrust} minTrust
     */

  }, {
    key: 'addGlobalMethodHandler',
    value: function addGlobalMethodHandler(name, handler) {
      var minTrust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _actionConstants.ActionTrust.HIGH;

      this.globalMethodHandlers_[name] = { handler: handler, minTrust: minTrust };
    }

    /**
     * Triggers the specified event on the target element.
     * @param {!Element} target
     * @param {string} eventType
     * @param {?ActionEventDef} event
     * @param {ActionTrust} trust
     */

  }, {
    key: 'trigger',
    value: function trigger(target, eventType, event, trust) {
      this.action_(target, eventType, event, trust);
    }

    /**
     * Triggers execution of the method on a target/method.
     * @param {!Element} target
     * @param {string} method
     * @param {?JsonObject} args
     * @param {?Element} source
     * @param {?Element} caller
     * @param {?ActionEventDef} event
     * @param {ActionTrust} trust
     */

  }, {
    key: 'execute',
    value: function execute(target, method, args, source, caller, event, trust) {
      var invocation = new ActionInvocation(target, method, args, source, caller, event, trust);
      this.invoke_(invocation);
    }

    /**
     * Installs action handler for the specified element.
     * @param {!Element} target
     * @param {ActionHandlerDef} handler
     * @param {ActionTrust} minTrust
     */

  }, {
    key: 'installActionHandler',
    value: function installActionHandler(target, handler) {
      var minTrust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _actionConstants.ActionTrust.HIGH;

      // TODO(dvoytenko, #7063): switch back to `target.id` with form proxy.
      var targetId = target.getAttribute('id') || '';
      var debugId = target.tagName + '#' + targetId;
      (0, _log.dev)().assert(targetId && targetId.substring(0, 4) == 'amp-' || target.tagName.toLowerCase() in ELEMENTS_ACTIONS_MAP_, 'AMP element or a whitelisted target element is expected: %s', debugId);

      if (target[ACTION_HANDLER_]) {
        (0, _log.dev)().error(TAG_, 'Action handler already installed for ' + target);
        return;
      }

      /** @const {Array<!ActionInvocation>} */
      var currentQueue = target[ACTION_QUEUE_];

      target[ACTION_HANDLER_] = { handler: handler, minTrust: minTrust };

      // Dequeue the current queue.
      if ((0, _types.isArray)(currentQueue)) {
        _services.Services.timerFor((0, _types.toWin)(target.ownerDocument.defaultView)).delay(function () {
          // TODO(dvoytenko, #1260): dedupe actions.
          currentQueue.forEach(function (invocation) {
            try {
              if (invocation.satisfiesTrust(
              /** @type {ActionTrust} */minTrust)) {
                handler(invocation);
              }
            } catch (e) {
              (0, _log.dev)().error(TAG_, 'Action execution failed:', invocation, e);
            }
          });
          target[ACTION_QUEUE_].length = 0;
        }, 1);
      }
    }

    /**
     * Checks if the given element has registered a particular action type.
     * @param {!Element} target
     * @param {string} actionEventType
     * @param {!Element=} opt_stopAt
     * @return {boolean}
     */

  }, {
    key: 'hasAction',
    value: function hasAction(target, actionEventType, opt_stopAt) {
      return !!this.findAction_(target, actionEventType, opt_stopAt);
    }

    /**
     * Overwrites the current action whitelist (if any). Takes an array of strings
     * of the form "<tagOrTarget>.<method>" e.g. "amp-form.submit" or "AMP.print".
     * @param {!Array<string>} whitelist
     */

  }, {
    key: 'setWhitelist',
    value: function setWhitelist(whitelist) {
      this.whitelist_ = whitelist;
    }

    /**
     * Adds an action to the whitelist. Takes one string of the form
     * "<tagOrTarget>.<method>", e.g. "amp-form.submit" or "AMP.print".
     * @param {string} action
     */

  }, {
    key: 'addToWhitelist',
    value: function addToWhitelist(action) {
      if (!this.whitelist_) {
        this.whitelist_ = [];
      }
      this.whitelist_.push(action);
    }

    /**
     * @param {!Element} source
     * @param {string} actionEventType
     * @param {?ActionEventDef} event
     * @param {ActionTrust} trust
     * @private
     */

  }, {
    key: 'action_',
    value: function action_(source, actionEventType, event, trust) {
      var _this2 = this;

      var action = this.findAction_(source, actionEventType);
      if (!action) {
        return;
      }
      // Use a pseudo-UUID to uniquely identify this sequence of actions.
      // A sequence is all actions triggered by a single event.
      var sequenceId = Math.random();
      // Invoke actions serially, where each action waits for its predecessor
      // to complete. `currentPromise` is the i'th promise in the chain.
      var currentPromise = null;
      action.actionInfos.forEach(function (actionInfo) {
        var target = actionInfo.target;
        // Replace any variables in args with data in `event`.

        var args = dereferenceExprsInArgs(actionInfo.args, event);
        var invokeAction = function invokeAction() {
          // For global targets e.g. "AMP, `node` is the document root. Otherwise,
          // `target` is an element id and `node` is the corresponding element.
          var node = _this2.globalTargets_[target] ? _this2.root_ : _this2.root_.getElementById(target);
          if (node) {
            var invocation = new ActionInvocation(node, actionInfo.method, args, source, action.node, event, trust, actionEventType, node.tagName || target, sequenceId);
            return _this2.invoke_(invocation);
          } else {
            _this2.error_('Target "' + target + '" not found for action ' + ('[' + actionInfo.str + '].'));
          }
        };
        // Wait for the previous action, if any.
        currentPromise = currentPromise ? currentPromise.then(invokeAction) : invokeAction();
      });
    }

    /**
     * @param {string} message
     * @param {?Element=} opt_element
     * @private
     */

  }, {
    key: 'error_',
    value: function error_(message, opt_element) {
      if (opt_element) {
        // reportError() supports displaying the element in dev console.
        var e = (0, _log.user)().createError('[' + TAG_ + '] ' + message);
        (0, _error.reportError)(e, opt_element);
        throw e;
      } else {
        (0, _log.user)().error(TAG_, message);
      }
    }

    /**
     * @param {!ActionInvocation} invocation
     * @return {?Promise}
     * @private
     */

  }, {
    key: 'invoke_',
    value: function invoke_(invocation) {
      var method = invocation.method,
          tagOrTarget = invocation.tagOrTarget;

      // Check that this action is whitelisted (if a whitelist is set).

      if (this.whitelist_) {
        var id = tagOrTarget + '.' + method;
        if (!this.whitelist_.includes(id)) {
          this.error_('"' + id + '" is not whitelisted (' + this.whitelist_ + ').');
          return null;
        }
      }

      // Handle global targets e.g. "AMP".
      var globalTarget = this.globalTargets_[tagOrTarget];
      if (globalTarget) {
        return globalTarget(invocation);
      }

      // Subsequent handlers assume that invocation target is an Element.
      var node = (0, _log.dev)().assertElement(invocation.node);

      // Handle global actions e.g. "<any-element-id>.toggle".
      var globalMethod = this.globalMethodHandlers_[method];
      if (globalMethod && invocation.satisfiesTrust(globalMethod.minTrust)) {
        return globalMethod.handler(invocation);
      }

      // Handle element-specific actions.
      var lowerTagName = node.tagName.toLowerCase();
      if (lowerTagName.substring(0, 4) == 'amp-') {
        if (node.enqueAction) {
          node.enqueAction(invocation);
        } else {
          this.error_('Unrecognized AMP element "' + lowerTagName + '".', node);
        }
        return null;
      }

      // Special elements with AMP ID or known supported actions.
      var supportedActions = ELEMENTS_ACTIONS_MAP_[lowerTagName];
      // TODO(dvoytenko, #7063): switch back to `target.id` with form proxy.
      var targetId = node.getAttribute('id') || '';
      if (targetId && targetId.substring(0, 4) == 'amp-' || supportedActions && supportedActions.indexOf(method) > -1) {
        var holder = node[ACTION_HANDLER_];
        if (holder) {
          var handler = holder.handler,
              minTrust = holder.minTrust;

          if (invocation.satisfiesTrust(minTrust)) {
            handler(invocation);
          }
        } else {
          node[ACTION_QUEUE_] = node[ACTION_QUEUE_] || [];
          node[ACTION_QUEUE_].push(invocation);
        }
        return null;
      }

      // Unsupported method.
      this.error_('Target (' + tagOrTarget + ') doesn\'t support "' + method + '" action.', invocation.caller);

      return null;
    }

    /**
     * @param {!Element} target
     * @param {string} actionEventType
     * @param {!Element=} opt_stopAt
     * @return {?{node: !Element, actionInfos: !Array<!ActionInfoDef>}}
     */

  }, {
    key: 'findAction_',
    value: function findAction_(target, actionEventType, opt_stopAt) {
      // Go from target up the DOM tree and find the applicable action.
      var n = target;
      while (n) {
        if (opt_stopAt && n == opt_stopAt) {
          return null;
        }
        var actionInfos = this.matchActionInfos_(n, actionEventType);
        if (actionInfos && (0, _dom.isEnabled)(n)) {
          return { node: n, actionInfos: (0, _log.dev)().assert(actionInfos) };
        }
        n = n.parentElement;
      }
      return null;
    }

    /**
     * @param {!Element} node
     * @param {string} actionEventType
     * @return {?Array<!ActionInfoDef>}
     */

  }, {
    key: 'matchActionInfos_',
    value: function matchActionInfos_(node, actionEventType) {
      var actionMap = this.getActionMap_(node);
      if (!actionMap) {
        return null;
      }
      return actionMap[actionEventType] || null;
    }

    /**
     * @param {!Element} node
     * @return {?Object<string, !Array<!ActionInfoDef>>}
     */

  }, {
    key: 'getActionMap_',
    value: function getActionMap_(node) {
      var actionMap = node[ACTION_MAP_];
      if (actionMap === undefined) {
        actionMap = null;
        if (node.hasAttribute('on')) {
          actionMap = parseActionMap(node.getAttribute('on'), node);
        }
        node[ACTION_MAP_] = actionMap;
      }
      return actionMap;
    }

    /**
     * Resets a node's actions with those defined in the given actions string.
     * @param {!Element} node
     * @param {string} actionsStr
     */

  }, {
    key: 'setActions',
    value: function setActions(node, actionsStr) {
      node.setAttribute('on', actionsStr);

      // Clear cache.
      delete node[ACTION_MAP_];
    }

    /**
     * Searches for a whitelist meta tag, parses and returns its contents.
     *
     * For example:
     * <meta name="amp-action-whitelist" content="AMP.setState, amp-form.submit">
     *
     * Returns:
     * ["AMP.setState", "amp-form.submit"]
     *
     * @return {?Array<string>}
     * @private
     */

  }, {
    key: 'queryWhitelist_',
    value: function queryWhitelist_() {
      var _ampdoc$getRootNode = this.ampdoc.getRootNode(),
          head = _ampdoc$getRootNode.head;

      if (!head) {
        return null;
      }
      var meta = head.querySelector('meta[name="amp-action-whitelist"]');
      if (!meta) {
        return null;
      }
      return meta.getAttribute('content').split(',').map(function (action) {
        return action.trim();
      });
    }

    /**
     * Given a browser 'change' or 'input' event, add `details` property to it
     * containing whitelisted properties of the target element.
     * @param {!ActionEventDef} event
     * @private
     */

  }, {
    key: 'addTargetPropertiesAsDetail_',
    value: function addTargetPropertiesAsDetail_(event) {
      var detail = /** @type {!JsonObject} */(0, _object.map)();
      var target = event.target;


      if (target.value !== undefined) {
        detail['value'] = target.value;
      }

      // Check tagName instead since `valueAsNumber` isn't supported on IE.
      if (target.tagName == 'INPUT') {
        // Probably supported natively but convert anyways for consistency.
        detail['valueAsNumber'] = Number(target.value);
      }

      if (target.checked !== undefined) {
        detail['checked'] = target.checked;
      }

      if (target.min !== undefined || target.max !== undefined) {
        detail['min'] = target.min;
        detail['max'] = target.max;
      }

      if (Object.keys(detail).length > 0) {
        event.detail = detail;
      }
    }
  }]);

  return ActionService;
}();

/**
 * A clone of an event object with its function properties replaced.
 * This is useful e.g. for event objects that need to be passed to an async
 * context, but the browser might have cleaned up the original event object.
 * This clone replaces functions with error throws since they won't behave
 * normally after the original object has been destroyed.
 * @private visible for testing
 */


var DeferredEvent =
/**
 * @param {!Event} event
 */
exports.DeferredEvent = function DeferredEvent(event) {
  _classCallCheck(this, DeferredEvent);

  /** @type {?Object} */
  this.detail = null;

  cloneWithoutFunctions(event, this);
};

/**
 * Clones an object and replaces its function properties with throws.
 * @param {!T} original
 * @param {!T=} opt_dest
 * @return {!T}
 * @template T
 * @private
 */


function cloneWithoutFunctions(original, opt_dest) {
  var clone = opt_dest || (0, _object.map)();
  for (var prop in original) {
    var value = original[prop];
    if (typeof value === 'function') {
      clone[prop] = notImplemented;
    } else {
      clone[prop] = original[prop];
    }
  }
  return clone;
}

/** @private */
function notImplemented() {
  (0, _log.dev)().assert(null, 'Deferred events cannot access native event functions.');
}

/**
 * @param {string} s
 * @param {!Element} context
 * @return {?Object<string, !Array<!ActionInfoDef>>}
 * @private Visible for testing only.
 */
function parseActionMap(s, context) {
  var assertAction = assertActionForParser.bind(null, s, context);
  var assertToken = assertTokenForParser.bind(null, s, context);

  var actionMap = null;

  var toks = new ParserTokenizer(s);
  var tok = void 0;
  var peek = void 0;
  do {
    tok = toks.next();
    if (tok.type == TokenType.EOF || tok.type == TokenType.SEPARATOR && tok.value == ';') {
      // Expected, ignore.
    } else if (tok.type == TokenType.LITERAL || tok.type == TokenType.ID) {

      // Format: event:target.method

      // Event: "event:"
      var event = tok.value;

      // Target: ":target." separator
      assertToken(toks.next(), [TokenType.SEPARATOR], ':');

      var actions = [];

      // Handlers for event
      do {
        var target = assertToken(toks.next(), [TokenType.LITERAL, TokenType.ID]).value;

        // Method: ".method". Method is optional.
        var method = DEFAULT_METHOD_;
        var args = null;

        peek = toks.peek();
        if (peek.type == TokenType.SEPARATOR && peek.value == '.') {
          toks.next(); // Skip '.'
          method = assertToken(toks.next(), [TokenType.LITERAL, TokenType.ID]).value || method;

          // Optionally, there may be arguments: "(key = value, key = value)".
          peek = toks.peek();
          if (peek.type == TokenType.SEPARATOR && peek.value == '(') {
            toks.next(); // Skip '('
            args = tokenizeMethodArguments(toks, assertToken, assertAction);
          }
        }

        actions.push({
          event: event,
          target: target,
          method: method,
          args: args && (0, _mode.getMode)().test && Object.freeze ? Object.freeze(args) : args,
          str: s
        });

        peek = toks.peek();
      } while (peek.type == TokenType.SEPARATOR && peek.value == ',' && toks.next()); // skip "," when found

      if (!actionMap) {
        actionMap = (0, _object.map)();
      }

      actionMap[event] = actions;
    } else {
      // Unexpected token.
      assertAction(false, '; unexpected token [' + (tok.value || '') + ']');
    }
  } while (tok.type != TokenType.EOF);

  return actionMap;
}

/**
 * Tokenizes and returns method arguments, e.g. target.method(arguments).
 * @param {!ParserTokenizer} toks
 * @param {!Function} assertToken
 * @param {!Function} assertAction
 * @return {ActionInfoArgsDef}
 * @private
 */
function tokenizeMethodArguments(toks, assertToken, assertAction) {
  var peek = toks.peek();
  var tok = void 0;
  var args = null;
  // Object literal. Format: {...}
  if (peek.type == TokenType.OBJECT) {
    // Don't parse object literals. Tokenize as a single expression
    // fragment and delegate to specific action handler.
    args = (0, _object.map)();

    var _toks$next = toks.next(),
        value = _toks$next.value;

    args[_actionConstants.RAW_OBJECT_ARGS_KEY] = value;
    assertToken(toks.next(), [TokenType.SEPARATOR], ')');
  } else {
    // Key-value pairs. Format: key = value, ....
    do {
      tok = toks.next();
      var _tok = tok,
          type = _tok.type,
          _value = _tok.value;

      if (type == TokenType.SEPARATOR && (_value == ',' || _value == ')')) {
        // Expected: ignore.
      } else if (type == TokenType.LITERAL || type == TokenType.ID) {
        // Key: "key = "
        assertToken(toks.next(), [TokenType.SEPARATOR], '=');
        // Value is either a literal or an expression: "foo.bar.baz"
        tok = assertToken(toks.next( /* convertValue */true), [TokenType.LITERAL, TokenType.ID]);
        var argValueTokens = [tok];
        // Expressions have one or more dereferences: ".identifier"
        if (tok.type == TokenType.ID) {
          for (peek = toks.peek(); peek.type == TokenType.SEPARATOR && peek.value == '.'; peek = toks.peek()) {
            toks.next(); // Skip '.'.
            tok = assertToken(toks.next(false), [TokenType.ID]);
            argValueTokens.push(tok);
          }
        }
        var argValue = argValueForTokens(argValueTokens);
        if (!args) {
          args = (0, _object.map)();
        }
        args[_value] = argValue;
        peek = toks.peek();
        assertAction(peek.type == TokenType.SEPARATOR && (peek.value == ',' || peek.value == ')'), 'Expected either [,] or [)]');
      } else {
        // Unexpected token.
        assertAction(false, '; unexpected token [' + (tok.value || '') + ']');
      }
    } while (!(tok.type == TokenType.SEPARATOR && tok.value == ')'));
  }
  return args;
}

/**
 * @param {Array<!TokenDef>} tokens
 * @return {?ActionInfoArgValueDef}
 * @private
 */
function argValueForTokens(tokens) {
  if (tokens.length == 0) {
    return null;
  } else if (tokens.length == 1) {
    return (/** @type {(boolean|number|string)} */tokens[0].value
    );
  } else {
    var values = tokens.map(function (token) {
      return token.value;
    });
    var expression = values.join('.');
    return (/** @type {ActionInfoArgExpressionDef} */{ expression: expression }
    );
  }
}

/**
 * Dereferences expression args in `args` using data in `event`.
 * @param {?ActionInfoArgsDef} args
 * @param {?ActionEventDef} event
 * @return {?JsonObject}
 * @private
 * @visibleForTesting
 */
function dereferenceExprsInArgs(args, event) {
  if (!args) {
    return args;
  }
  var data = (0, _object.dict)();
  if (event && (0, _eventHelper.getDetail)( /** @type {!Event} */event)) {
    data['event'] = (0, _eventHelper.getDetail)( /** @type {!Event} */event);
  }
  var applied = (0, _object.map)();
  Object.keys(args).forEach(function (key) {
    var value = args[key];
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value.expression) {
      var expr =
      /** @type {ActionInfoArgExpressionDef} */value.expression;
      var exprValue = (0, _json.getValueForExpr)(data, expr);
      // If expr can't be found in data, use null instead of undefined.
      value = exprValue === undefined ? null : exprValue;
    }
    applied[key] = value;
  });
  return applied;
}

/**
 * @param {string} s
 * @param {!Element} context
 * @param {?T} condition
 * @param {string=} opt_message
 * @return {T}
 * @template T
 * @private
 */
function assertActionForParser(s, context, condition, opt_message) {
  return (0, _log.user)().assert(condition, 'Invalid action definition in %s: [%s] %s', context, s, opt_message || '');
}

/**
 * @param {string} s
 * @param {!Element} context
 * @param {!TokenDef} tok
 * @param {Array<TokenType>} types
 * @param {*=} opt_value
 * @return {!TokenDef}
 * @private
 */
function assertTokenForParser(s, context, tok, types, opt_value) {
  if (opt_value !== undefined) {
    assertActionForParser(s, context, types.includes(tok.type) && tok.value == opt_value, '; expected [' + opt_value + ']');
  } else {
    assertActionForParser(s, context, types.includes(tok.type));
  }
  return tok;
}

/**
 * @enum {number}
 */
var TokenType = {
  INVALID: 0,
  EOF: 1,
  SEPARATOR: 2,
  LITERAL: 3,
  ID: 4,
  OBJECT: 5
};

/**
 * @typedef {{type: TokenType, value: *}}
 */
var TokenDef = void 0;

/** @private @const {string} */
var WHITESPACE_SET = ' \t\n\r\f\x0B\xA0\u2028\u2029';

/** @private @const {string} */
var SEPARATOR_SET = ';:.()=,|!';

/** @private @const {string} */
var STRING_SET = '"\'';

/** @private @const {string} */
var OBJECT_SET = '{}';

/** @private @const {string} */
var SPECIAL_SET = WHITESPACE_SET + SEPARATOR_SET + STRING_SET + OBJECT_SET;

/** @private */

var ParserTokenizer = function () {
  /**
   * @param {string} str
   */
  function ParserTokenizer(str) {
    _classCallCheck(this, ParserTokenizer);

    /** @private @const {string} */
    this.str_ = str;

    /** @private {number} */
    this.index_ = -1;
  }

  /**
   * Returns the next token and advances the position.
   * @param {boolean=} opt_convertValues
   * @return {!TokenDef}
   */


  _createClass(ParserTokenizer, [{
    key: 'next',
    value: function next(opt_convertValues) {
      var tok = this.next_(opt_convertValues || false);
      this.index_ = tok.index;
      return tok;
    }

    /**
     * Returns the next token but keeps the current position.
     * @param {boolean=} opt_convertValues
     * @return {!TokenDef}
     */

  }, {
    key: 'peek',
    value: function peek(opt_convertValues) {
      return this.next_(opt_convertValues || false);
    }

    /**
     * @param {boolean} convertValues
     * @return {!{type: TokenType, value: *, index: number}}
     */

  }, {
    key: 'next_',
    value: function next_(convertValues) {
      var newIndex = this.index_ + 1;
      if (newIndex >= this.str_.length) {
        return { type: TokenType.EOF, index: this.index_ };
      }

      var c = this.str_.charAt(newIndex);

      // Whitespace: standard set.
      if (WHITESPACE_SET.indexOf(c) != -1) {
        newIndex++;
        for (; newIndex < this.str_.length; newIndex++) {
          if (WHITESPACE_SET.indexOf(this.str_.charAt(newIndex)) == -1) {
            break;
          }
        }
        if (newIndex >= this.str_.length) {
          return { type: TokenType.EOF, index: newIndex };
        }
        c = this.str_.charAt(newIndex);
      }

      // A numeric. Notice that it steals the `.` from separators.
      if (convertValues && (isNum(c) || c == '.' && newIndex + 1 < this.str_.length && isNum(this.str_[newIndex + 1]))) {
        var hasFraction = c == '.';
        var _end = newIndex + 1;
        for (; _end < this.str_.length; _end++) {
          var c2 = this.str_.charAt(_end);
          if (c2 == '.') {
            hasFraction = true;
            continue;
          }
          if (!isNum(c2)) {
            break;
          }
        }
        var _s = this.str_.substring(newIndex, _end);
        var value = hasFraction ? parseFloat(_s) : parseInt(_s, 10);
        newIndex = _end - 1;
        return { type: TokenType.LITERAL, value: value, index: newIndex };
      }

      // Different separators.
      if (SEPARATOR_SET.indexOf(c) != -1) {
        return { type: TokenType.SEPARATOR, value: c, index: newIndex };
      }

      // String literal.
      if (STRING_SET.indexOf(c) != -1) {
        var _end2 = -1;
        for (var i = newIndex + 1; i < this.str_.length; i++) {
          if (this.str_.charAt(i) == c) {
            _end2 = i;
            break;
          }
        }
        if (_end2 == -1) {
          return { type: TokenType.INVALID, index: newIndex };
        }
        var _value2 = this.str_.substring(newIndex + 1, _end2);
        newIndex = _end2;
        return { type: TokenType.LITERAL, value: _value2, index: newIndex };
      }

      // Object literal.
      if (c == '{') {
        var numberOfBraces = 1;
        var _end3 = -1;
        for (var _i = newIndex + 1; _i < this.str_.length; _i++) {
          var char = this.str_[_i];
          if (char == '{') {
            numberOfBraces++;
          } else if (char == '}') {
            numberOfBraces--;
          }
          if (numberOfBraces <= 0) {
            _end3 = _i;
            break;
          }
        }
        if (_end3 == -1) {
          return { type: TokenType.INVALID, index: newIndex };
        }
        var _value3 = this.str_.substring(newIndex, _end3 + 1);
        newIndex = _end3;
        return { type: TokenType.OBJECT, value: _value3, index: newIndex };
      }

      // Advance until next special character.
      var end = newIndex + 1;
      for (; end < this.str_.length; end++) {
        if (SPECIAL_SET.indexOf(this.str_.charAt(end)) != -1) {
          break;
        }
      }
      var s = this.str_.substring(newIndex, end);
      newIndex = end - 1;

      // Boolean literal.
      if (convertValues && (s == 'true' || s == 'false')) {
        var _value4 = s == 'true';
        return { type: TokenType.LITERAL, value: _value4, index: newIndex };
      }

      // Identifier.
      if (!isNum(s.charAt(0))) {
        return { type: TokenType.ID, value: s, index: newIndex };
      }

      // Key.
      return { type: TokenType.LITERAL, value: s, index: newIndex };
    }
  }]);

  return ParserTokenizer;
}();

/**
 * Tests whether a chacter is a number.
 * @param {string} c
 * @return {boolean}
 */


function isNum(c) {
  return c >= '0' && c <= '9';
}

/**
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 */
function installActionServiceForDoc(ampdoc) {
  (0, _service.registerServiceBuilderForDoc)(ampdoc, 'action', ActionService,
  /* opt_instantiate */true);
}

},{"../action-constants":8,"../dom":22,"../error":25,"../event-helper":27,"../json":40,"../log":45,"../mode":47,"../service":63,"../services":104,"../types":113,"../utils/key-codes":121,"../utils/object":123,"../utils/rate-limit":126}],65:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmpDocShell = exports.AmpDocShadow = exports.AmpDocSingle = exports.AmpDoc = exports.AmpDocService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.installDocService = installDocService;

var _promise = require('../utils/promise');

var _signals = require('../utils/signals');

var _log = require('../log');

var _service = require('../service');

var _shadowEmbed = require('../shadow-embed');

var _documentReady = require('../document-ready');

var _experiments = require('../experiments');

var _dom = require('../dom');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @const {string} */
var AMPDOC_PROP = '__AMPDOC';

/**
 * This service helps locate an ampdoc (`AmpDoc` instance) for any node,
 * either in the single-doc or shadow-doc environments.
 *
 * In the single-doc environment an ampdoc is equivalent to the
 * `window.document`. In the shadow-doc mode, any number of AMP documents
 * could be hosted in shadow roots in the same global `window.document`.
 *
 * @package
 */

var AmpDocService = exports.AmpDocService = function () {
  /**
   * @param {!Window} win
   * @param {boolean} isSingleDoc
   */
  function AmpDocService(win, isSingleDoc) {
    _classCallCheck(this, AmpDocService);

    /** @const {!Window} */
    this.win = win;

    /** @private {?AmpDoc} */
    this.singleDoc_ = null;
    if (isSingleDoc) {
      this.singleDoc_ = new AmpDocSingle(win);
    }

    /** Guarded by 'ampdoc-shell' experiment
     * @private {?AmpDocShell}
     */
    this.shellShadowDoc_ = null;
  }

  /**
   * Whether the runtime in the single-doc mode. Alternative is the shadow-doc
   * mode that supports multiple documents per a single window.
   * @return {boolean}
   */


  _createClass(AmpDocService, [{
    key: 'isSingleDoc',
    value: function isSingleDoc() {
      return !!this.singleDoc_;
    }

    /**
     * Whether if an `AmpDocShell` has been installed for the runtime.
     * @return {boolean}
     */

  }, {
    key: 'hasAmpDocShell',
    value: function hasAmpDocShell() {
      return !!this.shellShadowDoc_;
    }

    /**
     * Returns the instance of the ampdoc (`AmpDoc`) that contains the specified
     * node. If the runtime is in the single-doc mode, the one global `AmpDoc`
     * instance is always returned. Otherwise, this method locates the `AmpDoc`
     * that contains the specified node and, if necessary, initializes it.
     *
     * @param {!Node=} opt_node
     * @return {!AmpDoc}
     */

  }, {
    key: 'getAmpDoc',
    value: function getAmpDoc(opt_node) {
      // Ensure that node is attached if specified. This check uses a new and
      // fast `isConnected` API and thus only checked on platforms that have it.
      // See https://www.chromestatus.com/feature/5676110549352448.
      if (opt_node) {
        (0, _log.dev)().assert(opt_node['isConnected'] === undefined || opt_node['isConnected'] === true, 'The node must be attached to request ampdoc.');
      }

      // Single document: return it immediately.
      if (this.singleDoc_) {
        return this.singleDoc_;
      }

      // Multiple documents and AmpDocShell requested
      if ((0, _experiments.isExperimentOn)(this.win, 'ampdoc-shell') && opt_node === this.win.document) {
        if (this.shellShadowDoc_) {
          return this.shellShadowDoc_;
        } else {
          throw (0, _log.dev)().createError('Ampdoc for shell has not been installed');
        }
      }

      (0, _log.dev)().assert(opt_node);
      // Otherwise discover and possibly create the ampdoc.
      var n = opt_node;
      while (n) {
        // A custom element may already have the reference to the ampdoc.
        if (n.ampdoc_) {
          return n.ampdoc_;
        }

        // Traverse the boundary of a friendly iframe.
        var frameElement = (0, _service.getParentWindowFrameElement)(n, this.win);
        if (frameElement) {
          n = frameElement;
          continue;
        }

        // Shadow doc.
        var shadowRoot = (0, _shadowEmbed.getShadowRootNode)(n);
        if (!shadowRoot) {
          // If not inside a shadow root, it may belong to AmpDocShell
          if (this.shellShadowDoc_) {
            return this.shellShadowDoc_;
          }
          break;
        }

        var ampdoc = shadowRoot[AMPDOC_PROP];
        if (ampdoc) {
          return ampdoc;
        }
        n = shadowRoot.host;
      }

      throw (0, _log.dev)().createError('No ampdoc found for', opt_node);
    }

    /**
     * Creates and installs the ampdoc for the shadow root.
     * @param {string} url
     * @param {!ShadowRoot} shadowRoot
     * @return {!AmpDocShadow}
     * @restricted
     */

  }, {
    key: 'installShadowDoc',
    value: function installShadowDoc(url, shadowRoot) {
      (0, _log.dev)().assert(!shadowRoot[AMPDOC_PROP], 'The shadow root already contains ampdoc');
      var ampdoc = new AmpDocShadow(this.win, url, shadowRoot);
      shadowRoot[AMPDOC_PROP] = ampdoc;
      return ampdoc;
    }

    /**
     * Creates and installs an ampdoc for the shell in shadow-doc mode.
     * `AmpDocShell` is a subclass of `AmpDocShadow` that is installed for
     * `window.document` and allows to use AMP components as part of the shell,
     * outside shadow roots
     *
     * Currently guarded by 'ampdoc-shell' experiment
     *
     * @return {!AmpDocShell}
     * @restricted
     */

  }, {
    key: 'installShellShadowDoc',
    value: function installShellShadowDoc() {
      var _this = this;

      (0, _log.dev)().assert(this.singleDoc_ === null, 'AmpDocShell cannot be installed in single-doc mode');
      this.shellShadowDoc_ = new AmpDocShell(this.win);
      this.win.document[AMPDOC_PROP] = this.shellShadowDoc_;

      (0, _documentReady.whenDocumentReady)(this.win.document).then(function (document) {
        _this.shellShadowDoc_.setBody((0, _log.dev)().assertElement(document.body));
        _this.shellShadowDoc_.setReady();
      });

      return this.shellShadowDoc_;
    }
  }]);

  return AmpDocService;
}();

/**
 * This class represents a single ampdoc. `AmpDocService` can contain only one
 * global ampdoc or multiple, depending on the runtime mode: single-doc or
 * shadow-doc.
 * @abstract
 * @package
 */


var AmpDoc = exports.AmpDoc = function () {
  /**
   * @param {!Window} win
   */
  function AmpDoc(win) {
    _classCallCheck(this, AmpDoc);

    /** @public @const {!Window} */
    this.win = win;

    /** @private @const */
    this.signals_ = new _signals.Signals();

    /** @private @const {!Array<string>} */
    this.declaredExtensions_ = [];
  }

  /**
   * Whether the runtime in the single-doc mode. Alternative is the shadow-doc
   * mode that supports multiple documents per a single window.
   * @return {boolean}
   */


  _createClass(AmpDoc, [{
    key: 'isSingleDoc',
    value: function isSingleDoc() {
      return (/** @type {?} */(0, _log.dev)().assert(null, 'not implemented')
      );
    }

    /**
     * DO NOT CALL. Retained for backward compat during rollout.
     * @return {!Window}
     * @deprecated Use `ampdoc.win` instead.
     */

  }, {
    key: 'getWin',
    value: function getWin() {
      return this.win;
    }

    /** @return {!Signals} */

  }, {
    key: 'signals',
    value: function signals() {
      return this.signals_;
    }

    /**
     * Returns whether the specified extension has been declared on this ampdoc.
     * @param {string} extensionId
     * @return {boolean}
     */

  }, {
    key: 'declaresExtension',
    value: function declaresExtension(extensionId) {
      return this.declaredExtensions_.indexOf(extensionId) != -1;
    }

    /**
     * Adds a declared extension to an ampdoc.
     * @param {string} extensionId
     * @restricted
     */

  }, {
    key: 'declareExtension',
    value: function declareExtension(extensionId) {
      if (!this.declaresExtension(extensionId)) {
        this.declaredExtensions_.push(extensionId);
      }
    }

    /**
     * Returns the root node for this ampdoc. It will either be a `Document` for
     * the single-doc runtime mode, or a `ShadowRoot` for shadow-doc mode. This
     * node can be used, among other things, to add ampdoc-wide event listeners.
     *
     * @return {!Document|!ShadowRoot}
     */

  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return (/** @type {?} */(0, _log.dev)().assert(null, 'not implemented')
      );
    }

    /**
     * Returns the head node. It's either an element or a shadow root.
     * @return {!Element|!ShadowRoot}
     * @abstract
     */

  }, {
    key: 'getHeadNode',
    value: function getHeadNode() {}

    /**
     * Returns `true` if the ampdoc's body is available.
     *
     * @return {boolean}
     */

  }, {
    key: 'isBodyAvailable',
    value: function isBodyAvailable() {
      return (/** @type {?} */(0, _log.dev)().assert(false, 'not implemented')
      );
    }

    /**
     * Returns the ampdoc's body. Requires the body to already be available.
     *
     * See `isBodyAvailable` and `whenBodyAvailable`.
     *
     * @return {!Element}
     */

  }, {
    key: 'getBody',
    value: function getBody() {
      return (0, _log.dev)().assertElement(null, 'not implemented');
    }

    /**
     * Returns a promise that will be resolved when the ampdoc's body is
     * available.
     * @return {!Promise<!Element>}
     */

  }, {
    key: 'whenBodyAvailable',
    value: function whenBodyAvailable() {
      return (/** @type {?} */(0, _log.dev)().assert(null, 'not implemented')
      );
    }

    /**
     * Returns `true` if document is ready.
     *
     * See `whenReady`.
     *
     * @return {boolean}
     */

  }, {
    key: 'isReady',
    value: function isReady() {
      return (/** @type {?} */(0, _log.dev)().assert(null, 'not implemented')
      );
    }

    /**
     * Returns a promise that will be resolved when the ampdoc's DOM is fully
     * ready.
     * @return {!Promise}
     */

  }, {
    key: 'whenReady',
    value: function whenReady() {
      return (/** @type {?} */(0, _log.dev)().assert(null, 'not implemented')
      );
    }

    /**
     * Returns the URL from which the document was loaded.
     * @return {string}
     */

  }, {
    key: 'getUrl',
    value: function getUrl() {
      return (0, _log.dev)().assertString(null, 'not implemented');
    }

    /**
     * Locates an element with the specified ID within the ampdoc. In the
     * shadow-doc mode, when multiple documents could be present, this method
     * localizes search only to the DOM subtree specific to this ampdoc.
     *
     * @param {string} id
     * @return {?Element}
     */

  }, {
    key: 'getElementById',
    value: function getElementById(id) {
      return this.getRootNode().getElementById(id);
    }

    /**
     * Whether the node is currently contained in the DOM of the root.
     * @param {?Node} node
     * @return {boolean}
     */

  }, {
    key: 'contains',
    value: function contains(node) {
      return this.getRootNode().contains(node);
    }
  }]);

  return AmpDoc;
}();

/**
 * The version of `AmpDoc` in the single-doc mode that corresponds to the
 * global `window.document`.
 * @package @visibleForTesting
 */


var AmpDocSingle = exports.AmpDocSingle = function (_AmpDoc) {
  _inherits(AmpDocSingle, _AmpDoc);

  /**
   * @param {!Window} win
   */
  function AmpDocSingle(win) {
    _classCallCheck(this, AmpDocSingle);

    /** @private @const {!Promise<!Element>} */
    var _this2 = _possibleConstructorReturn(this, (AmpDocSingle.__proto__ || Object.getPrototypeOf(AmpDocSingle)).call(this, win));

    _this2.bodyPromise_ = _this2.win.document.body ? Promise.resolve(_this2.win.document.body) : (0, _dom.waitForBodyPromise)(_this2.win.document).then(function () {
      return _this2.getBody();
    });

    /** @private @const {!Promise} */
    _this2.readyPromise_ = (0, _documentReady.whenDocumentReady)(_this2.win.document);
    return _this2;
  }

  /** @override */


  _createClass(AmpDocSingle, [{
    key: 'isSingleDoc',
    value: function isSingleDoc() {
      return true;
    }

    /** @override */

  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return this.win.document;
    }

    /** @override */

  }, {
    key: 'getUrl',
    value: function getUrl() {
      return this.win.location.href;
    }

    /** @override */

  }, {
    key: 'getHeadNode',
    value: function getHeadNode() {
      return (0, _log.dev)().assertElement(this.win.document.head);
    }

    /** @override */

  }, {
    key: 'isBodyAvailable',
    value: function isBodyAvailable() {
      return !!this.win.document.body;
    }

    /** @override */

  }, {
    key: 'getBody',
    value: function getBody() {
      return (0, _log.dev)().assertElement(this.win.document.body, 'body not available');
    }

    /** @override */

  }, {
    key: 'whenBodyAvailable',
    value: function whenBodyAvailable() {
      return this.bodyPromise_;
    }

    /** @override */

  }, {
    key: 'isReady',
    value: function isReady() {
      return (0, _documentReady.isDocumentReady)(this.win.document);
    }

    /** @override */

  }, {
    key: 'whenReady',
    value: function whenReady() {
      return this.readyPromise_;
    }
  }]);

  return AmpDocSingle;
}(AmpDoc);

/**
 * The version of `AmpDoc` in the shadow-doc mode that is allocated for each
 * ampdoc hosted within a shadow root.
 * @package @visibleForTesting
 */


var AmpDocShadow = exports.AmpDocShadow = function (_AmpDoc2) {
  _inherits(AmpDocShadow, _AmpDoc2);

  /**
   * @param {!Window} win
   * @param {string} url
   * @param {!ShadowRoot} shadowRoot
   */
  function AmpDocShadow(win, url, shadowRoot) {
    _classCallCheck(this, AmpDocShadow);

    /** @private @const {string} */
    var _this3 = _possibleConstructorReturn(this, (AmpDocShadow.__proto__ || Object.getPrototypeOf(AmpDocShadow)).call(this, win));

    _this3.url_ = url;
    /** @private @const {!ShadowRoot} */
    _this3.shadowRoot_ = shadowRoot;

    /** @private {?Element} */
    _this3.body_ = null;

    var bodyDeferred = new _promise.Deferred();

    /** @private {!Promise<!Element>} */
    _this3.bodyPromise_ = bodyDeferred.promise;

    /** @private {function(!Element)|undefined} */
    _this3.bodyResolver_ = bodyDeferred.resolve;

    /** @private {boolean} */
    _this3.ready_ = false;

    var readyDeferred = new _promise.Deferred();

    /** @private {!Promise} */
    _this3.readyPromise_ = readyDeferred.promise;

    /** @private {function()|undefined} */
    _this3.readyResolver_ = readyDeferred.resolve;
    return _this3;
  }

  /** @override */


  _createClass(AmpDocShadow, [{
    key: 'isSingleDoc',
    value: function isSingleDoc() {
      return false;
    }

    /** @override */

  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return this.shadowRoot_;
    }

    /** @override */

  }, {
    key: 'getUrl',
    value: function getUrl() {
      return this.url_;
    }

    /** @override */

  }, {
    key: 'getHeadNode',
    value: function getHeadNode() {
      return this.shadowRoot_;
    }

    /** @override */

  }, {
    key: 'isBodyAvailable',
    value: function isBodyAvailable() {
      return !!this.body_;
    }

    /** @override */

  }, {
    key: 'getBody',
    value: function getBody() {
      return (0, _log.dev)().assertElement(this.body_, 'body not available');
    }

    /**
     * Signals that the shadow doc has a body.
     * @param {!Element} body
     * @restricted
     */

  }, {
    key: 'setBody',
    value: function setBody(body) {
      (0, _log.dev)().assert(!this.body_, 'Duplicate body');
      this.body_ = body;
      this.bodyResolver_(body);
      this.bodyResolver_ = undefined;
    }

    /** @override */

  }, {
    key: 'whenBodyAvailable',
    value: function whenBodyAvailable() {
      return this.bodyPromise_;
    }

    /** @override */

  }, {
    key: 'isReady',
    value: function isReady() {
      return this.ready_;
    }

    /**
     * Signals that the shadow doc is ready.
     * @restricted
     */

  }, {
    key: 'setReady',
    value: function setReady() {
      (0, _log.dev)().assert(!this.ready_, 'Duplicate ready state');
      this.ready_ = true;
      this.readyResolver_();
      this.readyResolver_ = undefined;
    }

    /** @override */

  }, {
    key: 'whenReady',
    value: function whenReady() {
      return this.readyPromise_;
    }
  }]);

  return AmpDocShadow;
}(AmpDoc);

/**
 * AmpDocShadow for the shell
 * @package @visibleForTesting
 */


var AmpDocShell = exports.AmpDocShell = function (_AmpDocShadow) {
  _inherits(AmpDocShell, _AmpDocShadow);

  // TODO(choumx): win.document is not a ShadowRoot, which is required by the
  // super constructor.
  // eslint-disable-next-line require-jsdoc
  function AmpDocShell(win) {
    _classCallCheck(this, AmpDocShell);

    return _possibleConstructorReturn(this, (AmpDocShell.__proto__ || Object.getPrototypeOf(AmpDocShell)).call(this, win, win.location.href, win.document));
  }

  /** @override */


  _createClass(AmpDocShell, [{
    key: 'getHeadNode',
    value: function getHeadNode() {
      return (0, _log.dev)().assertElement(this.win.document.head);
    }
  }]);

  return AmpDocShell;
}(AmpDocShadow);

/**
 * Install the ampdoc service and immediately configure it for either a
 * single-doc or a shadow-doc mode. The mode cannot be changed after the
 * initial configuration.
 * @param {!Window} win
 * @param {boolean} isSingleDoc
 */


function installDocService(win, isSingleDoc) {
  (0, _service.registerServiceBuilder)(win, 'ampdoc', function () {
    return new AmpDocService(win, isSingleDoc);
  });
}

},{"../document-ready":20,"../dom":22,"../experiments":28,"../log":45,"../service":63,"../shadow-embed":105,"../utils/promise":125,"../utils/signals":127}],66:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchedXhr = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.batchedXhrServiceForTesting = batchedXhrServiceForTesting;
exports.installBatchedXhrService = installBatchedXhrService;

var _xhrImpl = require('./xhr-impl');

var _service = require('../service');

var _object = require('../utils/object');

var _url = require('../url');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * A wrapper around the Xhr service which batches the result of GET requests
 *
 * @package Visible for type.
 * @visibleForTesting
 */
var BatchedXhr = exports.BatchedXhr = function (_Xhr) {
  _inherits(BatchedXhr, _Xhr);

  /**
   * @param {!Window} win
   */
  function BatchedXhr(win) {
    _classCallCheck(this, BatchedXhr);

    /** @const {!Object<!Promise<!../utils/xhr-utils.FetchResponse>>} */
    var _this = _possibleConstructorReturn(this, (BatchedXhr.__proto__ || Object.getPrototypeOf(BatchedXhr)).call(this, win));

    _this.fetchPromises_ = (0, _object.map)();
    return _this;
  }

  /**
   * Fetch and batch the requests if possible.
   *
   * @param {string} input URL
   * @param {?../utils/xhr-utils.FetchInitDef=} opt_init Fetch options object.
   * @return {!Promise<!../utils/xhr-utils.FetchResponse>}
   * @override
   */


  _createClass(BatchedXhr, [{
    key: 'fetch',
    value: function fetch(input, opt_init) {
      var _this2 = this;

      var accept = opt_init && opt_init.headers && opt_init.headers['Accept'] || '';
      var isBatchable = !opt_init || !opt_init.method || opt_init.method === 'GET';
      var key = this.getMapKey_(input, accept);
      var isBatched = !!this.fetchPromises_[key];

      if (isBatchable && isBatched) {
        return this.fetchPromises_[key].then(function (response) {
          return response.clone();
        });
      }

      var fetchPromise = _get(BatchedXhr.prototype.__proto__ || Object.getPrototypeOf(BatchedXhr.prototype), 'fetch', this).call(this, input, opt_init);

      if (isBatchable) {
        this.fetchPromises_[key] = fetchPromise.then(function (response) {
          delete _this2.fetchPromises_[key];
          return response.clone();
        }, function (err) {
          delete _this2.fetchPromises_[key];
          throw err;
        });
      }

      return fetchPromise;
    }

    /**
     * Creates a map key for a fetch.
     *
     * @param {string} input URL
     * @param {string} responseType
     * @return {string}
     * @private
     */

  }, {
    key: 'getMapKey_',
    value: function getMapKey_(input, responseType) {
      return (0, _url.removeFragment)(input) + responseType;
    }
  }]);

  return BatchedXhr;
}(_xhrImpl.Xhr);

/**
 * @param {!Window} window
 * @return {!BatchedXhr}
 */


function batchedXhrServiceForTesting(window) {
  installBatchedXhrService(window);
  return (0, _service.getService)(window, 'batched-xhr');
}

/**
 * @param {!Window} window
 */
function installBatchedXhrService(window) {
  (0, _service.registerServiceBuilder)(window, 'batched-xhr', BatchedXhr);
}

},{"../service":63,"../url":116,"../utils/object":123,"./xhr-impl":103}],67:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheCidApi = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2018 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _services = require('../services');

var _log = require('../log');

var _object = require('../utils/object');

var _url = require('../url');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The Client ID service key.
 * @const @private {string}
 */
var SERVICE_KEY_ = 'AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc';

/**
 * Tag for debug logging.
 * @const @private {string}
 */
var TAG_ = 'CacheCidApi';

/**
 * The URL for the cache-served CID API.
 * @const @private {string}
 */
var CACHE_API_URL = 'https://ampcid.google.com/v1/cache:getClientId?key=';

/**
 * The XHR timeout in milliseconds for requests to the CID API.
 * @const @private {number}
 */
var TIMEOUT_ = 30000;

/**
 * Exposes CID API for cache-served pages without a viewer.
 */

var CacheCidApi = exports.CacheCidApi = function () {

  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
  function CacheCidApi(ampdoc) {
    _classCallCheck(this, CacheCidApi);

    /** @private {!./ampdoc-impl.AmpDoc} */
    this.ampdoc_ = ampdoc;

    /** @private {!./viewer-impl.Viewer} */
    this.viewer_ = _services.Services.viewerForDoc(this.ampdoc_);

    /** @private {?Promise<?string>} */
    this.publisherCidPromise_ = null;

    /** @private {!./timer-impl.Timer} */
    this.timer_ = _services.Services.timerFor(this.ampdoc_.win);
  }

  /**
   * Returns true if the page is embedded in CCT and is served by a proxy.
   * @return {boolean}
   */


  _createClass(CacheCidApi, [{
    key: 'isSupported',
    value: function isSupported() {
      return this.viewer_.isCctEmbedded() && this.viewer_.isProxyOrigin();
    }

    /**
     * Returns scoped CID retrieved from the Viewer.
     * @param {string} scope
     * @return {!Promise<?string>}
     */

  }, {
    key: 'getScopedCid',
    value: function getScopedCid(scope) {
      var _this = this;

      if (!this.viewer_.isCctEmbedded()) {
        return (/** @type {!Promise<?string>} */Promise.resolve(null)
        );
      }

      if (!this.publisherCidPromise_) {
        var url = CACHE_API_URL + SERVICE_KEY_;
        this.publisherCidPromise_ = this.fetchCid_(url);
      }

      return this.publisherCidPromise_.then(function (publisherCid) {
        return publisherCid ? _this.scopeCid_(publisherCid, scope) : null;
      });
    }

    /**
     * Returns scoped CID retrieved from the Viewer.
     * @param {string} url
     * @param {boolean=} useAlternate
     * @return {!Promise<?string>}
     */

  }, {
    key: 'fetchCid_',
    value: function fetchCid_(url) {
      var _this2 = this;

      var useAlternate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var payload = (0, _object.dict)({
        'publisherOrigin': (0, _url.getSourceOrigin)(this.ampdoc_.win.location)
      });

      // Make the XHR request to the cache endpoint.
      return this.timer_.timeoutPromise(TIMEOUT_, _services.Services.xhrFor(this.ampdoc_.win).fetchJson(url, {
        method: 'POST',
        ampCors: false,
        credentials: 'include',
        mode: 'cors',
        body: payload
      })).then(function (res) {
        return res.json().then(function (response) {
          if (response['optOut']) {
            return null;
          }
          var cid = response['publisherClientId'];
          if (!cid && useAlternate && response['alternateUrl']) {
            // If an alternate url is provided, try again with the alternate url
            // The client is still responsible for appending API keys to the URL.
            var alt = response['alternateUrl'] + '?key=' + SERVICE_KEY_;
            return _this2.fetchCid_((0, _log.dev)().assertString(alt), false);
          }
          return cid;
        });
      }).catch(function (e) {
        if (e && e.response) {
          e.response.json().then(function (res) {
            (0, _log.dev)().error(TAG_, JSON.stringify(res));
          });
        } else {
          (0, _log.dev)().error(TAG_, e);
        }
        return null;
      });
    }

    /**
     * Returns scoped CID extracted from the fetched publisherCid.
     * @param {string} publisherCid
     * @param {string} scope
     * @return {!Promise<string>}
     */

  }, {
    key: 'scopeCid_',
    value: function scopeCid_(publisherCid, scope) {
      var text = publisherCid + ';' + scope;
      return _services.Services.cryptoFor(this.ampdoc_.win).sha384Base64(text).then(function (enc) {
        return 'amp-' + enc;
      });
    }
  }]);

  return CacheCidApi;
}();

},{"../log":45,"../services":104,"../url":116,"../utils/object":123}],68:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleCidApi = exports.TokenStatus = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2017 The AMP HTML Authors. All Rights Reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _services = require('../services');

var _windowInterface = require('../window-interface');

var _log = require('../log');

var _object = require('../utils/object');

var _cookies = require('../cookies');

var _url = require('../url');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GOOGLE_API_URL = 'https://ampcid.google.com/v1/publisher:getClientId?key=';

var TAG = 'GoogleCidApi';
var AMP_TOKEN = 'AMP_TOKEN';

/** @enum {string} */
var TokenStatus = exports.TokenStatus = {
  RETRIEVING: '$RETRIEVING',
  OPT_OUT: '$OPT_OUT',
  NOT_FOUND: '$NOT_FOUND',
  ERROR: '$ERROR'
};

var TIMEOUT = 30000;
var HOUR = 60 * 60 * 1000;
var DAY = 24 * HOUR;
var YEAR = 365 * DAY;

/**
 * Client impl for Google CID API
 */

var GoogleCidApi = exports.GoogleCidApi = function () {

  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
  function GoogleCidApi(ampdoc) {
    _classCallCheck(this, GoogleCidApi);

    /**
     * @private {!Window}
     */
    this.win_ = ampdoc.win;
    /**
     * @private {!./timer-impl.Timer}
     */
    this.timer_ = _services.Services.timerFor(this.win_);

    /**
     * @private {!Object<string, !Promise<?string>>}
     */
    this.cidPromise_ = {};

    var _Services$documentInf = _services.Services.documentInfoForDoc(ampdoc),
        canonicalUrl = _Services$documentInf.canonicalUrl;

    /** @private {?string} */


    this.canonicalOrigin_ = canonicalUrl ? (0, _url.parseUrlDeprecated)(canonicalUrl).origin : null;
  }

  /**
   * @param {string} apiKey
   * @param {string} scope
   * @return {!Promise<?string>}
   */


  _createClass(GoogleCidApi, [{
    key: 'getScopedCid',
    value: function getScopedCid(apiKey, scope) {
      var _this = this;

      if (this.cidPromise_[scope]) {
        return this.cidPromise_[scope];
      }
      var token = void 0;
      // Block the request if a previous request is on flight
      // Poll every 200ms. Longer interval means longer latency for the 2nd CID.
      return this.cidPromise_[scope] = this.timer_.poll(200, function () {
        token = (0, _cookies.getCookie)(_this.win_, AMP_TOKEN);
        return token !== TokenStatus.RETRIEVING;
      }).then(function () {
        if (token === TokenStatus.OPT_OUT) {
          return TokenStatus.OPT_OUT;
        }
        // If the page referrer is proxy origin, we force to use API even the
        // token indicates a previous fetch returned nothing
        var forceFetch = token === TokenStatus.NOT_FOUND && _this.isReferrerProxyOrigin_();

        // Token is in a special state, fallback to existing cookie
        if (!forceFetch && _this.isStatusToken_(token)) {
          return null;
        }

        if (!token || _this.isStatusToken_(token)) {
          _this.persistToken_(TokenStatus.RETRIEVING, TIMEOUT);
        }

        var url = GOOGLE_API_URL + apiKey;
        return _this.fetchCid_((0, _log.dev)().assertString(url), scope, token).then(function (response) {
          var cid = _this.handleResponse_(response);
          if (!cid && response['alternateUrl']) {
            // If an alternate url is provided, try again with the alternate
            // url The client is still responsible for appending API keys to
            // the URL.
            var altUrl = response['alternateUrl'] + '?key=' + apiKey;
            return _this.fetchCid_((0, _log.dev)().assertString(altUrl), scope, token).then(_this.handleResponse_.bind(_this));
          }
          return cid;
        }).catch(function (e) {
          _this.persistToken_(TokenStatus.ERROR, TIMEOUT);
          if (e && e.response) {
            e.response.json().then(function (res) {
              (0, _log.dev)().error(TAG, JSON.stringify(res));
            });
          } else {
            (0, _log.dev)().error(TAG, e);
          }
          return null;
        });
      });
    }

    /**
     * @param {string} url
     * @param {string} scope
     * @param {?string} token
     * @return {!Promise<!JsonObject>}
     */

  }, {
    key: 'fetchCid_',
    value: function fetchCid_(url, scope, token) {
      var payload = (0, _object.dict)({
        'originScope': scope,
        'canonicalOrigin': this.canonicalOrigin_
      });
      if (token) {
        payload['securityToken'] = token;
      }
      return this.timer_.timeoutPromise(TIMEOUT, _services.Services.xhrFor(this.win_).fetchJson(url, {
        method: 'POST',
        ampCors: false,
        credentials: 'include',
        mode: 'cors',
        body: payload
      }).then(function (res) {
        return res.json();
      }));
    }

    /**
     * @param {!JsonObject} res
     * @return {?string}
     */

  }, {
    key: 'handleResponse_',
    value: function handleResponse_(res) {
      if (res['optOut']) {
        this.persistToken_(TokenStatus.OPT_OUT, YEAR);
        return TokenStatus.OPT_OUT;
      }
      if (res['clientId']) {
        this.persistToken_(res['securityToken'], YEAR);
        return res['clientId'];
      }
      if (res['alternateUrl']) {
        return null;
      }
      this.persistToken_(TokenStatus.NOT_FOUND, HOUR);
      return null;
    }

    /**
     * @param {string|undefined} tokenValue
     * @param {number} expires
     */

  }, {
    key: 'persistToken_',
    value: function persistToken_(tokenValue, expires) {
      if (tokenValue) {
        (0, _cookies.setCookie)(this.win_, AMP_TOKEN, tokenValue, this.expiresIn_(expires), {
          highestAvailableDomain: true
        });
      }
    }

    /**
     * @param {number} time
     * @return {number}
     */

  }, {
    key: 'expiresIn_',
    value: function expiresIn_(time) {
      return this.win_.Date.now() + time;
    }

    /**
     * @return {boolean}
     */

  }, {
    key: 'isReferrerProxyOrigin_',
    value: function isReferrerProxyOrigin_() {
      return (0, _url.isProxyOrigin)(_windowInterface.WindowInterface.getDocumentReferrer(this.win_));
    }

    /**
     * @param {?string} token
     * @return {boolean}
     */

  }, {
    key: 'isStatusToken_',
    value: function isStatusToken_(token) {
      return (/** @type boolean */token && token[0] === '$'
      );
    }
  }]);

  return GoogleCidApi;
}();

},{"../cookies":17,"../log":45,"../services":104,"../url":116,"../utils/object":123,"../window-interface":132}],69:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cid = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


/**
 * @fileoverview Provides per AMP document source origin and use case
 * persistent client identifiers for use in analytics and similar use
 * cases.
 *
 * For details, see https://goo.gl/Mwaacs
 */

exports.optOutOfCid = optOutOfCid;
exports.isOptedOutOfCid = isOptedOutOfCid;
exports.getProxySourceOrigin = getProxySourceOrigin;
exports.viewerBaseCid = viewerBaseCid;
exports.installCidService = installCidService;
exports.cidServiceForDocForTesting = cidServiceForDocForTesting;

var _cacheCidApi = require('./cache-cid-api');

var _cidApi = require('./cid-api');

var _services = require('../services');

var _viewerCidApi = require('./viewer-cid-api');

var _base = require('../utils/base64');

var _log = require('../log');

var _object = require('../utils/object');

var _cookies = require('../cookies');

var _bytes = require('../utils/bytes');

var _service = require('../service');

var _url = require('../url');

var _dom = require('../dom');

var _json = require('../json');

var _promise = require('../utils/promise');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ONE_DAY_MILLIS = 24 * 3600 * 1000;

/**
 * We ignore base cids that are older than (roughly) one year.
 */
var BASE_CID_MAX_AGE_MILLIS = 365 * ONE_DAY_MILLIS;

var SCOPE_NAME_VALIDATOR = /^[a-zA-Z0-9-_.]+$/;

var CID_OPTOUT_STORAGE_KEY = 'amp-cid-optout';

var CID_OPTOUT_VIEWER_MESSAGE = 'cidOptOut';

/**
 * Tag for debug logging.
 * @const @private {string}
 */
var TAG_ = 'CID';

/**
 * The name of the Google CID API as it appears in the meta tag to opt-in.
 * @const @private {string}
 */
var GOOGLE_CID_API_META_NAME = 'amp-google-client-id-api';

/**
 * The mapping from analytics providers to CID scopes.
 * @const @private {Object<string, string>}
 */
var CID_API_SCOPE_WHITELIST = {
  'googleanalytics': 'AMP_ECID_GOOGLE'
};

/**
 * The mapping from analytics providers to their CID API service keys.
 * @const @private {Object<string, string>}
 */
var API_KEYS = {
  'googleanalytics': 'AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM'
};

/**
 * A base cid string value and the time it was last read / stored.
 * @typedef {{time: time, cid: string}}
 */
var BaseCidInfoDef = void 0;

/**
 * The "get CID" parameters.
 * - createCookieIfNotPresent: Whether CID is allowed to create a cookie when.
 *   Default value is `false`.
 * @typedef {{
 *   scope: string,
 *   createCookieIfNotPresent: (boolean|undefined),
 *   cookieName: (string|undefined),
 * }}
 */
var GetCidDef = void 0;

var Cid = exports.Cid = function () {
  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */
  function Cid(ampdoc) {
    _classCallCheck(this, Cid);

    /** @const */
    this.ampdoc = ampdoc;

    /**
     * Cached base cid once read from storage to avoid repeated
     * reads.
     * @private {?Promise<string>}
     * @restricted
     */
    this.baseCid_ = null;

    /**
     * Cache to store external cids. Scope is used as the key and cookie value
     * is the value.
     * @private {!Object<string, !Promise<string>>}
     * @restricted
     */
    this.externalCidCache_ = Object.create(null);

    /**
     * @private @const {!CacheCidApi}
     */
    this.cacheCidApi_ = new _cacheCidApi.CacheCidApi(ampdoc);

    /**
     * @private {!ViewerCidApi}
     */
    this.viewerCidApi_ = new _viewerCidApi.ViewerCidApi(ampdoc);

    this.cidApi_ = new _cidApi.GoogleCidApi(ampdoc);

    /** @private {?Object<string, string>} */
    this.apiKeyMap_ = null;
  }

  /**
   * @param {!GetCidDef} getCidStruct an object provides CID scope name for
   *     proxy case and cookie name for non-proxy case.
   * @param {!Promise} consent Promise for when the user has given consent
   *     (if deemed necessary by the publisher) for use of the client
   *     identifier.
   * @param {!Promise=} opt_persistenceConsent Dedicated promise for when
   *     it is OK to persist a new tracking identifier. This could be
   *     supplied ONLY by the code that supplies the actual consent
   *     cookie.
   *     If this is given, the consent param should be a resolved promise
   *     because this call should be only made in order to get consent.
   *     The consent promise passed to other calls should then itself
   *     depend on the opt_persistenceConsent promise (and the actual
   *     consent, of course).
   * @return {!Promise<?string>} A client identifier that should be used
   *      within the current source origin and externalCidScope. Might be
   *      null if user has opted out of cid or no identifier was found
   *      or it could be made.
   *      This promise may take a long time to resolve if consent isn't
   *      given.
   */


  _createClass(Cid, [{
    key: 'get',
    value: function get(getCidStruct, consent, opt_persistenceConsent) {
      var _this = this;

      (0, _log.user)().assert(SCOPE_NAME_VALIDATOR.test(getCidStruct.scope) && SCOPE_NAME_VALIDATOR.test(getCidStruct.cookieName), 'The CID scope and cookie name must only use the characters ' + '[a-zA-Z0-9-_.]+\nInstead found: %s', getCidStruct.scope);
      return consent.then(function () {
        return _services.Services.viewerForDoc(_this.ampdoc).whenFirstVisible();
      }).then(function () {
        // Check if user has globally opted out of CID, we do this after
        // consent check since user can optout during consent process.
        return isOptedOutOfCid(_this.ampdoc);
      }).then(function (optedOut) {
        if (optedOut) {
          return '';
        }
        var cidPromise = _this.getExternalCid_(getCidStruct, opt_persistenceConsent || consent);
        // Getting the CID might involve an HTTP request. We timeout after 10s.
        return _services.Services.timerFor(_this.ampdoc.win).timeoutPromise(10000, cidPromise, 'Getting cid for "' + getCidStruct.scope + '" timed out').catch(function (error) {
          (0, _log.rethrowAsync)(error);
        });
      });
    }

    /**
     * User will be opted out of Cid issuance for all scopes.
     * When opted-out Cid service will reject all `get` requests.
     *
     * @return {!Promise}
     */

  }, {
    key: 'optOut',
    value: function optOut() {
      return optOutOfCid(this.ampdoc);
    }

    /**
     * Returns the "external cid". This is a cid for a specific purpose
     * (Say Analytics provider X). It is unique per user, that purpose
     * and the AMP origin site.
     * @param {!GetCidDef} getCidStruct
     * @param {!Promise} persistenceConsent
     * @return {!Promise<?string>}
     */

  }, {
    key: 'getExternalCid_',
    value: function getExternalCid_(getCidStruct, persistenceConsent) {
      var _this2 = this;

      var scope = getCidStruct.scope;
      /** @const {!Location} */

      var url = (0, _url.parseUrlDeprecated)(this.ampdoc.win.location.href);
      if (!(0, _url.isProxyOrigin)(url)) {
        var apiKey = this.isScopeOptedIn_(scope);
        if (apiKey) {
          return this.cidApi_.getScopedCid(apiKey, scope).then(function (scopedCid) {
            if (scopedCid == _cidApi.TokenStatus.OPT_OUT) {
              return null;
            }
            if (scopedCid) {
              var cookieName = getCidStruct.cookieName || scope;
              setCidCookie(_this2.ampdoc.win, cookieName, scopedCid);
              return scopedCid;
            }
            return getOrCreateCookie(_this2, getCidStruct, persistenceConsent);
          });
        }
        return getOrCreateCookie(this, getCidStruct, persistenceConsent);
      }

      return this.viewerCidApi_.isSupported().then(function (supported) {
        if (supported) {
          var _apiKey = _this2.isScopeOptedIn_(scope);
          return _this2.viewerCidApi_.getScopedCid(_apiKey, scope);
        }

        if (_this2.cacheCidApi_.isSupported() && _this2.isScopeOptedIn_(scope)) {
          return _this2.cacheCidApi_.getScopedCid(scope).then(function (scopedCid) {
            if (scopedCid) {
              return scopedCid;
            }
            return _this2.scopeBaseCid_(persistenceConsent, scope, url);
          });
        }
        return _this2.scopeBaseCid_(persistenceConsent, scope, url);
      });
    }

    /**
     *
     * @param {!Promise} persistenceConsent
     * @param {*} scope
     * @param {!Location} url
     * @return {*}
     */

  }, {
    key: 'scopeBaseCid_',
    value: function scopeBaseCid_(persistenceConsent, scope, url) {
      var _this3 = this;

      return getBaseCid(this, persistenceConsent).then(function (baseCid) {
        return _services.Services.cryptoFor(_this3.ampdoc.win).sha384Base64(baseCid + getProxySourceOrigin(url) + scope);
      });
    }

    /**
     * Checks if the page has opted in CID API for the given scope.
     * Returns the API key that should be used, or null if page hasn't opted in.
     *
     * @param {string} scope
     * @return {string|undefined}
     */

  }, {
    key: 'isScopeOptedIn_',
    value: function isScopeOptedIn_(scope) {
      if (!this.apiKeyMap_) {
        this.apiKeyMap_ = this.getOptedInScopes_();
      }
      return this.apiKeyMap_[scope];
    }

    /**
     * Reads meta tags for opted in scopes.  Meta tags will have the form
     * <meta name="provider-api-name" content="provider-name">
     * @return {!Object<string, string>}
     */

  }, {
    key: 'getOptedInScopes_',
    value: function getOptedInScopes_() {
      var apiKeyMap = {};
      var optInMeta = this.ampdoc.win.document.head. /*OK*/querySelector('meta[name=' + GOOGLE_CID_API_META_NAME + ']');
      if (optInMeta && optInMeta.hasAttribute('content')) {
        var list = optInMeta.getAttribute('content').split(',');
        list.forEach(function (item) {
          item = item.trim();
          if (item.indexOf('=') > 0) {
            var pair = item.split('=');
            var scope = pair[0].trim();
            apiKeyMap[scope] = pair[1].trim();
          } else {
            var clientName = item;
            var _scope = CID_API_SCOPE_WHITELIST[clientName];
            if (_scope) {
              apiKeyMap[_scope] = API_KEYS[clientName];
            } else {
              (0, _log.user)().error(TAG_, 'Unsupported client for Google CID API: ' + clientName);
            }
          }
        });
      }
      return apiKeyMap;
    }
  }]);

  return Cid;
}();

/**
 * User will be opted out of Cid issuance for all scopes.
 * When opted-out Cid service will reject all `get` requests.
 *
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @return {!Promise}
 * @visibleForTesting
 */


function optOutOfCid(ampdoc) {

  // Tell the viewer that user has opted out.
  _services.Services.viewerForDoc(ampdoc). /*OK*/sendMessage(CID_OPTOUT_VIEWER_MESSAGE, (0, _object.dict)());

  // Store the optout bit in storage
  return _services.Services.storageForDoc(ampdoc).then(function (storage) {
    return storage.set(CID_OPTOUT_STORAGE_KEY, true);
  });
}

/**
 * Whether user has opted out of Cid issuance for all scopes.
 *
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @return {!Promise<boolean>}
 * @visibleForTesting
 */
function isOptedOutOfCid(ampdoc) {
  return _services.Services.storageForDoc(ampdoc).then(function (storage) {
    return storage.get(CID_OPTOUT_STORAGE_KEY).then(function (val) {
      return !!val;
    });
  }).catch(function () {
    // If we fail to read the flag, assume not opted out.
    return false;
  });
}

/**
 * Sets a new CID cookie for expire 1 year from now.
 * @param {!Window} win
 * @param {string} scope
 * @param {string} cookie
 */
function setCidCookie(win, scope, cookie) {
  var expiration = Date.now() + BASE_CID_MAX_AGE_MILLIS;
  (0, _cookies.setCookie)(win, scope, cookie, expiration, {
    highestAvailableDomain: true
  });
}

/**
 * If cookie exists it's returned immediately. Otherwise, if instructed, the
 * new cookie is created.
 *
 * @param {!Cid} cid
 * @param {!GetCidDef} getCidStruct
 * @param {!Promise} persistenceConsent
 * @return {!Promise<?string>}
 */
function getOrCreateCookie(cid, getCidStruct, persistenceConsent) {
  var win = cid.ampdoc.win;
  var scope = getCidStruct.scope;

  var cookieName = getCidStruct.cookieName || scope;
  var existingCookie = (0, _cookies.getCookie)(win, cookieName);

  if (!existingCookie && !getCidStruct.createCookieIfNotPresent) {
    return (/** @type {!Promise<?string>} */Promise.resolve(null)
    );
  }

  if (cid.externalCidCache_[scope]) {
    return (/** @type {!Promise<?string>} */cid.externalCidCache_[scope]
    );
  }

  if (existingCookie) {
    // If we created the cookie, update it's expiration time.
    if (/^amp-/.test(existingCookie)) {
      setCidCookie(win, cookieName, existingCookie);
    }
    return (/** @type {!Promise<?string>} */Promise.resolve(existingCookie)
    );
  }

  var newCookiePromise = getNewCidForCookie(win)
  // Create new cookie, always prefixed with "amp-", so that we can see from
  // the value whether we created it.
  .then(function (randomStr) {
    return 'amp-' + randomStr;
  });

  // Store it as a cookie based on the persistence consent.
  Promise.all([newCookiePromise, persistenceConsent]).then(function (results) {
    // The initial CID generation is inherently racy. First one that gets
    // consent wins.
    var newCookie = results[0];
    var relookup = (0, _cookies.getCookie)(win, cookieName);
    if (!relookup) {
      setCidCookie(win, cookieName, newCookie);
    }
  });
  return cid.externalCidCache_[scope] = newCookiePromise;
}

/**
 * Returns the source origin of an AMP document for documents served
 * on a proxy origin. Throws an error if the doc is not on a proxy origin.
 * @param {!Location} url URL of an AMP document.
 * @return {string} The source origin of the URL.
 * @visibleForTesting BUT if this is needed elsewhere it could be
 *     factored into its own package.
 */
function getProxySourceOrigin(url) {
  (0, _log.user)().assert((0, _url.isProxyOrigin)(url), 'Expected proxy origin %s', url.origin);
  return (0, _url.getSourceOrigin)(url);
}

/**
 * Returns the base cid for the current user(). This string must not
 * be exposed to users without hashing with the current source origin
 * and the externalCidScope.
 * On a proxy this value is the same for a user across all source
 * origins.
 * @param {!Cid} cid
 * @param {!Promise} persistenceConsent
 * @return {!Promise<string>}
 */
function getBaseCid(cid, persistenceConsent) {
  if (cid.baseCid_) {
    return cid.baseCid_;
  }
  var win = cid.ampdoc.win;


  return cid.baseCid_ = read(cid.ampdoc).then(function (stored) {
    var needsToStore = false;
    var baseCid = void 0;

    // See if we have a stored base cid and whether it is still valid
    // in terms of expiration.
    if (stored && !isExpired(stored)) {
      baseCid = Promise.resolve(stored.cid);
      if (shouldUpdateStoredTime(stored)) {
        needsToStore = true;
      }
    } else {
      // We need to make a new one.
      baseCid = _services.Services.cryptoFor(win).sha384Base64(getEntropy(win));
      needsToStore = true;
    }

    if (needsToStore) {
      baseCid.then(function (baseCid) {
        store(cid.ampdoc, persistenceConsent, baseCid);
      });
    }

    return baseCid;
  });
}

/**
 * Stores a new cidString in localStorage. Adds the current time to the
 * stored value.
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @param {!Promise} persistenceConsent
 * @param {string} cidString Actual cid string to store.
 */
function store(ampdoc, persistenceConsent, cidString) {
  var win = ampdoc.win;

  if ((0, _dom.isIframed)(win)) {
    // If we are being embedded, try to save the base cid to the viewer.
    viewerBaseCid(ampdoc, createCidData(cidString));
  } else {
    // To use local storage, we need user's consent.
    persistenceConsent.then(function () {
      try {
        win.localStorage.setItem('amp-cid', createCidData(cidString));
      } catch (ignore) {
        // Setting localStorage may fail. In practice we don't expect that to
        // happen a lot (since we don't go anywhere near the quota, but
        // in particular in Safari private browsing mode it always fails.
        // In that case we just don't store anything, which is just fine.
      }
    });
  }
}

/**
 * Get/set the Base CID from/to the viewer.
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @param {string=} opt_data Stringified JSON object {cid, time}.
 * @return {!Promise<string|undefined>}
 */
function viewerBaseCid(ampdoc, opt_data) {
  var viewer = _services.Services.viewerForDoc(ampdoc);
  return viewer.isTrustedViewer().then(function (trusted) {
    if (!trusted) {
      return undefined;
    }
    // TODO(lannka, #11060): clean up when all Viewers get migrated
    (0, _log.dev)().expectedError('CID', 'Viewer does not provide cap=cid');
    return viewer.sendMessageAwaitResponse('cid', opt_data).then(function (data) {
      // For backward compatibility: #4029
      if (data && !(0, _json.tryParseJson)(data)) {
        // TODO(lannka, #11060): clean up when all Viewers get migrated
        (0, _log.dev)().expectedError('CID', 'invalid cid format');
        return JSON.stringify((0, _object.dict)({
          'time': Date.now(), // CID returned from old API is always fresh
          'cid': data
        }));
      }
      return data;
    });
  });
}

/**
 * Creates a JSON object that contains the given CID and the current time as
 * a timestamp.
 * @param {string} cidString
 * @return {string}
 */
function createCidData(cidString) {
  return JSON.stringify((0, _object.dict)({
    'time': Date.now(),
    'cid': cidString
  }));
}

/**
 * Gets the persisted CID data as a promise. It tries to read from
 * localStorage first then from viewer if it is in embedded mode.
 * Returns null if none was found.
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @return {!Promise<?BaseCidInfoDef>}
 */
function read(ampdoc) {
  var win = ampdoc.win;

  var data = void 0;
  try {
    data = win.localStorage.getItem('amp-cid');
  } catch (ignore) {
    // If reading from localStorage fails, we assume it is empty.
  }
  var dataPromise = Promise.resolve(data);
  if (!data && (0, _dom.isIframed)(win)) {
    // If we are being embedded, try to get the base cid from the viewer.
    dataPromise = viewerBaseCid(ampdoc);
  }
  return dataPromise.then(function (data) {
    if (!data) {
      return null;
    }
    var item = (0, _json.parseJson)(data);
    return {
      time: item['time'],
      cid: item['cid']
    };
  });
}

/**
 * Whether the retrieved cid object is expired and should be ignored.
 * @param {!BaseCidInfoDef} storedCidInfo
 * @return {boolean}
 */
function isExpired(storedCidInfo) {
  var createdTime = storedCidInfo.time;
  var now = Date.now();
  return createdTime + BASE_CID_MAX_AGE_MILLIS < now;
}

/**
 * Whether we should write a new timestamp to the stored cid value.
 * We say yes if it is older than 1 day, so we only do this max once
 * per day to avoid writing to localStorage all the time.
 * @param {!BaseCidInfoDef} storedCidInfo
 * @return {boolean}
 */
function shouldUpdateStoredTime(storedCidInfo) {
  var createdTime = storedCidInfo.time;
  var now = Date.now();
  return createdTime + ONE_DAY_MILLIS < now;
}

/**
 * Returns an array with a total of 128 of random values based on the
 * `win.crypto.getRandomValues` API. If that is not available concatenates
 * a string of other values that might be hard to guess including
 * `Math.random` and the current time.
 * @param {!Window} win
 * @return {!Uint8Array|string} Entropy.
 */
function getEntropy(win) {
  // Use win.crypto.getRandomValues to get 128 bits of random value
  var uint8array = (0, _bytes.getCryptoRandomBytesArray)(win, 16); // 128 bit
  if (uint8array) {
    return uint8array;
  }

  // Support for legacy browsers.
  return String(win.location.href + Date.now() + win.Math.random() + win.screen.width + win.screen.height);
}

/**
 * Produces an external CID for use in a cookie.
 * @param {!Window} win
 * @return {!Promise<string>} The cid
 */
function getNewCidForCookie(win) {
  var entropy = getEntropy(win);
  if (typeof entropy == 'string') {
    return _services.Services.cryptoFor(win).sha384Base64(entropy);
  } else {
    // If our entropy is a pure random number, we can just directly turn it
    // into base 64
    var cast = /** @type {!Uint8Array} */entropy;
    return (0, _promise.tryResolve)(function () {
      return (0, _base.base64UrlEncodeFromBytes)(cast)
      // Remove trailing padding
      .replace(/\.+$/, '');
    });
  }
}

/**
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 */
function installCidService(ampdoc) {
  return (0, _service.registerServiceBuilderForDoc)(ampdoc, 'cid', Cid);
}

/**
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @return {!Cid}
 * @private visible for testing
 */
function cidServiceForDocForTesting(ampdoc) {
  (0, _service.registerServiceBuilderForDoc)(ampdoc, 'cid', Cid);
  return (0, _service.getServiceForDoc)(ampdoc, 'cid');
}

},{"../cookies":17,"../dom":22,"../json":40,"../log":45,"../service":63,"../services":104,"../url":116,"../utils/base64":118,"../utils/bytes":119,"../utils/object":123,"../utils/promise":125,"./cache-cid-api":67,"./cid-api":68,"./viewer-cid-api":95}],70:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Crypto = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

exports.installCryptoService = installCryptoService;

var _services = require('../services');

var _base = require('../utils/base64');

var _log = require('../log');

var _service = require('../service');

var _bytes = require('../utils/bytes');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @const {string} */
var TAG = 'Crypto';
var FALLBACK_MSG = 'SubtleCrypto failed, fallback to closure lib.';

var Crypto = exports.Crypto = function () {

  /**
   * Creates an instance of Crypto.
   * @param {!Window} win
   */
  function Crypto(win) {
    _classCallCheck(this, Crypto);

    /** @private {!Window} */
    this.win_ = win;

    var subtle = null;
    var isLegacyWebkit = false;
    if (win.crypto) {
      if (win.crypto.subtle) {
        subtle = win.crypto.subtle;
      } else if (win.crypto.webkitSubtle) {
        subtle = win.crypto.webkitSubtle;
        isLegacyWebkit = true;
      }
    }

    /** @const {{name: string}} */
    this.pkcsAlgo = {
      name: 'RSASSA-PKCS1-v1_5',
      hash: { name: 'SHA-256' }
    };

    /** @const {?webCrypto.SubtleCrypto} */
    this.subtle = subtle;

    /** @private @const {boolean} */
    this.isLegacyWebkit_ = isLegacyWebkit;

    /** @private {?Promise<{sha384: function((string|Uint8Array))}>} */
    this.polyfillPromise_ = null;
  }

  /**
   * Returns the SHA-384 hash of the input string in a number array.
   * Input string cannot contain chars out of range [0,255].
   * @param {string|!Uint8Array} input
   * @return {!Promise<!Uint8Array>}
   * @throws {!Error} when input string contains chars out of range [0,255]
   */


  _createClass(Crypto, [{
    key: 'sha384',
    value: function sha384(input) {
      var _this = this;

      if (typeof input === 'string') {
        input = (0, _bytes.stringToBytes)(input);
      }

      if (!this.subtle || this.polyfillPromise_) {
        // means native Crypto API is not available or failed before.
        return (this.polyfillPromise_ || this.loadPolyfill_()).then(function (polyfill) {
          return polyfill.sha384(input);
        });
      }

      try {
        return this.subtle.digest({ name: 'SHA-384' }, input)
        /** @param {?} buffer */
        .then(function (buffer) {
          return new Uint8Array(buffer);
        }, function (e) {
          // Chrome doesn't allow the usage of Crypto API under
          // non-secure origin: https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
          if (e.message && e.message.indexOf('secure origin') < 0) {
            // Log unexpected fallback.
            (0, _log.dev)().error(TAG, FALLBACK_MSG, e);
          }
          return _this.loadPolyfill_().then(function () {
            return _this.sha384(input);
          });
        });
      } catch (e) {
        (0, _log.dev)().error(TAG, FALLBACK_MSG, e);
        return this.loadPolyfill_().then(function () {
          return _this.sha384(input);
        });
      }
    }

    /**
     * Returns the SHA-384 hash of the input string in the format of web safe
     * base64 (using -_. instead of +/=).
     * Input string cannot contain chars out of range [0,255].
     * @param {string|!Uint8Array} input
     * @return {!Promise<string>}
     * @throws {!Error} when input string contains chars out of range [0,255]
     */

  }, {
    key: 'sha384Base64',
    value: function sha384Base64(input) {
      return this.sha384(input).then(function (buffer) {
        return (0, _base.base64UrlEncodeFromBytes)(buffer);
      });
    }

    /**
     * Returns a uniform hash of the input string as a float number in the range
     * of [0, 1).
     * Input string cannot contain chars out of range [0,255].
     * @param {string|!Uint8Array} input
     * @return {!Promise<number>}
     */

  }, {
    key: 'uniform',
    value: function uniform(input) {
      return this.sha384(input).then(function (buffer) {
        // Consider the Uint8 array as a base256 fraction number,
        // then convert it to the decimal form.
        var result = 0;
        for (var i = 2; i >= 0; i--) {
          // 3 base256 digits give enough precision
          result = (result + buffer[i]) / 256;
        }
        return result;
      });
    }

    /**
     * Loads Crypto polyfill library.
     * @return {!Promise<{sha384: function((string|Uint8Array))}>}
     * @private
     */

  }, {
    key: 'loadPolyfill_',
    value: function loadPolyfill_() {
      var _this2 = this;

      if (this.polyfillPromise_) {
        return this.polyfillPromise_;
      }
      return this.polyfillPromise_ = _services.Services.extensionsFor(this.win_).preloadExtension('amp-crypto-polyfill').then(function () {
        return (0, _service.getService)(_this2.win_, 'crypto-polyfill');
      });
    }

    /**
     * Checks whether Web Cryptography is available, which is required for PKCS 1
     * operations. SHA-384 operations do not need this because there's a polyfill.
     * This could be false if the browser does not support Web Cryptography, or if
     * the current browsing context is not secure (e.g., it's on an insecure HTTP
     * page, or an HTTPS iframe embedded in an insecure HTTP page).
     *
     * @return {boolean} whether Web Cryptography is available
     */

  }, {
    key: 'isPkcsAvailable',
    value: function isPkcsAvailable() {
      return Boolean(this.subtle) && this.win_['isSecureContext'] !== false;
    }

    /**
     * Converts an RSA JSON Web Key object to a browser-native cryptographic key.
     * As a precondition, `isPkcsAvailable()` must be `true`.
     *
     * @param {!Object} jwk a deserialized RSA JSON Web Key, as specified in
     *     Section 6.3 of RFC 7518
     * @return {!Promise<!webCrypto.CryptoKey>}
     * @throws {TypeError} if `jwk` is not an RSA JSON Web Key
     */

  }, {
    key: 'importPkcsKey',
    value: function importPkcsKey(jwk) {
      (0, _log.dev)().assert(this.isPkcsAvailable());
      // Safari 10 and earlier want this as an ArrayBufferView.
      var keyData = this.isLegacyWebkit_ ? (0, _bytes.utf8Encode)(JSON.stringify( /** @type {!JsonObject} */jwk)) : /** @type {!webCrypto.JsonWebKey} */jwk;
      return (/** @type {!Promise<!webCrypto.CryptoKey>} */this.subtle.importKey('jwk', keyData, this.pkcsAlgo, true, ['verify'])
      );
    }

    /**
     * Verifies an RSASSA-PKCS1-v1_5 signature with a SHA-256 hash. As a
     * precondition, `isPkcsAvailable()` must be `true`.
     *
     * @param {!webCrypto.CryptoKey} key an RSA public key
     * @param {!Uint8Array} signature an RSASSA-PKCS1-v1_5 signature
     * @param {!BufferSource} data the data that was signed
     * @return {!Promise<boolean>} whether the signature is correct for the given
     *     data and public key
     */

  }, {
    key: 'verifyPkcs',
    value: function verifyPkcs(key, signature, data) {
      (0, _log.dev)().assert(this.isPkcsAvailable());
      return (/** @type {!Promise<boolean>} */this.subtle.verify(this.pkcsAlgo, key, signature, data)
      );
    }
  }]);

  return Crypto;
}();

/**
 * @param {!Window} win
 */


function installCryptoService(win) {
  return (0, _service.registerServiceBuilder)(win, 'crypto', Crypto);
}

},{"../log":45,"../service":63,"../services":104,"../utils/base64":118,"../utils/bytes":119}],71:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upgradeOrRegisterElement = upgradeOrRegisterElement;
exports.stubElementsForDoc = stubElementsForDoc;
exports.stubElementIfNotKnown = stubElementIfNotKnown;
exports.copyElementToChildWindow = copyElementToChildWindow;
exports.registerElement = registerElement;
exports.markElementScheduledForTesting = markElementScheduledForTesting;
exports.resetScheduledElementForTesting = resetScheduledElementForTesting;
exports.getElementClassForTesting = getElementClassForTesting;

var _elementStub = require('../element-stub');

var _customElement = require('../custom-element');

var _elementService = require('../element-service');

var _error = require('../error');

var _log = require('../log');

/**
 * @param {!Window} win
 * @return {!Object<string, function(new:../base-element.BaseElement, !Element)>}
 */
function getExtendedElements(win) {
  if (!win.ampExtendedElements) {
    win.ampExtendedElements = {};
  }
  return win.ampExtendedElements;
}

/**
 * Registers an element. Upgrades it if has previously been stubbed.
 * @param {!Window} win
 * @param {string} name
 * @param {function(new:../base-element.BaseElement, !Element)} toClass
 */
/**
 * Copyright 2017 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function upgradeOrRegisterElement(win, name, toClass) {
  var knownElements = getExtendedElements(win);
  if (!knownElements[name]) {
    registerElement(win, name, /** @type {!Function} */toClass);
    return;
  }
  if (knownElements[name] == toClass) {
    // Already registered this instance.
    return;
  }
  (0, _log.user)().assert(knownElements[name] == _elementStub.ElementStub, '%s is already registered. The script tag for ' + '%s is likely included twice in the page.', name, name);
  knownElements[name] = toClass;
  for (var i = 0; i < _elementStub.stubbedElements.length; i++) {
    var stub = _elementStub.stubbedElements[i];
    // There are 3 possible states here:
    // 1. We never made the stub because the extended impl. loaded first.
    //    In that case the element won't be in the array.
    // 2. We made a stub but the browser didn't attach it yet. In
    //    that case we don't need to upgrade but simply switch to the new
    //    implementation.
    // 3. A stub was attached. We upgrade which means we replay the
    //    implementation.
    var element = stub.element;

    if (element.tagName.toLowerCase() == name && element.ownerDocument.defaultView == win) {
      tryUpgradeElementNoInline(element, toClass);
      // Remove element from array.
      _elementStub.stubbedElements.splice(i--, 1);
    }
  }
}

/**
 * This method should not be inlined to prevent TryCatch deoptimization.
 * NoInline keyword at the end of function name also prevents Closure compiler
 * from inlining the function.
 * @param {Element} element
 * @param {function(new:../base-element.BaseElement, !Element)} toClass
 * @private
 */
function tryUpgradeElementNoInline(element, toClass) {
  try {
    element.upgrade(toClass);
  } catch (e) {
    (0, _error.reportError)(e, element);
  }
}

/**
 * Stub extended elements missing an implementation. It can be called multiple
 * times and on partial document in order to start stubbing as early as
 * possible.
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 */
function stubElementsForDoc(ampdoc) {
  var extensions = (0, _elementService.extensionScriptsInNode)(ampdoc.getHeadNode());
  extensions.forEach(function (name) {
    ampdoc.declareExtension(name);
    stubElementIfNotKnown(ampdoc.win, name);
  });
}

/**
 * Stub element if not yet known.
 * @param {!Window} win
 * @param {string} name
 */
function stubElementIfNotKnown(win, name) {
  var knownElements = getExtendedElements(win);
  if (!knownElements[name]) {
    registerElement(win, name, _elementStub.ElementStub);
  }
}

/**
 * Copies the specified element to child window (friendly iframe). This way
 * all implementations of the AMP elements are shared between all friendly
 * frames.
 * @param {!Window} parentWin
 * @param {!Window} childWin
 * @param {string} name
 */
function copyElementToChildWindow(parentWin, childWin, name) {
  var toClass = getExtendedElements(parentWin)[name];
  registerElement(childWin, name, toClass || _elementStub.ElementStub);
}

/**
 * Registers a new custom element with its implementation class.
 * @param {!Window} win The window in which to register the elements.
 * @param {string} name Name of the custom element
 * @param {function(new:../base-element.BaseElement, !Element)} implementationClass
 */
function registerElement(win, name, implementationClass) {
  var knownElements = getExtendedElements(win);
  knownElements[name] = implementationClass;
  var klass = (0, _customElement.createCustomElementClass)(win, name);

  var supportsCustomElementsV1 = 'customElements' in win;
  if (supportsCustomElementsV1) {
    win['customElements'].define(name, klass);
  } else {
    win.document.registerElement(name, {
      prototype: klass.prototype
    });
  }
}

/**
 * In order to provide better error messages we only allow to retrieve
 * services from other elements if those elements are loaded in the page.
 * This makes it possible to mark an element as loaded in a test.
 * @param {!Window} win
 * @param {string} elementName Name of an extended custom element.
 * @visibleForTesting
 */
function markElementScheduledForTesting(win, elementName) {
  var knownElements = getExtendedElements(win);
  if (!knownElements[elementName]) {
    knownElements[elementName] = _elementStub.ElementStub;
  }
}

/**
 * Resets our scheduled elements.
 * @param {!Window} win
 * @param {string} elementName Name of an extended custom element.
 * @visibleForTesting
 */
function resetScheduledElementForTesting(win, elementName) {
  if (win.ampExtendedElements) {
    delete win.ampExtendedElements[elementName];
  }
}

/**
 * Returns a currently registered element class.
 * @param {!Window} win
 * @param {string} elementName Name of an extended custom element.
 * @return {?function()}
 * @visibleForTesting
 */
function getElementClassForTesting(win, elementName) {
  var knownElements = win.ampExtendedElements;
  return knownElements && knownElements[elementName] || null;
}

},{"../custom-element":19,"../element-service":23,"../element-stub":24,"../error":25,"../log":45}],72:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocInfo = exports.DocumentInfoDef = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.installDocumentInfoServiceForDoc = installDocumentInfoServiceForDoc;

var _object = require('../utils/object');

var _url = require('../url');

var _types = require('../types');

var _service = require('../service');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** @private @const {!Array<string>} */
var filteredLinkRels = ['prefetch', 'preload', 'preconnect', 'dns-prefetch'];

/**
 * Properties:
 *     - sourceUrl: the source url of an amp document.
 *     - canonicalUrl: The doc's canonical.
 *     - pageViewId: Id for this page view. Low entropy but should be unique
 *       for concurrent page views of a user().
 *     - linkRels: A map object of link tag's rel (key) and corresponding
 *       hrefs (value). rel could be 'canonical', 'icon', etc.
 *     - metaTags: A map object of meta tag's name (key) and corresponding
 *       contents (value).
 *     - replaceParams: A map object of extra query string parameter names (key)
 *       to corresponding values, used for custom analytics.
 *
 * @typedef {{
 *   sourceUrl: string,
 *   canonicalUrl: string,
 *   pageViewId: string,
 *   linkRels: !Object<string, string|!Array<string>>,
 *   metaTags: !Object<string, string|!Array<string>>,
 *   replaceParams: !Object<string, string|!Array<string>>
 * }}
 */
var DocumentInfoDef = exports.DocumentInfoDef = void 0;

/**
 * @param {!Node|!./ampdoc-impl.AmpDoc} nodeOrDoc
 */
function installDocumentInfoServiceForDoc(nodeOrDoc) {
  return (0, _service.registerServiceBuilderForDoc)(nodeOrDoc, 'documentInfo', DocInfo);
}

var DocInfo = exports.DocInfo = function () {
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   */
  function DocInfo(ampdoc) {
    _classCallCheck(this, DocInfo);

    /** @private @const  */
    this.ampdoc_ = ampdoc;
    /** @private {?DocumentInfoDef} */
    this.info_ = null;
  }

  /** @return {!DocumentInfoDef} */


  _createClass(DocInfo, [{
    key: 'get',
    value: function get() {
      if (this.info_) {
        return this.info_;
      }
      var ampdoc = this.ampdoc_;
      var url = ampdoc.getUrl();
      var sourceUrl = (0, _url.getSourceUrl)(url);
      var rootNode = ampdoc.getRootNode();
      var canonicalUrl = rootNode && rootNode.AMP && rootNode.AMP.canonicalUrl;
      if (!canonicalUrl) {
        var canonicalTag = rootNode.querySelector('link[rel=canonical]');
        canonicalUrl = canonicalTag ? (0, _url.parseUrlDeprecated)(canonicalTag.href).href : sourceUrl;
      }
      var pageViewId = getPageViewId(ampdoc.win);
      var linkRels = getLinkRels(ampdoc.win.document);
      var metaTags = getMetaTags(ampdoc.win.document);
      var replaceParams = getReplaceParams(ampdoc);

      return this.info_ = {
        /** @return {string} */
        get sourceUrl() {
          return (0, _url.getSourceUrl)(ampdoc.getUrl());
        },
        canonicalUrl: canonicalUrl,
        pageViewId: pageViewId,
        linkRels: linkRels,
        metaTags: metaTags,
        replaceParams: replaceParams
      };
    }
  }]);

  return DocInfo;
}();

/**
 * Returns a relatively low entropy random string.
 * This should be called once per window and then cached for subsequent
 * access to the same value to be persistent per page.
 * @param {!Window} win
 * @return {string}
 */


function getPageViewId(win) {
  return String(Math.floor(win.Math.random() * 10000));
}

/**
 * Returns a map object of link tag relations in document head.
 * Key is the link rel, value is a list of corresponding hrefs.
 * @param {!Document} doc
 * @return {!JsonObject<string, string|!Array<string>>}
 */
function getLinkRels(doc) {
  var linkRels = (0, _object.map)();
  if (doc.head) {
    var links = doc.head.querySelectorAll('link[rel]');

    var _loop = function _loop(i) {
      var link = links[i];
      var href = link.href;

      var rels = link.getAttribute('rel');
      if (!rels || !href) {
        return 'continue';
      }

      rels.split(/\s+/).forEach(function (rel) {
        if (filteredLinkRels.indexOf(rel) != -1) {
          return;
        }

        var value = linkRels[rel];
        if (value) {
          // Change to array if more than one href for the same rel
          if (!(0, _types.isArray)(value)) {
            value = linkRels[rel] = [value];
          }
          value.push(href);
        } else {
          linkRels[rel] = href;
        }
      });
    };

    for (var i = 0; i < links.length; i++) {
      var _ret = _loop(i);

      if (_ret === 'continue') continue;
    }
  }
  return linkRels;
}

/**
 * Returns a map object of meta tags in document head.
 * Key is the meta name, value is a list of corresponding content values.
 * @param {!Document} doc
 * @return {!JsonObject<string, string|!Array<string>>}
 */
function getMetaTags(doc) {
  var metaTags = (0, _object.map)();
  if (doc.head) {
    var metas = doc.head.querySelectorAll('meta[name]');
    for (var i = 0; i < metas.length; i++) {
      var meta = metas[i];
      var content = meta.getAttribute('content');
      var name = meta.getAttribute('name');
      if (!name || !content) {
        continue;
      }

      var value = metaTags[name];
      if (value) {
        // Change to array if more than one content for the same name
        if (!(0, _types.isArray)(value)) {
          value = metaTags[name] = [value];
        }
        value.push(content);
      } else {
        metaTags[name] = content;
      }
    }
  }
  return metaTags;
}

/**
 * Attempts to retrieve extra parameters from the "amp_r" query param,
 * returning an empty result if invalid.
 * @param {!./ampdoc-impl.AmpDoc} ampdoc
 * @return {!JsonObject<string, string|!Array<string>>}
 */
function getReplaceParams(ampdoc) {
  // The "amp_r" parameter is only supported for ads.
  if (!ampdoc.isSingleDoc() || (0, _url.getProxyServingType)(ampdoc.win.location.href) != 'a') {
    return (0, _object.dict)();
  }
  var url = (0, _url.parseUrlDeprecated)(ampdoc.win.location.href);
  var replaceRaw = (0, _url.parseQueryString)(url.search)['amp_r'];
  return (0, _url.parseQueryString)(replaceRaw);
}

},{"../service":63,"../types":113,"../url":116,"../utils/object":123}],73:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentState = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2015 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.installDocumentStateService = installDocumentStateService;

var _observable = require('../observable');

var _style = require('../style');

var _service = require('../service');

var _dom = require('../dom');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 */
var DocumentState = exports.DocumentState = function () {
  /**
   * @param {!Window} win
   */
  function DocumentState(win) {
    _classCallCheck(this, DocumentState);

    /** @const {!Window} */
    this.win = win;

    /** @private @const {!Document} */
    this.document_ = win.document;

    /** @private {string|null} */
    this.hiddenProp_ = (0, _style.getVendorJsPropertyName)(this.document_, 'hidden', true);
    if (this.document_[this.hiddenProp_] === undefined) {
      this.hiddenProp_ = null;
    }

    /** @private {string|null} */
    this.visibilityStateProp_ = (0, _style.getVendorJsPropertyName)(this.document_, 'visibilityState', true);
    if (this.document_[this.visibilityStateProp_] === undefined) {
      this.visibilityStateProp_ = null;
    }

    /** @private @const {!Observable} */
    this.visibilityObservable_ = new _observable.Observable();

    /** @private {string|null} */
    this.visibilityChangeEvent_ = null;
    if (this.hiddenProp_) {
      this.visibilityChangeEvent_ = 'visibilitychange';
      var vendorStop = this.hiddenProp_.indexOf('Hidden');
      if (vendorStop != -1) {
        this.visibilityChangeEvent_ = this.hiddenProp_.substring(0, vendorStop) + 'Visibilitychange';
      }
    }

    /** @private @const {!Function} */
    this.boundOnVisibilityChanged_ = this.onVisibilityChanged_.bind(this);
    if (this.visibilityChangeEvent_) {
      this.document_.addEventListener(this.visibilityChangeEvent_, this.boundOnVisibilityChanged_);
    }

    /** @private {?Observable} */
    this.bodyAvailableObservable_ = null;
  }

  /**
   * Returns the value of "document.hidden" property. The reasons why it may
   * not be visible include document in a non-active tab or when the document
   * is being pre-rendered via link with rel="prerender".
   * @return {boolean}
   */


  _createClass(DocumentState, [{
    key: 'isHidden',
    value: function isHidden() {
      if (!this.hiddenProp_) {
        return false;
      }
      return this.document_[this.hiddenProp_];
    }

    /**
     * Returns the value of "document.visibilityState" property. Possible values
     * are: 'hidden', 'visible', 'prerender', and 'unloaded'.
     * @return {string}
     */

  }, {
    key: 'getVisibilityState',
    value: function getVisibilityState() {
      if (!this.visibilityStateProp_) {
        return this.isHidden() ? 'hidden' : 'visible';
      }
      return this.document_[this.visibilityStateProp_];
    }

    /**
     * @param {function()} handler
     * @return {!UnlistenDef}
     */

  }, {
    key: 'onVisibilityChanged',
    value: function onVisibilityChanged(handler) {
      return this.visibilityObservable_.add(handler);
    }

    /** @private */

  }, {
    key: 'onVisibilityChanged_',
    value: function onVisibilityChanged_() {
      this.visibilityObservable_.fire();
    }

    /**
     * If body is already available, callback is called synchronously and null
     * is returned.
     * @param {function()} handler
     * @return {?UnlistenDef}
     */

  }, {
    key: 'onBodyAvailable',
    value: function onBodyAvailable(handler) {
      var doc = this.document_;
      if (doc.body) {
        handler();
        return null;
      }
      if (!this.bodyAvailableObservable_) {
        this.bodyAvailableObservable_ = new _observable.Observable();
        (0, _dom.waitForChild)(doc.documentElement, function () {
          return !!doc.body;
        }, this.onBodyAvailable_.bind(this));
      }
      return this.bodyAvailableObservable_.add(handler);
    }

    /** @private */

  }, {
    key: 'onBodyAvailable_',
    value: function onBodyAvailable_() {
      this.bodyAvailableObservable_.fire();
      this.bodyAvailableObservable_.removeAll();
      this.bodyAvailableObservable_ = null;
    }
  }]);

  return DocumentState;
}();

/**
 * @param {!Window} window
 */


function installDocumentStateService(window) {
  (0, _service.registerServiceBuilder)(window, 'documentState', DocumentState);
}

},{"../dom":22,"../observable":48,"../service":63,"../style":110}],74:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateExtensionScriptUrl = calculateExtensionScriptUrl;
exports.calculateEntryPointScriptUrl = calculateEntryPointScriptUrl;

var _mode = require('../mode');

var _config = require('../config');

/**
 * Calculate the base url for any scripts.
 * @param {!Location} location The window's location
 * @param {boolean=} opt_isLocalDev
 * @return {string}
 */
/**
 * Copyright 2016 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function calculateScriptBaseUrl(location, opt_isLocalDev) {
  if (opt_isLocalDev) {
    var prefix = location.protocol + '//' + location.host;
    if (location.protocol == 'about:') {
      prefix = '';
    }
    return prefix + '/dist';
  }
  return _config.urls.cdn;
}

/**
 * Calculate script url for an extension.
 * @param {!Location} location The window's location
 * @param {string} extensionId
 * @param {string=} opt_extensionVersion
 * @param {boolean=} opt_isLocalDev
 * @return {string}
 */
function calculateExtensionScriptUrl(location, extensionId, opt_extensionVersion, opt_isLocalDev) {
  var base = calculateScriptBaseUrl(location, opt_isLocalDev);
  var rtv = (0, _mode.getMode)().rtvVersion;
  if (opt_extensionVersion == null) {
    opt_extensionVersion = '0.1';
  }
  var extensionVersion = opt_extensionVersion ? '-' + opt_extensionVersion : '';
  return base + '/rtv/' + rtv + '/v0/' + extensionId + extensionVersion + '.js';
}

/**
 * Calculate script url for an entry point.
 * If `opt_rtv` is true, returns the URL matching the current RTV.
 * @param {!Location} location The window's location
 * @param {string} entryPoint
 * @param {boolean=} isLocalDev
 * @param {boolean=} opt_rtv
 * @return {string}
 */
function calculateEntryPointScriptUrl(location, entryPoint, isLocalDev, opt_rtv) {
  var base = calculateScriptBaseUrl(location, isLocalDev);
  if (opt_rtv) {
    return base + '/rtv/' + (0, _mode.getMode)().rtvVersion + '/' + entryPoint + '.js';
  }
  return base + '/' + entryPoint + '.js';
}

},{"../config":16,"../mode":47}],75:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extensions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


exports.isTemplateExtension = isTemplateExtension;
exports.installExtensionsService = installExtensionsService;
exports.installBuiltinElements = installBuiltinElements;
exports.stubLegacyElements = stubLegacyElements;

var _promise = require('../utils/promise');

var _services = require('../services');

var _service = require('../service');

var _extensionLocation = require('./extension-location');

var _customElementRegistry = require('./custom-element-registry');

var _css = require('../../build/css');

var _log = require('../log');

var _mode = require('../mode');

var _customElements = require('../polyfills/custom-elements');

var _domtokenlistToggle = require('../polyfills/domtokenlist-toggle');

var _documentContains = require('../polyfills/document-contains');

var _ampImg = require('../../builtins/amp-img');

var _ampLayout = require('../../builtins/amp-layout');

var _ampPixel = require('../../builtins/amp-pixel');

var _documentRegisterElement = require('document-register-element/build/document-register-element.patched');

var _styleInstaller = require('../style-installer');

var _experiments = require('../experiments');

var _object = require('../utils/object');

var _string = require('../string');

var _types = require('../types');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TAG = 'extensions';
var UNKNOWN_EXTENSION = '_UNKNOWN_';
var LEGACY_ELEMENTS = ['amp-ad', 'amp-embed', 'amp-video'];
var CUSTOM_TEMPLATES = ['amp-mustache'];
var LOADER_PROP = '__AMP_EXT_LDR';

/**
 * Default milliseconds to wait for all extensions to load before erroring.
 * (8 seconds is the same as the CSS boilerplate timoeout)
 * @const
 */
var LOAD_TIMEOUT = 8000;

/**
 * The structure that contains the declaration of a custom element.
 *
 * @typedef {{
 *   implementationClass:
 *       function(new:../base-element.BaseElement, !Element),
 *   css: (?string|undefined),
 * }}
 */
var ExtensionElementDef = void 0;

/**
 * The structure that contains the resources declared by an extension.
 *
 * @typedef {{
 *   elements: !Object<string, !ExtensionElementDef>,
 *   services: !Array<string>,
 * }}
 */
var ExtensionDef = void 0;

/**
 * Internal structure that maintains the state of an extension through loading.
 *
 * @typedef {{
 *   extension: !ExtensionDef,
 *   auto: boolean,
 *   docFactories: !Array<function(!./ampdoc-impl.AmpDoc)>,
 *   promise: (!Promise<!ExtensionDef>|undefined),
 *   resolve: (function(!ExtensionDef)|undefined),
 *   reject: (function(!Error)|undefined),
 *   loaded: (boolean|undefined),
 *   error: (!Error|undefined),
 *   scriptPresent: (boolean|undefined),
 * }}
 * @private
 */
var ExtensionHolderDef = void 0;

/**
 * @param {string} extensionId
 * @return {boolean}
 */
function isTemplateExtension(extensionId) {
  return CUSTOM_TEMPLATES.indexOf(extensionId) >= 0;
}

/**
 * @param {string} extensionId
 * @return {boolean}
 */
function isIntermediateExtension(extensionId) {
  return (0, _string.startsWith)(extensionId, '_');
}

/**
 * Install extensions service.
 * @param {!Window} window
 * @restricted
 */
function installExtensionsService(window) {
  (0, _service.registerServiceBuilder)(window, 'extensions', Extensions);
}

/**
 * The services that manages extensions in the runtime.
 * @visibleForTesting
 */

var Extensions = exports.Extensions = function () {

  /**
   * @param {!Window} win
   */
  function Extensions(win) {
    _classCallCheck(this, Extensions);

    /** @const {!Window} */
    this.win = win;

    /** @const @private */
    this.ampdocService_ = _services.Services.ampdocServiceFor(win);

    /** @private @const {!Object<string, !ExtensionHolderDef>} */
    this.extensions_ = {};

    /** @private {?string} */
    this.currentExtensionId_ = null;
  }

  /**
   * Register and process the specified extension. The factory is called
   * immediately, which in turn is expected to register elements, templates,
   * services and document factories. This method is called by the extension's
   * script itself when it's loaded using the regular `AMP.push()` callback.
   * @param {string} extensionId
   * @param {function(!Object, !Object)} factory
   * @param {!Object} arg
   * @restricted
   */


  _createClass(Extensions, [{
    key: 'registerExtension',
    value: function registerExtension(extensionId, factory, arg) {
      var holder = this.getExtensionHolder_(extensionId, /* auto */true);
      try {
        this.currentExtensionId_ = extensionId;
        factory(arg, arg['_']);
        if ((0, _mode.getMode)().localDev || (0, _mode.getMode)().test) {
          if (Object.freeze) {
            var m = holder.extension;
            m.elements = Object.freeze(m.elements);
            holder.extension = Object.freeze(m);
          }
        }
        holder.loaded = true;
        if (holder.resolve) {
          holder.resolve(holder.extension);
        }
      } catch (e) {
        holder.error = e;
        if (holder.reject) {
          holder.reject(e);
        }
        throw e;
      } finally {
        this.currentExtensionId_ = null;
      }
    }

    /**
     * Waits for the previously included extension to complete
     * loading/registration.
     * @param {!Window} win
     * @param {string} extensionId
     * @param {number=} opt_timeout
     * @return {!Promise<?ExtensionDef>}
     */

  }, {
    key: 'waitForExtension',
    value: function waitForExtension(win, extensionId, opt_timeout) {
      return (/** @type {!Promise<?ExtensionDef>} */_services.Services.timerFor(win).timeoutPromise(opt_timeout || LOAD_TIMEOUT, this.waitFor_(this.getExtensionHolder_(extensionId, /* auto */false)), 'Render timeout waiting for extension ' + extensionId + ' to be load.')
      );
    }

    /**
     * Returns the promise that will be resolved when the extension has been
     * loaded. If necessary, adds the extension script to the page.
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Promise<!ExtensionDef>}
     */

  }, {
    key: 'preloadExtension',
    value: function preloadExtension(extensionId, opt_extensionVersion) {
      if (extensionId == 'amp-embed') {
        extensionId = 'amp-ad';
      }
      var holder = this.getExtensionHolder_(extensionId, /* auto */false);
      this.insertExtensionScriptIfNeeded_(extensionId, holder, opt_extensionVersion);
      return this.waitFor_(holder);
    }

    /**
     * Returns the promise that will be resolved when the extension has been
     * loaded. If necessary, adds the extension script to the page.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Promise<!ExtensionDef>}
     */

  }, {
    key: 'installExtensionForDoc',
    value: function installExtensionForDoc(ampdoc, extensionId, opt_extensionVersion) {
      var _this = this;

      var rootNode = ampdoc.getRootNode();
      var extLoaders = rootNode[LOADER_PROP];
      if (!extLoaders) {
        extLoaders = rootNode[LOADER_PROP] = (0, _object.map)();
      }
      if (extLoaders[extensionId]) {
        return extLoaders[extensionId];
      }
      (0, _customElementRegistry.stubElementIfNotKnown)(ampdoc.win, extensionId);
      return extLoaders[extensionId] = this.preloadExtension(extensionId, opt_extensionVersion).then(function () {
        return _this.installExtensionInDoc_(ampdoc, extensionId);
      });
    }

    /**
     * Reloads the new version of the extension.
     * @param {string} extensionId
     * @param {!Element} oldScriptElement
     * @return {!Promise<!ExtensionDef>}
     */

  }, {
    key: 'reloadExtension',
    value: function reloadExtension(extensionId, oldScriptElement) {
      // "Disconnect" the old script element and extension record.
      var holder = this.extensions_[extensionId];
      if (holder) {
        (0, _log.dev)().assert(!holder.loaded && !holder.error);
        delete this.extensions_[extensionId];
      }
      oldScriptElement.removeAttribute('custom-element');
      oldScriptElement.setAttribute('i-amphtml-loaded-new-version', extensionId);
      return this.preloadExtension(extensionId);
    }

    /**
     * Returns the promise that will be resolved with the extension element's
     * class when the extension has been loaded. If necessary, adds the extension
     * script to the page.
     * @param {string} elementName
     * @return {!Promise<function(new:../base-element.BaseElement, !Element)>}
     */

  }, {
    key: 'loadElementClass',
    value: function loadElementClass(elementName) {
      return this.preloadExtension(elementName).then(function (extension) {
        var element = (0, _log.dev)().assert(extension.elements[elementName], 'Element not found: %s', elementName);
        return element.implementationClass;
      });
    }

    /**
     * Add an element to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {string} name
     * @param {function(new:../base-element.BaseElement, !Element)} implementationClass
     * @param {?string|undefined} css
     * @restricted
     */

  }, {
    key: 'addElement',
    value: function addElement(name, implementationClass, css) {
      var _this2 = this;

      var holder = this.getCurrentExtensionHolder_(name);
      holder.extension.elements[name] = { implementationClass: implementationClass, css: css };
      this.addDocFactory(function (ampdoc) {
        _this2.installElement_(ampdoc, name, implementationClass, css);
      });
    }

    /**
     * Installs the specified element implementation in the ampdoc.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} name
     * @param {!Function} implementationClass
     * @param {?string|undefined} css
     * @private
     */

  }, {
    key: 'installElement_',
    value: function installElement_(ampdoc, name, implementationClass, css) {
      var _this3 = this;

      if (css) {
        (0, _styleInstaller.installStylesForDoc)(ampdoc, css, function () {
          _this3.registerElementInWindow_(ampdoc.win, name, implementationClass);
        }, /* isRuntimeCss */false, name);
      } else {
        this.registerElementInWindow_(ampdoc.win, name, implementationClass);
      }
    }

    /**
     * @param {!Window} win
     * @param {string} name
     * @param {!Function} implementationClass
     * @private
     */

  }, {
    key: 'registerElementInWindow_',
    value: function registerElementInWindow_(win, name, implementationClass) {
      // Register the element in the window.
      (0, _customElementRegistry.upgradeOrRegisterElement)(win, name, implementationClass);
      // Register this extension to resolve its Service Promise.
      (0, _service.registerServiceBuilder)(win, name, emptyService);
    }

    /**
     * Add a service to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {string} name
     * @param {function(new:Object, !./ampdoc-impl.AmpDoc)} implementationClass
     */

  }, {
    key: 'addService',
    value: function addService(name, implementationClass) {
      var holder = this.getCurrentExtensionHolder_();
      holder.extension.services.push(name);
      this.addDocFactory(function (ampdoc) {
        (0, _service.registerServiceBuilderForDoc)(ampdoc, name, implementationClass,
        /* instantiate */true);
      });
    }

    /**
     * Add a ampdoc factory to the extension currently being registered. This is a
     * restricted method and it's allowed to be called only during the overall
     * extension registration.
     * @param {function(!./ampdoc-impl.AmpDoc)} factory
     * @param {string=} opt_forName
     * @restricted
     */

  }, {
    key: 'addDocFactory',
    value: function addDocFactory(factory, opt_forName) {
      var holder = this.getCurrentExtensionHolder_(opt_forName);
      holder.docFactories.push(factory);

      // If a single-doc mode, or is shadow-doc mode and has AmpDocShell,
      // run factory right away if it's included by the doc.
      if (this.currentExtensionId_ && (this.ampdocService_.isSingleDoc() || this.ampdocService_.hasAmpDocShell())) {
        var ampdoc = this.ampdocService_.getAmpDoc(this.win.document);
        var extensionId = (0, _log.dev)().assertString(this.currentExtensionId_);
        if (ampdoc.declaresExtension(extensionId) || holder.auto) {
          factory(ampdoc);
        }
      }
    }

    /**
     * Installs all ampdoc factories previously registered with
     * `addDocFactory`.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {!Array<string>} extensionIds
     * @return {!Promise}
     * @restricted
     */

  }, {
    key: 'installExtensionsInDoc',
    value: function installExtensionsInDoc(ampdoc, extensionIds) {
      var _this4 = this;

      var promises = [];
      extensionIds.forEach(function (extensionId) {
        promises.push(_this4.installExtensionInDoc_(ampdoc, extensionId));
      });
      return Promise.all(promises);
    }

    /**
     * Installs all ampdoc factories for the specified extension.
     * @param {!./ampdoc-impl.AmpDoc} ampdoc
     * @param {string} extensionId
     * @return {!Promise}
     * @private
     */

  }, {
    key: 'installExtensionInDoc_',
    value: function installExtensionInDoc_(ampdoc, extensionId) {
      var holder = this.getExtensionHolder_(extensionId, /* auto */false);
      return this.waitFor_(holder).then(function () {
        ampdoc.declareExtension(extensionId);
        holder.docFactories.forEach(function (factory) {
          try {
            factory(ampdoc);
          } catch (e) {
            (0, _log.rethrowAsync)('Doc factory failed: ', e, extensionId);
          }
        });
      });
    }

    /**
     * Install extensions in the child window (friendly iframe). The pre-install
     * callback, if specified, is executed after polyfills have been configured
     * but before the first extension is installed.
     * @param {!Window} childWin
     * @param {!Array<string>} extensionIds
     * @param {function(!Window)=} opt_preinstallCallback
     * @return {!Promise}
     * @restricted
     */

  }, {
    key: 'installExtensionsInChildWindow',
    value: function installExtensionsInChildWindow(childWin, extensionIds, opt_preinstallCallback) {
      var _this5 = this;

      var topWin = this.win;
      var parentWin = (0, _types.toWin)(childWin.frameElement.ownerDocument.defaultView);
      (0, _service.setParentWindow)(childWin, parentWin);

      // Install necessary polyfills.
      installPolyfillsInChildWindow(parentWin, childWin);

      // Install runtime styles.
      (0, _styleInstaller.installStylesLegacy)(childWin.document, _css.cssText, /* callback */null,
      /* opt_isRuntimeCss */true, /* opt_ext */'amp-runtime');

      // Run pre-install callback.
      if (opt_preinstallCallback) {
        opt_preinstallCallback(childWin);
      }

      // Adopt embeddable services.
      adoptStandardServicesForEmbed(childWin);

      // Install built-ins and legacy elements.
      copyBuiltinElementsToChildWindow(topWin, childWin);
      stubLegacyElements(childWin);

      var promises = [];
      extensionIds.forEach(function (extensionId) {
        // This will extend automatic upgrade of custom elements from top
        // window to the child window.
        if (!LEGACY_ELEMENTS.includes(extensionId)) {
          (0, _customElementRegistry.stubElementIfNotKnown)(childWin, extensionId);
        }

        // Install CSS.
        var promise = _this5.preloadExtension(extensionId).then(function (extension) {
          // Adopt embeddable extension services.
          extension.services.forEach(function (service) {
            (0, _service.adoptServiceForEmbedIfEmbeddable)(childWin, service);
          });

          // Adopt the custom elements.
          var elementPromises = null;

          var _loop = function _loop(elementName) {
            var elementDef = extension.elements[elementName];
            var elementPromise = new Promise(function (resolve) {
              if (elementDef.css) {
                (0, _styleInstaller.installStylesLegacy)(childWin.document, elementDef.css,
                /* completeCallback */resolve,
                /* isRuntime */false, extensionId);
              } else {
                resolve();
              }
            }).then(function () {
              (0, _customElementRegistry.upgradeOrRegisterElement)(childWin, elementName, elementDef.implementationClass);
            });
            if (elementPromises) {
              elementPromises.push(elementPromise);
            } else {
              elementPromises = [elementPromise];
            }
          };

          for (var elementName in extension.elements) {
            _loop(elementName);
          }
          if (elementPromises) {
            return Promise.all(elementPromises).then(function () {
              return extension;
            });
          }
          return extension;
        });
        promises.push(promise);
      });
      return Promise.all(promises);
    }

    /**
     * Creates or returns an existing extension holder.
     * @param {string} extensionId
     * @param {boolean} auto
     * @return {!ExtensionHolderDef}
     * @private
     */

  }, {
    key: 'getExtensionHolder_',
    value: function getExtensionHolder_(extensionId, auto) {
      var holder = this.extensions_[extensionId];
      if (!holder) {
        var extension = /** @type {ExtensionDef} */{
          elements: {},
          services: []
        };
        holder = /** @type {ExtensionHolderDef} */{
          extension: extension,
          auto: auto,
          docFactories: [],
          promise: undefined,
          resolve: undefined,
          reject: undefined,
          loaded: undefined,
          error: undefined,
          scriptPresent: undefined
        };
        this.extensions_[extensionId] = holder;
      }
      return holder;
    }

    /**
     * Returns the holder for the extension currently being registered.
     * @param {string=} opt_forName Used for logging only.
     * @return {!ExtensionHolderDef}
     * @private
     */

  }, {
    key: 'getCurrentExtensionHolder_',
    value: function getCurrentExtensionHolder_(opt_forName) {
      if (!this.currentExtensionId_ && !(0, _mode.getMode)().test) {
        (0, _log.dev)().error(TAG, 'unknown extension for ', opt_forName);
      }
      return this.getExtensionHolder_(this.currentExtensionId_ || UNKNOWN_EXTENSION,
      /* auto */true);
    }

    /**
     * Creates or returns an existing promise that will yield as soon as the
     * extension has been loaded.
     * @param {!ExtensionHolderDef} holder
     * @return {!Promise<!ExtensionDef>}
     * @private
     */

  }, {
    key: 'waitFor_',
    value: function waitFor_(holder) {
      if (!holder.promise) {
        if (holder.loaded) {
          holder.promise = Promise.resolve(holder.extension);
        } else if (holder.error) {
          holder.promise = Promise.reject(holder.error);
        } else {
          var deferred = new _promise.Deferred();
          holder.promise = deferred.promise;
          holder.resolve = deferred.resolve;
          holder.reject = deferred.reject;
        }
      }
      return holder.promise;
    }

    /**
     * Ensures that the script has already been injected in the page.
     * @param {string} extensionId
     * @param {!ExtensionHolderDef} holder
     * @param {string=} opt_extensionVersion
     * @private
     */

  }, {
    key: 'insertExtensionScriptIfNeeded_',
    value: function insertExtensionScriptIfNeeded_(extensionId, holder, opt_extensionVersion) {
      if (this.isExtensionScriptRequired_(extensionId, holder)) {
        var scriptElement = this.createExtensionScript_(extensionId, opt_extensionVersion);
        this.win.document.head.appendChild(scriptElement);
        holder.scriptPresent = true;
      }
    }

    /**
     * Determine the need to add amp extension script to document.
     * @param {string} extensionId
     * @param {!ExtensionHolderDef} holder
     * @return {boolean}
     * @private
     */

  }, {
    key: 'isExtensionScriptRequired_',
    value: function isExtensionScriptRequired_(extensionId, holder) {
      if (holder.loaded || holder.error) {
        return false;
      }
      if (holder.scriptPresent === undefined) {
        var scriptInHead = this.win.document.head. /*OK*/querySelector('[custom-element="' + extensionId + '"]');
        holder.scriptPresent = !!scriptInHead;
      }
      return !holder.scriptPresent;
    }

    /**
     * Create the missing amp extension HTML script element.
     * @param {string} extensionId
     * @param {string=} opt_extensionVersion
     * @return {!Element} Script object
     * @private
     */

  }, {
    key: 'createExtensionScript_',
    value: function createExtensionScript_(extensionId, opt_extensionVersion) {
      var scriptElement = this.win.document.createElement('script');
      scriptElement.async = true;
      if (isIntermediateExtension(extensionId)) {
        opt_extensionVersion = '';
      } else {
        scriptElement.setAttribute(isTemplateExtension(extensionId) ? 'custom-template' : 'custom-element', extensionId);
      }
      scriptElement.setAttribute('data-script', extensionId);
      scriptElement.setAttribute('i-amphtml-inserted', '');
      var loc = this.win.location;
      if ((0, _mode.getMode)().test && this.win.testLocation) {
        loc = this.win.testLocation;
      }
      var scriptSrc = (0, _extensionLocation.calculateExtensionScriptUrl)(loc, extensionId, opt_extensionVersion, (0, _mode.getMode)().localDev);
      scriptElement.src = scriptSrc;
      return scriptElement;
    }
  }]);

  return Extensions;
}();

/**
 * Install builtins.
 * @param {!Window} win
 * @restricted
 */


function installBuiltinElements(win) {
  (0, _ampImg.installImg)(win);
  (0, _ampPixel.installPixel)(win);
  (0, _ampLayout.installLayout)(win);
}

/**
 * Copy builtins to a child window.
 * @param {!Window} parentWin
 * @param {!Window} childWin
 */
function copyBuiltinElementsToChildWindow(parentWin, childWin) {
  (0, _customElementRegistry.copyElementToChildWindow)(parentWin, childWin, 'amp-img');
  (0, _customElementRegistry.copyElementToChildWindow)(parentWin, childWin, 'amp-pixel');
}

/**
 * @param {!Window} win
 */
function stubLegacyElements(win) {
  LEGACY_ELEMENTS.forEach(function (name) {
    (0, _customElementRegistry.stubElementIfNotKnown)(win, name);
  });
}

/**
 * Install polyfills in the child window (friendly iframe).
 * @param {!Window} parentWin
 * @param {!Window} childWin
 */
function installPolyfillsInChildWindow(parentWin, childWin) {
  (0, _documentContains.install)(childWin);
  (0, _domtokenlistToggle.install)(childWin);
  if ((0, _experiments.isExperimentOn)(parentWin, 'custom-elements-v1')) {
    (0, _customElements.install)(childWin, function () {
      function _class() {
        _classCallCheck(this, _class);
      }

      return _class;
    }());
  } else {
    (0, _documentRegisterElement.installCustomElements)(childWin, 'auto');
  }
}

/**
 * Adopt predefined core services for the child window (friendly iframe).
 * @param {!Window} childWin
 */
function adoptStandardServicesForEmbed(childWin) {
  // The order of service adoptations is important.
  // TODO(dvoytenko): Refactor service registration if this set becomes
  // to pass the "embeddable" flag if this set becomes too unwieldy.
  (0, _service.adoptServiceForEmbed)(childWin, 'url');
  (0, _service.adoptServiceForEmbed)(childWin, 'action');
  (0, _service.adoptServiceForEmbed)(childWin, 'standard-actions');
  (0, _service.adoptServiceForEmbed)(childWin, 'navigation');
}

/**
 * @return {!Object}
 */
function emptyService() {
  // All services need to resolve to an object.
  return {};
}

},{"../../build/css":1,"../../builtins/amp-img":2,"../../builtins/amp-layout":3,"../../builtins/amp-pixel":4,"../experiments":28,"../log":45,"../mode":47,"../polyfills/custom-elements":53,"../polyfills/document-contains":54,"../polyfills/domtokenlist-toggle":55,"../service":63,"../services":104,"../string":108,"../style-installer":109,"../types":113,"../utils/object":123,"../utils/promise":125,"./custom-element-registry":71,"./extension-location":74,"document-register-element/build/document-register-element.patched":5}],76:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixedLayer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2016 The AMP HTML Authors. All Rights Reserved.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _services = require('../services');

var _style = require('../style');

var _log = require('../log');

var _string = require('../string');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TAG = 'FixedLayer';

var DECLARED_FIXED_PROP = '__AMP_DECLFIXED';
var DECLARED_STICKY_PROP = '__AMP_DECLSTICKY';

/**
 * The fixed layer is a *sibling* of the body element. I.e. it's a direct
 * child of documentElement. It's used to manage the `position:fixed` and
 * `position:sticky` elements in iOS-iframe case due to the
 * https://bugs.webkit.org/show_bug.cgi?id=154399 bug, which is itself
 * a result of workaround for the issue where scrolling is not supported
 * in iframes (https://bugs.webkit.org/show_bug.cgi?id=149264).
 * This implementation finds all elements that could be `fixed` or `sticky`
 * and checks on major relayouts if they are indeed `fixed`/`sticky`.
 * Some `fixed` elements may be moved into the "transfer layer".
 */

var FixedLayer = exports.FixedLayer = function () {
  /**
   * @param {!./ampdoc-impl.AmpDoc} ampdoc
   * @param {!./vsync-impl.Vsync} vsync
   * @param {number} borderTop
   * @param {number} paddingTop
   * @param {boolean} transfer
   */
  function FixedLayer(ampdoc, vsync, borderTop, paddingTop, transfer) {
    _classCallCheck(this, FixedLayer);

    /** @const {!./ampdoc-impl.AmpDoc} */
    this.ampdoc = ampdoc;

    /** @private @const */
    this.vsync_ = vsync;

    /** @const @private {number} */
    this.borderTop_ = borderTop;

    /** @private {number} */
    this.paddingTop_ = paddingTop;

    /** @private {number} */
    this.committedPaddingTop_ = paddingTop;

    /** @private @const {boolean} */
    this.transfer_ = transfer && ampdoc.isSingleDoc();

    /** @private {?TransferLayerDef} */
    this.transferLayer_ = null;

    /** @private {number} */
    this.counter_ = 0;

    /** @const @private {!Array<!ElementDef>} */
    this.elements_ = [];
  }

  /**
   * @param {boolean} visible
   */


  _createClass(FixedLayer, [{
    key: 'setVisible',
    value: function setVisible(visible) {
      var _this = this;

      if (this.transferLayer_) {
        this.vsync_.mutate(function () {
          (0, _style.setStyle)(_this.transferLayer_.getRoot(), 'visibility', visible ? 'visible' : 'hidden');
        });
      }
    }

    /**
     * Must be always called after DOMReady.
     */

  }, {
    key: 'setup',
    value: function setup() {
      var stylesheets = this.ampdoc.getRootNode().styleSheets;
      if (!stylesheets) {
        return;
      }

      var fixedSelectors = [];
      var stickySelectors = [];
      for (var i = 0; i < stylesheets.length; i++) {
        var stylesheet = stylesheets[i];
        var ownerNode = stylesheet.ownerNode;

        if (stylesheet.disabled || !ownerNode || ownerNode.tagName != 'STYLE' || ownerNode.hasAttribute('amp-boilerplate') || ownerNode.hasAttribute('amp-runtime') || ownerNode.hasAttribute('amp-extension')) {
          continue;
        }
        this.discoverSelectors_(stylesheet.cssRules, fixedSelectors, stickySelectors);
      }

      this.trySetupSelectorsNoInline(fixedSelectors, stickySelectors);

      // Sort in document order.
      this.sortInDomOrder_();

      var platform = _services.Services.platformFor(this.ampdoc.win);
      if (this.elements_.length > 0 && !this.transfer_ && platform.isIos()) {
        (0, _log.user)().warn(TAG, 'Please test this page inside of an AMP Viewer such' + ' as Google\'s because the fixed or sticky positioning might have' + ' slightly different layout.');
      }

      this.update();
    }

    /**
     * Updates the viewer's padding-top position and recalculates offsets of
     * all elements. The padding update can be transient, in which case the
     * UI itself is not updated leaving the blank space up top, which is invisible
     * due to scroll position. This mode saves significant resources. However,
     * eventhough layout is not updated, the fixed/sticky coordinates still need
     * to be recalculated.
     * @param {number} paddingTop
     * @param {boolean} opt_transient
     */

  }, {
    key: 'updatePaddingTop',
    value: function updatePaddingTop(paddingTop, opt_transient) {
      this.paddingTop_ = paddingTop;
      if (!opt_transient) {
        this.committedPaddingTop_ = paddingTop;
      }
      this.update();
    }

    /**
     * Apply or reset transform style to fixed elements. The existing transition,
     * if any, is disabled when custom transform is supplied.
     * @param {?string} transform
     */

  }, {
    key: 'transformMutate',
    value: function transformMutate(transform) {
      // Unfortunately, we can't do anything with sticky elements here. Updating
      // `top` in animation frames causes reflow on all platforms and we can't
      // determine whether an element is currently docked to apply transform.
      if (transform) {
        // Apply transform style to all fixed elements
        this.elements_.forEach(function (e) {
          if (e.fixedNow && e.top) {
            (0, _style.setStyle)(e.element, 'transition', 'none');
            if (e.transform && e.transform != 'none') {
              (0, _style.setStyle)(e.element, 'transform', e.transform + ' ' + transform);
            } else {
              (0, _style.setStyle)(e.element, 'transform', transform);
            }
          }
        });
      } else {
        // Reset transform style to all fixed elements
        this.elements_.forEach(function (e) {
          if (e.fixedNow && e.top) {
            (0, _style.setStyles)(e.element, {
              transform: '',
              transition: ''
            });
          }
        });
      }
    }

    /**
     * Adds the element directly into the fixed/sticky layer, bypassing discovery.
     * @param {!Element} element
     * @param {boolean=} opt_forceTransfer If set to true , then the element needs
     *    to be forcefully transferred to the transfer layer.
     * @return {!Promise}
     */

  }, {
    key: 'addElement',
    value: function addElement(element, opt_forceTransfer) {
      var win = this.ampdoc.win;

      if (!element. /*OK*/offsetParent && (0, _style.computedStyle)(win, element).display === 'none') {
        (0, _log.dev)().error(TAG, 'Tried to add display:none element to FixedLayer', element.tagName);
      }
      this.setupElement_(element,
      /* selector */'*',
      /* position */'fixed', opt_forceTransfer);
      this.sortInDomOrder_();
      return this.update();
    }

    /**
     * Removes the element from the fixed/sticky layer.
     * @param {!Element} element
     */

  }, {
    key: 'removeElement',
    value: function removeElement(element) {
      var _this2 = this;

      var removed = this.removeElement_(element);
      if (removed.length > 0 && this.transferLayer_) {
        this.vsync_.mutate(function () {
          for (var i = 0; i < removed.length; i++) {
            var fe = removed[i];
            if (fe.position == 'fixed') {
              _this2.transferLayer_.returnFrom(fe);
            }
          }
        });
      }
    }

    /**
     * Whether the element is declared as fixed in any of the user's stylesheets.
     * Will include any matches, not necessarily currently fixed elements.
     * @param {!Element} element
     * @return {boolean}
     */

  }, {
    key: 'isDeclaredFixed',
    value: function isDeclaredFixed(element) {
      return !!element[DECLARED_FIXED_PROP];
    }

    /**
     * Whether the element is declared as sticky in any of the user's stylesheets.
     * Will include any matches, not necessarily currently sticky elements.
     * @param {!Element} element
     * @return {boolean}
     */

  }, {
    key: 'isDeclaredSticky',
    value: function isDeclaredSticky(element) {
      return !!element[DECLARED_STICKY_PROP];
    }

    /**
     * Performs fixed/sticky actions.
     * 1. Updates `top` styling if necessary.
     * 2. On iOS/Iframe moves elements between fixed layer and BODY depending on
     * whether they are currently visible and fixed
     * @return {!Promise}
     */

  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      // Some of the elements may no longer be in DOM.
      /** @type {!Array<!ElementDef>} */
      var toRemove = this.elements_.filter(function (fe) {
        return !_this3.ampdoc.contains(fe.element);
      });
      toRemove.forEach(function (fe) {
        return _this3.removeElement_(fe.element);
      });

      if (this.elements_.length == 0) {
        return Promise.resolve();
      }

      // Next, the positioning-related properties will be measured. If a
      // potentially fixed/sticky element turns out to be actually fixed/sticky,
      // it will be decorated and possibly moved to a separate layer.
      var hasTransferables = false;
      return this.vsync_.runPromise({
        measure: function measure(state) {
          var elements = _this3.elements_;
          var autoTops = [];
          var win = _this3.ampdoc.win;

          // Notice that this code intentionally breaks vsync contract.
          // Unfortunately, there's no way to reliably test whether or not
          // `top` has been set to a non-auto value on all platforms. To work
          // this around, this code compares `style.top` values with a new
          // `style.bottom` value.
          // 1. Unset top from previous mutates and set bottom to an extremely
          // large value (to catch cases where sticky-tops are in a long way
          // down inside a scroller).

          for (var i = 0; i < elements.length; i++) {
            (0, _style.setImportantStyles)(elements[i].element, {
              top: '',
              bottom: '-9999vh',
              transition: 'none'
            });
          }
          // 2. Capture the `style.top` with this new `style.bottom` value. If
          // this element has a non-auto top, this value will remain constant
          // regardless of bottom.
          for (var _i = 0; _i < elements.length; _i++) {
            autoTops.push((0, _style.computedStyle)(win, elements[_i].element).top);
          }
          // 3. Cleanup the `style.bottom`.
          for (var _i2 = 0; _i2 < elements.length; _i2++) {
            (0, _style.setStyle)(elements[_i2].element, 'bottom', '');
          }

          for (var _i3 = 0; _i3 < elements.length; _i3++) {
            var fe = elements[_i3];
            var element = fe.element;

            var style = (0, _style.computedStyle)(win, element);

            var offsetWidth = element.offsetWidth,
                offsetHeight = element.offsetHeight,
                offsetTop = element.offsetTop;
            var _style$position = style.position,
                position = _style$position === undefined ? '' : _style$position,
                _style$display = style.display,
                display = _style$display === undefined ? '' : _style$display,
                bottom = style.bottom,
                zIndex = style.zIndex;

            var opacity = parseFloat(style.opacity);
            var transform = style[(0, _style.getVendorJsPropertyName)(style, 'transform')];
            var top = style.top;

            // Element is indeed fixed. Visibility is added to the test to
            // avoid moving around invisible elements.

            var isFixed = position == 'fixed' && (fe.forceTransfer || offsetWidth > 0 && offsetHeight > 0);
            // Element is indeed sticky.
            var isSticky = (0, _string.endsWith)(position, 'sticky');
            var isDisplayed = display !== 'none';

            if (!isDisplayed || !(isFixed || isSticky)) {
              state[fe.id] = {
                fixed: false,
                sticky: false,
                transferrable: false,
                top: '',
                zIndex: ''
              };
              continue;
            }

            if (top === 'auto' || autoTops[_i3] !== top) {
              if (isFixed && offsetTop === _this3.committedPaddingTop_ + _this3.borderTop_) {
                top = '0px';
              } else {
                top = '';
              }
            }

            // Transferability requires element to be fixed and top or bottom to
            // be styled with `0`. Also, do not transfer transparent
            // elements - that's a lot of work for no benefit.  Additionally,
            // transparent elements used for "service" needs and thus
            // best kept in the original tree. The visibility, however, is not
            // considered because `visibility` CSS is inherited. Also, the
            // `height` is constrained to at most 300px. This is to avoid
            // transfering of more substantial sections for now. Likely to be
            // relaxed in the future.
            var isTransferrable = isFixed && (fe.forceTransfer || opacity > 0 && offsetHeight < 300 && (_this3.isAllowedCoord_(top) || _this3.isAllowedCoord_(bottom)));
            if (isTransferrable) {
              hasTransferables = true;
            }
            state[fe.id] = {
              fixed: isFixed,
              sticky: isSticky,
              transferrable: isTransferrable,
              top: top,
              zIndex: zIndex,
              transform: transform
            };
          }
        },
        mutate: function mutate(state) {
          if (hasTransferables && _this3.transfer_) {
            _this3.getTransferLayer_().update();
          }
          var elements = _this3.elements_;
          for (var i = 0; i < elements.length; i++) {
            var fe = elements[i];
            var feState = state[fe.id];

            // Fix a bug with Safari. For some reason, you cannot unset
            // transition when it's important. You can, however, set it to a valid
            // non-important value, then unset it.
            (0, _style.setStyle)(fe.element, 'transition', 'none');
            // Note: This MUST be done after measurements are taken.
            // Transitions will mess up everything and, depending on when paints
            // happen, mutates of transition and bottom at the same time may be
            // make the transition active.
            (0, _style.setStyle)(fe.element, 'transition', '');

            if (feState) {
              _this3.mutateElement_(fe, i, feState);
            }
          }
        }
      }, {}).catch(function (error) {
        // Fail silently.
        (0, _log.dev)().error(TAG, 'Failed to mutate fixed elements:', error);
      });
    }

    /**
     * We currently only allow elements with `top: 0` or `bottom: 0`.
     * @param {string} s
     * @return {boolean}
     */

  }, {
    key: 'isAllowedCoord_',
    value: function isAllowedCoord_(s) {
      return !!s && parseInt(s, 10) == 0;
    }

    /**
     * Calls `setupSelectors_` in a try-catch.
     * Fails quietly with a dev error if call fails.
     * This method should not be inlined to prevent TryCatch deoptimization.
     * NoInline keyword at the end of function name also prevents Closure compiler
     * from inlining the function.
     * @param {!Array<string>} fixedSelectors
     * @param {!Array<string>} stickySelectors
     * @private
     */

  }, {
    key: 'trySetupSelectorsNoInline',
    value: function trySetupSelectorsNoInline(fixedSelectors, stickySelectors) {
      try {
        this.setupSelectors_(fixedSelectors, stickySelectors);
      } catch (e) {
        // Fail quietly.
        (0, _log.dev)().error(TAG, 'Failed to setup fixed elements:', e);
      }
    }

    /**
     * Calls `setupElement_` for up to 10 elements matching each selector
     * in `fixedSelectors` and for all selectors in `stickySelectors`.
     * @param {!Array<string>} fixedSelectors
     * @param {!Array<string>} stickySelectors
     * @private
     */

  }, {
    key: 'setupSelectors_',
    value: function setupSelectors_(fixedSelectors, stickySelectors) {
      for (var i = 0; i < fixedSelectors.length; i++) {
        var fixedSelector = fixedSelectors[i];
        var elements = this.ampdoc.getRootNode().querySelectorAll(fixedSelector);
        for (var j = 0; j < elements.length; j++) {
          if (j > 10) {
            // We shouldn't have too many of `fixed` elements.
            break;
          }
          this.setupElement_(elements[j], fixedSelector, 'fixed');
        }
      }
      for (var _i4 = 0; _i4 < stickySelectors.length; _i4++) {
        var stickySelector = stickySelectors[_i4];
        var _elements = this.ampdoc.getRootNode().querySelectorAll(stickySelector);
        for (var _j = 0; _j < _elements.length; _j++) {
          this.setupElement_(_elements[_j], stickySelector, 'sticky');
        }
      }
    }

    /**
     * If the given element has a `style` attribute with a top/bottom CSS rule,
     * display a user error. FixedLayer's implementation currently overrides
     * top, bottom and a few other CSS rules.
     * @param {!Element} element
     * @private
     */

  }, {
    key: 'warnAboutInlineStylesIfNecessary_',
    value: function warnAboutInlineStylesIfNecessary_(element) {
      if (element.hasAttribute('style') && (element.style.top || element.style.bottom)) {
        (0, _log.user)().error(TAG, 'Inline styles with `top`, `bottom` and other ' + 'CSS rules are not supported yet for fixed or sticky elements ' + '(#14186). Unexpected behavior may occur.', element);
      }
    }

    /**
     * This method records the potentially fixed or sticky element. One of a more
     * critical functions - it records all selectors that may apply "fixed"
     * or "sticky" to this element to check them later.
     *
     * @param {!Element} element
     * @param {string} selector
     * @param {string} position
     * @param {boolean=} opt_forceTransfer If set to true , then the element needs
     *    to be forcefully transferred to the transfer layer.
     * @private
     */

  }, {
    key: 'setupElement_',
    value: function setupElement_(element, selector, position, opt_forceTransfer) {
      // Warn that pub-authored inline styles may be overriden by FixedLayer.
      this.warnAboutInlineStylesIfNecessary_(element);

      var fe = null;
      for (var i = 0; i < this.elements_.length; i++) {
        var el = this.elements_[i];
        if (el.element == element && el.position == position) {
          fe = el;
          break;
        }
      }
      var isFixed = position == 'fixed';
      if (fe) {
        if (!fe.selectors.includes(selector)) {
          // Already seen.
          fe.selectors.push(selector);
        }
      } else {
        // A new entry.
        var id = 'F' + this.counter_++;
        element.setAttribute('i-amphtml-fixedid', id);
        if (isFixed) {
          element[DECLARED_FIXED_PROP] = true;
        } else {
          element[DECLARED_STICKY_PROP] = true;
        }
        fe = {
          id: id,
          element: element,
          position: position,
          selectors: [selector],
          fixedNow: false,
          stickyNow: false
        };
        this.elements_.push(fe);
      }

      fe.forceTransfer = isFixed && !!opt_forceTransfer;
    }

    /**
     * Removes element from the fixed layer.
     *
     * @param {!Element} element
     * @return {!Array<!ElementDef>}
     * @private
     */

  }, {
    key: 'removeElement_',
    value: function removeElement_(element) {
      var removed = [];
      for (var i = 0; i < this.elements_.length; i++) {
        var fe = this.elements_[i];
        if (fe.element == element) {
          this.vsync_.mutate(function () {
            (0, _style.setStyle)(element, 'top', '');
          });
          this.elements_.splice(i, 1);
          removed.push(fe);
        }
      }
      return removed;
    }

    /** @private */

  }, {
    key: 'sortInDomOrder_',
    value: function sortInDomOrder_() {
      this.elements_.sort(function (fe1, fe2) {
        // 8 | 2 = 0x0A
        // 2 - preceeding
        // 8 - contains
        if (fe1.element.compareDocumentPosition(fe2.element) & 0x0A != 0) {
          return 1;
        }
        return -1;
      });
    }

    /**
     * Mutates the fixed/sticky element. At this point it's determined that the
     * element is indeed fixed/sticky. There are two main functions here:
     *  1. `top` has to be updated to reflect viewer's paddingTop.
     *  2. The element may need to be transfered to the separate fixed layer.
     *
     * @param {!ElementDef} fe
     * @param {number} index
     * @param {!ElementStateDef} state
     * @private
     */

  }, {
    key: 'mutateElement_',
    value: function mutateElement_(fe, index, state) {
      var element = fe.element,
          oldFixed = fe.fixedNow;


      fe.fixedNow = state.fixed;
      fe.stickyNow = state.sticky;
      fe.top = state.fixed || state.sticky ? state.top : '';
      fe.transform = state.transform;

      // Move back to the BODY layer and reset transfer z-index.
      if (oldFixed && (!state.fixed || !state.transferrable) && this.transferLayer_) {
        this.transferLayer_.returnFrom(fe);
      }

      // Update `top`. This is necessary to adjust position to the viewer's
      // paddingTop.
      if (state.top && (state.fixed || state.sticky)) {
        if (state.fixed || !this.transfer_) {
          // Fixed positions always need top offsetting, as well as stickies on
          // non iOS Safari.
          (0, _style.setStyle)(element, 'top', 'calc(' + state.top + ' + ' + this.paddingTop_ + 'px)');
        } else {
          // On iOS Safari (this.transfer_ = true), stickies cannot
          // have an offset because they are already offset by the padding-top.
          if (this.committedPaddingTop_ === this.paddingTop_) {
            // So, when the header is shown, just use top.
            (0, _style.setStyle)(element, 'top', state.top);
          } else {
            // When the header is not shown, we need to subtract the padding top.
            (0, _style.setStyle)(element, 'top', 'calc(' + state.top + ' - ' + this.committedPaddingTop_ + 'px)');
          }
        }
      }

      // Move element to the fixed layer.
      if (this.transfer_ && state.fixed && state.transferrable) {
        this.getTransferLayer_().transferTo(fe, index, state);
      }
    }

    /**
     * @return {?TransferLayerDef}
     */

  }, {
    key: 'getTransferLayer_',
    value: function getTransferLayer_() {
      // This mode is only allowed for a single-doc case.
      if (!this.transfer_ || this.transferLayer_) {
        return this.transferLayer_;
      }
      var doc = this.ampdoc.win.document;
      this.transferLayer_ = doc.body.shadowRoot ? new TransferLayerShadow(doc) : new TransferLayerBody(doc);
      return this.transferLayer_;
    }

    /**
     * Find all `position:fixed` and `position:sticky` elements.
     * @param {!Array<CSSRule>} rules
     * @param {!Array<string>} foundSelectors
     * @param {!Array<string>} stickySelectors
     * @private
     */

  }, {
    key: 'discoverSelectors_',
    value: function discoverSelectors_(rules, foundSelectors, stickySelectors) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (rule.type == /* CSSStyleRule */1) {
          if (rule.selectorText != '*' && rule.style.position) {
            if (rule.style.position == 'fixed') {
              foundSelectors.push(rule.selectorText);
            } else if ((0, _string.endsWith)(rule.style.position, 'sticky')) {
              stickySelectors.push(rule.selectorText);
            }
          }
        } else if (rule.type == /* CSSMediaRule */4) {
          this.discoverSelectors_(rule.cssRules, foundSelectors, stickySelectors);
        } else if (rule.type == /* CSSSupportsRule */12) {
          this.discoverSelectors_(rule.cssRules, foundSelectors, stickySelectors);
        }
      }
    }
  }]);

  return FixedLayer;
}();

/**
 * @typedef {{
 *   id: string,
 *   selectors: !Array,
 *   element: !Element,
 *   position: string,
 *   placeholder: (?Element|undefined),
 *   fixedNow: boolean,
 *   stickyNow: boolean,
 *   top: (string|undefined),
 *   transform: (string|undefined),
 *   forceTransfer: (boolean|undefined),
 * }}
 */


var ElementDef = void 0;

/**
 * @typedef {{
 *   fixed: boolean,
 *   sticky: boolean,
 *   transferrable: boolean,
 *   top: string,
 *   zIndex: string,
 * }}
 */
var ElementStateDef = void 0;

/**
 * The contract for transfer layer.
 * @interface
 */

var TransferLayerDef = function () {
  function TransferLayerDef() {
    _classCallCheck(this, TransferLayerDef);
  }

  _createClass(TransferLayerDef, [{
    key: 'getRoot',


    /**
     * @return {!Element}
     */
    value: function getRoot() {}

    /**
     * Update most current styles for the transfer layer.
     */

  }, {
    key: 'update',
    value: function update() {}

    /**
     * Transfer the element from the body into the transfer layer.
     * @param {!ElementDef} unusedFe
     * @param {number} unusedIndex
     * @param {!ElementStateDef} unusedState
     */

  }, {
    key: 'transferTo',
    value: function transferTo(unusedFe, unusedIndex, unusedState) {}

    /**
     * Return the element from the transfer layer back to the body.
     * @param {!ElementDef} unusedFe
     */

  }, {
    key: 'returnFrom',
    value: function returnFrom(unusedFe) {}
  }]);

  return TransferLayerDef;
}();

/**
 * The parallel `<body>` element is created and fixed elements are moved into
 * this element.
 * @implements {TransferLayerDef}
 */


var TransferLayerBody = function () {
  /**
   * @param {!Document} doc
   */
  function TransferLayerBody(doc) {
    _classCallCheck(this, TransferLayerBody);

    /** @private @const {!Document} */
    this.doc_ = doc;

    /** @private @const {!Element} */
    this.layer_ = doc.body.cloneNode( /* deep */false);
    this.layer_.removeAttribute('style');
    (0, _style.setStyles)(this.layer_, {
      position: 'absolute',
      top: 0,
      left: 0,
      height: 0,
      width: 0,
      pointerEvents: 'none',
      overflow: 'hidden',

      // Reset possible BODY styles.
      animation: 'none',
      background: 'none',
      border: 'none',
      borderImage: 'none',
      boxSizing: 'border-box',
      boxShadow: 'none',
      display: 'block',
      float: 'none',
      margin: 0,
      opacity: 1,
      outline: 'none',
      padding: 'none',
      transform: 'none',
      transition: 'none',
      visibility: 'visible'
    });
    doc.documentElement.appendChild(this.layer_);
  }

  /** @override */


  _createClass(TransferLayerBody, [{
    key: 'getRoot',
    value: function getRoot() {
      return this.layer_;
    }

    /** @override */

  }, {
    key: 'update',
    value: function update() {
      if (this.layer_.className != this.doc_.body.className) {
        this.layer_.className = this.doc_.body.className;
      }
    }

    /** @override */

  }, {
    key: 'transferTo',
    value: function transferTo(fe, index, state) {
      var _this4 = this;

      var element = fe.element;

      if (element.parentElement == this.layer_) {
        return;
      }

      (0, _log.dev)().fine(TAG, 'transfer to fixed:', fe.id, fe.element);
      (0, _log.user)().warn(TAG, 'In order to improve scrolling performance in Safari,' + ' we now move the element to a fixed positioning layer:', fe.element);

      if (!fe.placeholder) {
        // Never been transfered before: ensure that it's properly configured.
        (0, _style.setStyle)(element, 'pointer-events', 'initial');
        var placeholder = fe.placeholder = this.doc_.createElement('i-amphtml-fpa');
        (0, _style.setStyle)(placeholder, 'display', 'none');
        placeholder.setAttribute('i-amphtml-fixedid', fe.id);
      }

      // Calculate z-index based on the declared z-index and DOM position.
      (0, _style.setStyle)(element, 'zIndex', 'calc(' + (10000 + index) + ' + ' + (state.zIndex || 0) + ')');

      element.parentElement.replaceChild(fe.placeholder, element);
      this.layer_.appendChild(element);

      // Test if the element still matches one of the `fixed` selectors. If not
      // return it back to BODY.
      var matches = fe.selectors.some(function (selector) {
        return _this4.matches_(element, selector);
      });
      if (!matches) {
        (0, _log.user)().warn(TAG, 'Failed to move the element to the fixed position layer.' + ' This is most likely due to the compound CSS selector:', fe.element);
        this.returnFrom(fe);
      }
    }

    /** @override */

  }, {
    key: 'returnFrom',
    value: function returnFrom(fe) {
      if (!fe.placeholder || !this.doc_.contains(fe.placeholder)) {
        return;
      }
      (0, _log.dev)().fine(TAG, 'return from fixed:', fe.id, fe.element);
      if (this.doc_.contains(fe.element)) {
        (0, _style.setStyle)(fe.element, 'zIndex', '');
        fe.placeholder.parentElement.replaceChild(fe.element, fe.placeholder);
      } else {
        fe.placeholder.parentElement.removeChild(fe.placeholder);
      }
    }

    /**
     * @param {!Element} element
     * @param {string} selector
     * @return {boolean}
     * @private
     */

  }, {
    key: 'matches_',
    value: function matches_(element, selector) {
      try {
        var matcher = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector;
        if (matcher) {
          return matcher.call(element, selector);
        }
      } catch (e) {
        // Fail silently.
        (0, _log.dev)().error(TAG, 'Failed to test query match:', e);
      }
      return false;
    }
  }]);

  return TransferLayerBody;
}();

var FIXED_LAYER_SLOT = 'i-amphtml-fixed';

/**
 * The fixed layer is created inside the shadow root of the `<body>` element
 * and fixed elements are distributed into this element via slots.
 * @implements {TransferLayerDef}
 */

var TransferLayerShadow = function () {
  /**
   * @param {!Document} doc
   */
  function TransferLayerShadow(doc) {
    _classCallCheck(this, TransferLayerShadow);

    /** @private @const {!Element} */
    this.layer_ = doc.createElement('div');
    this.layer_.id = 'i-amphtml-fixed-layer';
    (0, _style.setImportantStyles)(this.layer_, {
      position: 'absolute',
      top: 0,
      left: 0,
      height: 0,
      width: 0,
      overflow: 'hidden'
    });

    // The slot where all fixed elements will be distributed.
    var slot = doc.createElement('slot');
    slot.setAttribute('name', FIXED_LAYER_SLOT);
    this.layer_.appendChild(slot);

    doc.body.shadowRoot.appendChild(this.layer_);
  }

  /** @override */


  _createClass(TransferLayerShadow, [{
    key: 'getRoot',
    value: function getRoot() {
      return this.layer_;
    }

    /** @override */

  }, {
    key: 'update',
    value: function update() {}
    // Nothing to do.


    /** @override */

  }, {
    key: 'transferTo',
    value: function transferTo(fe) {
      var element = fe.elem
